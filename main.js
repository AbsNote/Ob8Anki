'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

// 自动生成文件：构建阶段由 scripts/build-highlight-assets.js 生成
// 请勿手动修改
var highlightjsBase64 = "";
var highlightCssDarkBase64 = "LyohCiAgVGhlbWU6IEdvb2dsZSBEYXJrCiAgQXV0aG9yOiBTZXRoIFdyaWdodCAoaHR0cDovL3NldGhhd3JpZ2h0LmNvbSkKICBMaWNlbnNlOiB+IE1JVCAob3IgbW9yZSBwZXJtaXNzaXZlKSBbdmlhIGJhc2UxNi1zY2hlbWVzLXNvdXJjZV0KICBNYWludGFpbmVyOiBAaGlnaGxpZ2h0anMvY29yZS10ZWFtCiAgVmVyc2lvbjogMjAyMS4wOS4wCiovcHJlIGNvZGUuaGxqc3tkaXNwbGF5OmJsb2NrO292ZXJmbG93LXg6YXV0bztwYWRkaW5nOjFlbX1jb2RlLmhsanN7cGFkZGluZzozcHggNXB4fS5obGpze2NvbG9yOiNjNWM4YzY7YmFja2dyb3VuZDojMWQxZjIxfS5obGpzIDo6c2VsZWN0aW9uLC5obGpzOjpzZWxlY3Rpb257YmFja2dyb3VuZC1jb2xvcjojMzczYjQxO2NvbG9yOiNjNWM4YzZ9LmhsanMtY29tbWVudHtjb2xvcjojOTY5ODk2fS5obGpzLXRhZ3tjb2xvcjojYjRiN2I0fS5obGpzLW9wZXJhdG9yLC5obGpzLXB1bmN0dWF0aW9uLC5obGpzLXN1YnN0e2NvbG9yOiNjNWM4YzZ9LmhsanMtb3BlcmF0b3J7b3BhY2l0eTouN30uaGxqcy1idWxsZXQsLmhsanMtZGVsZXRpb24sLmhsanMtbmFtZSwuaGxqcy1zZWxlY3Rvci10YWcsLmhsanMtdGVtcGxhdGUtdmFyaWFibGUsLmhsanMtdmFyaWFibGV7Y29sb3I6I2NjMzQyYn0uaGxqcy1hdHRyLC5obGpzLWxpbmssLmhsanMtbGl0ZXJhbCwuaGxqcy1udW1iZXIsLmhsanMtc3ltYm9sLC5obGpzLXZhcmlhYmxlLmNvbnN0YW50X3tjb2xvcjojZjk2YTM4fS5obGpzLWNsYXNzIC5obGpzLXRpdGxlLC5obGpzLXRpdGxlLC5obGpzLXRpdGxlLmNsYXNzX3tjb2xvcjojZmJhOTIyfS5obGpzLXN0cm9uZ3tmb250LXdlaWdodDo3MDA7Y29sb3I6I2ZiYTkyMn0uaGxqcy1hZGRpdGlvbiwuaGxqcy1jb2RlLC5obGpzLXN0cmluZywuaGxqcy10aXRsZS5jbGFzc18uaW5oZXJpdGVkX197Y29sb3I6IzE5ODg0NH0uaGxqcy1hdHRyaWJ1dGUsLmhsanMtYnVpbHRfaW4sLmhsanMtZG9jdGFnLC5obGpzLWZ1bmN0aW9uIC5obGpzLXRpdGxlLC5obGpzLWtleXdvcmQuaGxqcy1hdHJ1bGUsLmhsanMtcXVvdGUsLmhsanMtcmVnZXhwLC5obGpzLXNlY3Rpb24sLmhsanMtdGl0bGUuZnVuY3Rpb25fLC5ydWJ5IC5obGpzLXByb3BlcnR5e2NvbG9yOiMzOTcxZWR9LmRpZmYgLmhsanMtbWV0YSwuaGxqcy1rZXl3b3JkLC5obGpzLXRlbXBsYXRlLXRhZywuaGxqcy10eXBle2NvbG9yOiNhMzZhYzd9LmhsanMtZW1waGFzaXN7Y29sb3I6I2EzNmFjNztmb250LXN0eWxlOml0YWxpY30uaGxqcy1tZXRhLC5obGpzLW1ldGEgLmhsanMta2V5d29yZCwuaGxqcy1tZXRhIC5obGpzLXN0cmluZ3tjb2xvcjojMzk3MWVkfS5obGpzLW1ldGEgLmhsanMta2V5d29yZCwuaGxqcy1tZXRhLWtleXdvcmR7Zm9udC13ZWlnaHQ6NzAwfQ==";
var highlightCssLightBase64 = "LyohCiAgVGhlbWU6IEdvb2dsZSBMaWdodAogIEF1dGhvcjogU2V0aCBXcmlnaHQgKGh0dHA6Ly9zZXRoYXdyaWdodC5jb20pCiAgTGljZW5zZTogfiBNSVQgKG9yIG1vcmUgcGVybWlzc2l2ZSkgW3ZpYSBiYXNlMTYtc2NoZW1lcy1zb3VyY2VdCiAgTWFpbnRhaW5lcjogQGhpZ2hsaWdodGpzL2NvcmUtdGVhbQogIFZlcnNpb246IDIwMjEuMDkuMAoqL3ByZSBjb2RlLmhsanN7ZGlzcGxheTpibG9jaztvdmVyZmxvdy14OmF1dG87cGFkZGluZzoxZW19Y29kZS5obGpze3BhZGRpbmc6M3B4IDVweH0uaGxqc3tjb2xvcjojMzczYjQxO2JhY2tncm91bmQ6I2ZmZn0uaGxqcyA6OnNlbGVjdGlvbiwuaGxqczo6c2VsZWN0aW9ue2JhY2tncm91bmQtY29sb3I6I2M1YzhjNjtjb2xvcjojMzczYjQxfS5obGpzLWNvbW1lbnR7Y29sb3I6I2I0YjdiNH0uaGxqcy10YWd7Y29sb3I6Izk2OTg5Nn0uaGxqcy1vcGVyYXRvciwuaGxqcy1wdW5jdHVhdGlvbiwuaGxqcy1zdWJzdHtjb2xvcjojMzczYjQxfS5obGpzLW9wZXJhdG9ye29wYWNpdHk6Ljd9LmhsanMtYnVsbGV0LC5obGpzLWRlbGV0aW9uLC5obGpzLW5hbWUsLmhsanMtc2VsZWN0b3ItdGFnLC5obGpzLXRlbXBsYXRlLXZhcmlhYmxlLC5obGpzLXZhcmlhYmxle2NvbG9yOiNjYzM0MmJ9LmhsanMtYXR0ciwuaGxqcy1saW5rLC5obGpzLWxpdGVyYWwsLmhsanMtbnVtYmVyLC5obGpzLXN5bWJvbCwuaGxqcy12YXJpYWJsZS5jb25zdGFudF97Y29sb3I6I2Y5NmEzOH0uaGxqcy1jbGFzcyAuaGxqcy10aXRsZSwuaGxqcy10aXRsZSwuaGxqcy10aXRsZS5jbGFzc197Y29sb3I6I2ZiYTkyMn0uaGxqcy1zdHJvbmd7Zm9udC13ZWlnaHQ6NzAwO2NvbG9yOiNmYmE5MjJ9LmhsanMtYWRkaXRpb24sLmhsanMtY29kZSwuaGxqcy1zdHJpbmcsLmhsanMtdGl0bGUuY2xhc3NfLmluaGVyaXRlZF9fe2NvbG9yOiMxOTg4NDR9LmhsanMtYXR0cmlidXRlLC5obGpzLWJ1aWx0X2luLC5obGpzLWRvY3RhZywuaGxqcy1mdW5jdGlvbiAuaGxqcy10aXRsZSwuaGxqcy1rZXl3b3JkLmhsanMtYXRydWxlLC5obGpzLXF1b3RlLC5obGpzLXJlZ2V4cCwuaGxqcy1zZWN0aW9uLC5obGpzLXRpdGxlLmZ1bmN0aW9uXywucnVieSAuaGxqcy1wcm9wZXJ0eXtjb2xvcjojMzk3MWVkfS5kaWZmIC5obGpzLW1ldGEsLmhsanMta2V5d29yZCwuaGxqcy10ZW1wbGF0ZS10YWcsLmhsanMtdHlwZXtjb2xvcjojYTM2YWM3fS5obGpzLWVtcGhhc2lze2NvbG9yOiNhMzZhYzc7Zm9udC1zdHlsZTppdGFsaWN9LmhsanMtbWV0YSwuaGxqcy1tZXRhIC5obGpzLWtleXdvcmQsLmhsanMtbWV0YSAuaGxqcy1zdHJpbmd7Y29sb3I6IzM5NzFlZH0uaGxqcy1tZXRhIC5obGpzLWtleXdvcmQsLmhsanMtbWV0YS1rZXl3b3Jke2ZvbnQtd2VpZ2h0OjcwMH0=";
var highlightInitBase64 = "KGZ1bmN0aW9uKCl7CiAgZnVuY3Rpb24gcmVhZHkoZm4pe2lmKGRvY3VtZW50LnJlYWR5U3RhdGU9PT0nbG9hZGluZycpe2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLGZuKTt9ZWxzZXtmbigpO319CiAgcmVhZHkoZnVuY3Rpb24oKXsKICAgIGlmKHR5cGVvZiBobGpzPT09J3VuZGVmaW5lZCcpIHJldHVybjsKICAgIHRyeSB7CiAgICAgIGhsanMuY29uZmlndXJlKHtjbGFzc1ByZWZpeDogJ2hsanMtJ30pOwogICAgfSBjYXRjaChlKSB7fQogICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgncHJlIGNvZGUnKS5mb3JFYWNoKGZ1bmN0aW9uKGJsb2NrKXsKICAgICAgdHJ5IHsgaGxqcy5oaWdobGlnaHRFbGVtZW50KGJsb2NrKTsgfSBjYXRjaChlKSB7fQogICAgfSk7CiAgfSk7Cn0pKCk7";
// 注入到 Anki 模板的脚本/样式占位（媒体文件名固定）
var codeScript = "<link rel=\"stylesheet\" href=\"_highlight.css\">\n<script src=\"_highlight.js\"></script>\n<script src=\"_highlightInit.js\"></script>";

var noticeTimeout = 15 * 1000;
var sourceDeckExtension = "-source";
var flashcardsIcon = "<path fill=\"currentColor\" stroke=\"currentColor\" d=\"m98.69029,0.55335l-54.30674,0a1.1128,1.14693 0 0 0 -1.1128,1.15682l0,26.36956l-42.32491,14.67282a1.1128,1.14693 0 0 0 -0.7003,1.45344c0.09593,0.30651 9.89052,30.40359 13.18097,40.38981c2.6573,8.05819 2.20642,13.55555 2.19683,13.61488a1.1128,1.14693 0 0 0 0.4221,0.98873a1.08402,1.11727 0 0 0 0.69071,0.24718a1.10321,1.13704 0 0 0 0.35495,-0.05932l51.47676,-17.79722a1.1224,1.15682 0 0 0 0.75786,-0.98873c0,-0.2373 0.58518,-5.71489 -2.16805,-14.14879c-0.62355,-1.92803 -1.48694,-4.56795 -2.47503,-7.60337l34.00766,0a1.1128,1.14693 0 0 0 1.1224,-1.14693l0,-55.99205a1.1224,1.15682 0 0 0 -1.1224,-1.15682zm-31.55182,79.09878l-49.24156,17.02601a41.33682,42.60458 0 0 0 -2.35991,-12.85355c-2.87794,-8.86895 -11.02251,-33.73563 -12.81643,-39.25277l49.35668,-17.115c1.8131,5.53691 10.00564,30.65078 12.96032,39.70759a35.96466,37.06766 0 0 1 2.1009,12.48772zm30.43902,-23.07707l-33.65272,0c-4.25935,-13.03152 -10.08238,-30.9474 -10.08238,-30.9474a1.1224,1.15682 0  0 0 -1.41978,-0.72178l-6.91665,2.39274l0,-24.44152l52.07154,0l0,53.71796z\"/>";
var sourceField = "<br><br>\r\n<small>Source: {{Source}}</small>";

// 国际化类型定义文件
// 可用语言列表
var AVAILABLE_LANGUAGES = [
    { code: 'zh', name: 'Chinese', nativeName: '中文' },
    { code: 'en', name: 'English', nativeName: 'English' },
    { code: 'de', name: 'German', nativeName: 'Deutsch' }
];
// 默认语言
var DEFAULT_LANGUAGE = 'zh';

var zhTranslations = {
    settings: {
        title: '闪卡 - 设置',
        language: {
            name: '界面语言',
            desc: '选择界面显示语言',
            chinese: '中文',
            english: 'English',
            german: 'Deutsch'
        },
        ankiConnect: {
            description: '这只需要做一次。打开 Anki 并点击按钮来授予权限。',
            requirement: '需要 AnkiConnect 插件',
            givePermission: '授予权限',
            grantPermission: '授予权限',
            permissionGranted: 'Anki Connect 权限已授予',
            permissionNotGranted: 'AnkiConnect 权限未授予',
            connectionError: '出现错误，Anki 是否已打开？',
            testAnki: '测试 Anki',
            testDesc: '测试 Anki 和 Obsidian 之间的连接是否正常工作。',
            test: '测试',
            testSuccess: 'Anki 连接正常',
            testFailed: 'Anki 连接失败'
        },
        general: {
            title: '通用设置',
            contextAware: {
                name: '上下文感知模式',
                desc: '将祖先标题添加到闪卡的问题中。'
            },
            sourceSupport: {
                name: '源支持',
                desc: '为每张卡片添加源，即指向原始卡片的链接。注意：没有源支持的旧卡片无法更新。'
            },
            inlineID: {
                name: '内联 ID 支持',
                desc: '在内联卡片的行末添加 ID。'
            },
            folderBasedDeck: {
                name: '基于文件夹的牌组名称',
                desc: '根据文件夹路径自动生成牌组名称。'
            },
            defaultDeck: {
                name: '默认牌组名称',
                desc: '未指定时卡片将添加到的默认牌组名称。',
                placeholder: '牌组::子牌组',
                error: '牌组名称必须至少包含 1 个字符'
            },
            defaultAnkiTag: {
                name: '默认 Anki 标签',
                desc: '此标签将添加到 Anki 上生成的每张卡片',
                placeholder: 'Anki 标签',
                noTagNotice: '不会添加默认标签'
            },
            codeHighlight: {
                name: '代码高亮',
                desc: '在 Anki 卡片中注入 highlight.js 并高亮代码块',
                theme: {
                    name: '高亮主题',
                    desc: '选择用于 Anki 卡片的代码高亮主题'
                },
                themes: {
                    googleDark: 'Google Dark',
                    googleLight: 'Google Light'
                }
            }
        },
        cardIdentification: {
            title: '卡片识别',
            flashcardsTag: {
                name: '闪卡 #标签',
                desc: '用于识别笔记中闪卡的标签（不区分大小写）。',
                placeholder: '卡片',
                error: '标签必须至少包含 1 个字符'
            },
            inlineSeparator: {
                name: '内联卡片分隔符',
                desc: '用于识别笔记中内联卡片的分隔符。',
                lengthError: '分隔符必须至少包含 1 个字符',
                duplicateError: '分隔符必须与内联反向分隔符不同',
                changed: '分隔符已更改'
            },
            inlineReverseSeparator: {
                name: '内联反向卡片分隔符',
                desc: '用于识别笔记中内联反向卡片的分隔符。',
                lengthError: '分隔符必须至少包含 1 个字符',
                duplicateError: '分隔符必须与内联分隔符不同',
                changed: '分隔符已更改'
            }
        },
        ribbonIcon: {
            title: '功能区图标行为',
            action: {
                name: '功能区图标操作',
                desc: '选择点击功能区图标时的操作',
                single: '处理当前文件',
                folder: '处理当前文件夹',
                all: '处理所有文件'
            }
        },
        notifications: {
            title: '通知设置',
            showNoChanges: {
                name: '显示无更改通知',
                desc: '当文件不需要更改时显示通知'
            }
        }
    },
    // 命令相关
    commands: {
        generateCurrentFile: '为当前文件生成闪卡',
        generateAllFiles: '为所有文件生成闪卡',
        generateFlashcards: '生成闪卡'
    },
    // 界面相关
    ui: {
        processingProgress: '处理进度',
        currentFile: '当前文件',
        currentFolder: '当前文件夹',
        calculating: '计算中...',
        preparing: '准备中...',
        folderProcessingResults: '文件夹处理结果',
        flashcardsGenerationResults: '记忆卡片生成结果',
        processingError: '处理时出错',
        unknownError: '未知错误',
        openFileFirst: '请先打开一个文件以确定要处理的文件夹',
        cannotDetermineFolder: '无法确定当前文件夹',
        processAllFilesPrompt: '当前没有打开文件。是否要处理库中的所有文件？',
        confirmation: '确认',
        yes: '是',
        no: '否',
        noResultsToDisplay: '没有结果可显示。',
        close: '关闭'
    },
    processing: {
        errors: {
            ankiNotOpen: 'Anki 未打开或 AnkiConnect 未运行',
            couldNotUpdateDeck: '无法更新牌组',
            couldNotUpdateFile: '无法更新文件',
            couldNotUploadMedia: '无法上传媒体文件',
            couldNotReadMedia: '无法读取媒体文件',
            couldNotWriteCards: '无法写入卡片',
            couldNotUpdateCards: '无法更新卡片',
            couldNotDeleteCard: '无法删除卡片',
            somethingWentWrong: '出现了问题',
            unknownError: '未知错误',
            failedToIssueRequest: '请求发送失败',
            unexpectedNumberOfFields: '字段数量不符合预期',
            missingErrorField: '缺少错误字段',
            missingResultField: '缺少结果字段'
        },
        success: {
            cardsMoved: '卡片已移动到新牌组',
            nothingToDo: '无需操作。一切都是最新的',
            folderProcessed: '文件夹已处理。没有需要更改的内容。',
            noChangesNeeded: '没有需要更改的内容'
        },
        stats: {
            filesProcessed: '已处理文件',
            cardsCreated: '已创建卡片',
            cardsUpdated: '已更新卡片',
            cardsDeleted: '已删除卡片',
            cardsSkipped: '已跳过卡片',
            cardsError: '错误卡片'
        }
    },
    notifications: {
        insertedSuccessfully: '创建成功',
        updatedSuccessfully: '更新成功',
        deletedSuccessfully: '删除成功',
        error: '错误',
        nothingToDo: '无需更改',
        unknownError: '未知错误',
        cards: '张卡片',
        allFilesProcessedNoChanges: '所有文件已处理。没有需要更改的内容。',
        processingComplete: '处理完成: 共处理 {{processed}} 个文件, 创建 {{created}} 张卡片, 更新 {{updated}} 张卡片, 删除 {{deleted}} 张卡片, 跳过 {{skipped}} 个文件, 错误 {{errors}} 个',
        cardNotInAnki: 'ID为 {{id}} 的卡片不在 Anki 中！',
        cardsMovedToDeck: '卡片已移动到新牌组',
        everythingUpToDate: '一切都是最新的',
        couldNotUploadMedia: '无法上传媒体文件',
        couldNotReadMedia: '无法读取媒体文件',
        couldNotWriteCards: '无法在 Anki 中写入卡片',
        couldNotUpdateCards: '无法在 Anki 中更新卡片',
        couldNotDeleteCard: '无法从 Anki 中删除卡片',
        couldNotUpdateDeck: '无法更新牌组',
        couldNotUpdateFile: '无法更新文件',
        ankiConnectNotRunning: 'Anki Connect 未运行。请确保 Anki 已打开并安装了 AnkiConnect 插件。',
        ankiConnectTestSuccess: 'Anki Connect 连接成功！',
        ankiConnectTestFailed: 'Anki Connect 连接失败',
        settingsUpdated: '设置已更新',
        languageChanged: '语言已切换'
    },
    reverseSync: {
        noChanges: '没有发现变更的卡片',
        processing: '正在处理 {{count}} 张变更的卡片...',
        completed: '反向同步完成：已更新 {{updated}} 个文件，共处理 {{total}} 张卡片',
        noUpdates: '所有卡片都是最新的，无需更新',
        failed: '反向同步失败',
        connectionFailed: 'Anki 连接失败',
        cardProcessingFailed: '处理卡片 {{noteId}} 失败',
        fileNotFound: '未找到对应的 Obsidian 源文件或元数据',
        noUpdateNeeded: '内容未发生变化或 Obsidian 版本更新',
        invalidFileLocation: '无效的文件定位结果',
        cannotLocateCardContent: '无法定位卡片内容范围'
    },
    anki: {
        models: {
            frontBack: '正面 / 背面',
            backFront: '背面 / 正面',
            cloze: '填空',
            spaced: '间隔'
        },
        fields: {
            front: '正面',
            back: '背面',
            prompt: '提示',
            text: '文本',
            extra: '额外',
            source: '来源'
        }
    },
    conflict: {
        title: '冲突解决 ({{current}}/{{total}})',
        noConflicts: '没有发现冲突',
        cardId: '卡片 ID: {{id}}',
        frontContent: '正面内容: {{content}}',
        previous: '上一个',
        next: '下一个',
        obsidianVersion: 'Obsidian 版本',
        ankiVersion: 'Anki 版本',
        differences: '差异对比',
        lastModified: '最后修改: {{time}}',
        notExists: '不存在',
        fieldDifferences: '字段差异',
        tagDifferences: '标签差异',
        tagsAdded: '新增标签',
        tagsRemoved: '移除标签',
        deckChanged: '牌组变更',
        deckChangeDetails: '从 "{{from}}" 变更为 "{{to}}"',
        recommendedDirection: '推荐同步方向',
        directionObToAnki: 'Obsidian → Anki',
        directionAnkiToOb: 'Anki → Obsidian',
        directionUnknown: '未知',
        frontField: '正面',
        backField: '背面',
        tags: '标签',
        deck: '牌组',
        chooseResolution: '选择解决方案',
        useObsidianVersion: '使用 Obsidian 版本',
        useAnkiVersion: '使用 Anki 版本',
        applyToAll: '应用到所有冲突',
        applyToAllDesc: '将此选择应用到所有剩余的冲突',
        cancel: '取消',
        finish: '完成',
        unknown: '未知'
    },
    sync: {
        bidirectional: {
            starting: '开始双向同步...',
            collecting: '收集卡片元数据...',
            detecting: '检测冲突...',
            resolving: '解决冲突...',
            syncing: '执行同步...'
        }
    }
};

var enTranslations = {
    settings: {
        title: 'Flashcards - Settings',
        language: {
            name: 'Interface Language',
            desc: 'Choose interface display language',
            chinese: '中文',
            english: 'English',
            german: 'Deutsch'
        },
        ankiConnect: {
            description: 'This only needs to be done once. Open Anki and click the button to grant permission.',
            requirement: 'AnkiConnect plugin required',
            givePermission: 'Give Permission',
            grantPermission: 'Grant Permission',
            permissionGranted: 'Anki Connect permission granted',
            permissionNotGranted: 'AnkiConnect permission not granted',
            connectionError: 'An error occurred, is Anki open?',
            testAnki: 'Test Anki',
            testDesc: 'Test if the connection between Anki and Obsidian is working properly.',
            test: 'Test',
            testSuccess: 'Anki connection works',
            testFailed: 'Anki connection failed'
        },
        general: {
            title: 'General Settings',
            contextAware: {
                name: 'Context-aware mode',
                desc: 'Add ancestor headings to flashcard questions.'
            },
            sourceSupport: {
                name: 'Source support',
                desc: 'Add source to each card, i.e., a link to the original card. Note: Old cards without source support cannot be updated.'
            },
            inlineID: {
                name: 'Inline ID support',
                desc: 'Add ID at the end of inline card lines.'
            },
            folderBasedDeck: {
                name: 'Folder-based deck name',
                desc: 'Automatically generate deck names based on folder path.'
            },
            defaultDeck: {
                name: 'Default deck name',
                desc: 'Default deck name where cards will be added when not specified.',
                placeholder: 'Deck::Subdeck',
                error: 'Deck name must contain at least 1 character'
            },
            defaultAnkiTag: {
                name: 'Default Anki tag',
                desc: 'This tag will be added to every card generated on Anki',
                placeholder: 'Anki tag',
                noTagNotice: 'No default tag will be added'
            },
            codeHighlight: {
                name: 'Code Highlight',
                desc: 'Inject highlight.js and highlight code blocks in Anki cards',
                theme: {
                    name: 'Highlight Theme',
                    desc: 'Choose the code highlight theme for Anki cards'
                },
                themes: {
                    googleDark: 'Google Dark',
                    googleLight: 'Google Light'
                }
            }
        },
        cardIdentification: {
            title: 'Cards Identification',
            flashcardsTag: {
                name: 'Flashcards #tag',
                desc: 'Tag used to identify flashcards in notes (case insensitive).',
                placeholder: 'card',
                error: 'Tag must contain at least 1 character'
            },
            inlineSeparator: {
                name: 'Inline card separator',
                desc: 'Separator used to identify inline cards in notes.',
                lengthError: 'Separator must contain at least 1 character',
                duplicateError: 'Separator must be different from inline reverse separator',
                changed: 'Separator changed'
            },
            inlineReverseSeparator: {
                name: 'Inline reverse card separator',
                desc: 'Separator used to identify inline reverse cards in notes.',
                lengthError: 'Separator must contain at least 1 character',
                duplicateError: 'Separator must be different from inline separator',
                changed: 'Separator changed'
            }
        },
        ribbonIcon: {
            title: 'Ribbon Icon Behavior',
            action: {
                name: 'Ribbon icon action',
                desc: 'Choose action when clicking the ribbon icon',
                single: 'Process current file',
                folder: 'Process current folder',
                all: 'Process all files'
            }
        },
        notifications: {
            title: 'Notification Settings',
            showNoChanges: {
                name: 'Show no changes notice',
                desc: 'Show notification when file needs no changes'
            }
        }
    },
    processing: {
        errors: {
            ankiNotOpen: 'Anki is not open or AnkiConnect is not running',
            couldNotUpdateDeck: 'Could not update deck',
            couldNotUpdateFile: 'Could not update file',
            couldNotUploadMedia: 'Could not upload media file',
            couldNotReadMedia: 'Could not read media file',
            couldNotWriteCards: 'Could not write cards',
            couldNotUpdateCards: 'Could not update cards',
            couldNotDeleteCard: 'Could not delete card',
            somethingWentWrong: 'Something went wrong',
            unknownError: 'Unknown error',
            failedToIssueRequest: 'Failed to issue request',
            unexpectedNumberOfFields: 'Unexpected number of fields',
            missingErrorField: 'Missing error field',
            missingResultField: 'Missing result field'
        },
        success: {
            cardsMoved: 'Cards moved in new deck',
            nothingToDo: 'Nothing to do. Everything is up to date',
            folderProcessed: 'Folder processed. No changes needed.',
            noChangesNeeded: 'No changes needed'
        },
        stats: {
            filesProcessed: 'Files processed',
            cardsCreated: 'Cards created',
            cardsUpdated: 'Cards updated',
            cardsDeleted: 'Cards deleted',
            cardsSkipped: 'Cards skipped',
            cardsError: 'Cards with errors'
        }
    },
    notifications: {
        insertedSuccessfully: 'Inserted successfully',
        updatedSuccessfully: 'Updated successfully',
        deletedSuccessfully: 'Deleted successfully',
        error: 'Error',
        nothingToDo: 'Nothing to do',
        unknownError: 'Unknown error',
        cards: 'cards',
        allFilesProcessedNoChanges: 'All files processed. No changes needed.',
        processingComplete: 'Processing complete: {{processed}} files processed, {{created}} cards created, {{updated}} cards updated, {{deleted}} cards deleted, {{skipped}} files skipped, {{errors}} errors',
        cardNotInAnki: 'Card with ID {{id}} is not in Anki!',
        cardsMovedToDeck: 'Cards moved to new deck',
        everythingUpToDate: 'Everything is up to date',
        couldNotUploadMedia: 'Could not upload media files',
        couldNotReadMedia: 'Could not read media files',
        couldNotWriteCards: 'Could not write cards to Anki',
        couldNotUpdateCards: 'Could not update cards in Anki',
        couldNotDeleteCard: 'Could not delete card from Anki',
        couldNotUpdateDeck: 'Could not update deck',
        couldNotUpdateFile: 'Could not update file',
        ankiConnectNotRunning: 'Anki Connect is not running. Please ensure Anki is open and AnkiConnect plugin is installed.',
        ankiConnectTestSuccess: 'Anki Connect connection successful!',
        ankiConnectTestFailed: 'Anki Connect connection failed',
        settingsUpdated: 'Settings updated',
        languageChanged: 'Language changed'
    },
    // Commands
    commands: {
        generateCurrentFile: 'Generate for the current file',
        generateAllFiles: 'Generate for all files in vault',
        generateFlashcards: 'Generate flashcards'
    },
    // UI
    ui: {
        processingProgress: 'Processing Progress',
        currentFile: 'Current File',
        currentFolder: 'Current Folder',
        calculating: 'Calculating...',
        preparing: 'Preparing...',
        folderProcessingResults: 'Folder Processing Results',
        flashcardsGenerationResults: 'Flashcards Generation Results',
        processingError: 'Processing Error',
        unknownError: 'Unknown Error',
        openFileFirst: 'Please open a file first to determine the folder to process',
        cannotDetermineFolder: 'Cannot determine current folder',
        processAllFilesPrompt: 'No file is currently open. Would you like to process all files in the vault?',
        confirmation: 'Confirmation',
        yes: 'Yes',
        no: 'No',
        noResultsToDisplay: 'No results to display.',
        close: 'Close'
    },
    reverseSync: {
        noChanges: 'No changed cards found',
        processing: 'Processing {{count}} changed cards...',
        completed: 'Reverse sync completed: {{updated}} files updated, {{total}} cards processed',
        noUpdates: 'All cards are up to date, no updates needed',
        failed: 'Reverse sync failed',
        connectionFailed: 'Anki connection failed',
        cardProcessingFailed: 'Failed to process card {{noteId}}',
        fileNotFound: 'Corresponding Obsidian source file or metadata not found',
        noUpdateNeeded: 'Content unchanged or Obsidian version is newer',
        invalidFileLocation: 'Invalid file location result',
        cannotLocateCardContent: 'Cannot locate card content range'
    },
    anki: {
        models: {
            frontBack: 'Front / Back',
            backFront: 'Back / Front',
            cloze: 'Cloze',
            spaced: 'Spaced'
        },
        fields: {
            front: 'Front',
            back: 'Back',
            prompt: 'Prompt',
            text: 'Text',
            extra: 'Extra',
            source: 'Source'
        }
    },
    conflict: {
        title: 'Conflict Resolution ({{current}}/{{total}})',
        noConflicts: 'No conflicts found',
        cardId: 'Card ID: {{id}}',
        frontContent: 'Front Content: {{content}}',
        previous: 'Previous',
        next: 'Next',
        obsidianVersion: 'Obsidian Version',
        ankiVersion: 'Anki Version',
        differences: 'Differences',
        lastModified: 'Last Modified: {{time}}',
        notExists: 'Does not exist',
        fieldDifferences: 'Field Differences',
        tagDifferences: 'Tag Differences',
        tagsAdded: 'Tags Added',
        tagsRemoved: 'Tags Removed',
        deckChanged: 'Deck Changed',
        deckChangeDetails: 'From "{{from}}" to "{{to}}"',
        recommendedDirection: 'Recommended Sync Direction',
        directionObToAnki: 'Obsidian → Anki',
        directionAnkiToOb: 'Anki → Obsidian',
        directionUnknown: 'Unknown',
        frontField: 'Front',
        backField: 'Back',
        tags: 'Tags',
        deck: 'Deck',
        chooseResolution: 'Choose Resolution',
        useObsidianVersion: 'Use Obsidian Version',
        useAnkiVersion: 'Use Anki Version',
        applyToAll: 'Apply to All',
        applyToAllDesc: 'Apply this choice to all remaining conflicts',
        cancel: 'Cancel',
        finish: 'Finish',
        unknown: 'Unknown'
    },
    sync: {
        bidirectional: {
            starting: 'Starting bidirectional sync...',
            collecting: 'Collecting card metadata...',
            detecting: 'Detecting conflicts...',
            resolving: 'Resolving conflicts...',
            syncing: 'Executing sync...'
        }
    }
};

var deTranslations = {
    settings: {
        title: 'Karteikarten - Einstellungen',
        language: {
            name: 'Oberflächensprache',
            desc: 'Wählen Sie die Anzeigesprache der Oberfläche',
            chinese: '中文',
            english: 'English',
            german: 'Deutsch'
        },
        ankiConnect: {
            description: 'Dies muss nur einmal gemacht werden. Öffnen Sie Anki und klicken Sie auf die Schaltfläche, um die Berechtigung zu erteilen.',
            requirement: 'AnkiConnect Plugin erforderlich',
            givePermission: 'Berechtigung erteilen',
            grantPermission: 'Berechtigung gewähren',
            permissionGranted: 'Anki Connect Berechtigung erteilt',
            permissionNotGranted: 'AnkiConnect Berechtigung nicht erteilt',
            connectionError: 'Ein Fehler ist aufgetreten, ist Anki geöffnet?',
            testAnki: 'Anki testen',
            testDesc: 'Testen Sie, ob die Verbindung zwischen Anki und Obsidian ordnungsgemäß funktioniert.',
            test: 'Testen',
            testSuccess: 'Anki-Verbindung funktioniert',
            testFailed: 'Anki-Verbindung fehlgeschlagen'
        },
        general: {
            title: 'Allgemeine Einstellungen',
            contextAware: {
                name: 'Kontextbewusster Modus',
                desc: 'Fügen Sie Vorfahren-Überschriften zu Karteikarten-Fragen hinzu.'
            },
            sourceSupport: {
                name: 'Quellunterstützung',
                desc: 'Fügen Sie jeder Karte eine Quelle hinzu, d.h. einen Link zur ursprünglichen Karte. Hinweis: Alte Karten ohne Quellunterstützung können nicht aktualisiert werden.'
            },
            inlineID: {
                name: 'Inline-ID-Unterstützung',
                desc: 'ID am Ende der Inline-Kartenzeilen hinzufügen.'
            },
            folderBasedDeck: {
                name: 'Ordnerbasierter Stapelname',
                desc: 'Stapelnamen automatisch basierend auf dem Ordnerpfad generieren.'
            },
            defaultDeck: {
                name: 'Standard-Stapelname',
                desc: 'Standard-Stapelname, zu dem Karten hinzugefügt werden, wenn nicht angegeben.',
                placeholder: 'Stapel::Unterstapel',
                error: 'Stapelname muss mindestens 1 Zeichen enthalten'
            },
            defaultAnkiTag: {
                name: 'Standard-Anki-Tag',
                desc: 'Dieses Tag wird zu jeder auf Anki generierten Karte hinzugefügt',
                placeholder: 'Anki-Tag',
                noTagNotice: 'Kein Standard-Tag wird hinzugefügt'
            },
            codeHighlight: {
                name: 'Code-Hervorhebung',
                desc: 'Inject highlight.js und hebe Codeblöcke in Anki-Karten hervor',
                theme: {
                    name: 'Hervorhebungsthema',
                    desc: 'Wählen Sie das Code-Hervorhebungsthema für Anki-Karten'
                },
                themes: {
                    googleDark: 'Google Dark',
                    googleLight: 'Google Light'
                }
            }
        },
        cardIdentification: {
            title: 'Kartenerkennung',
            flashcardsTag: {
                name: 'Karteikarten #Tag',
                desc: 'Tag zur Identifizierung von Karteikarten in Notizen (nicht case-sensitive).',
                placeholder: 'Karte',
                error: 'Tag muss mindestens 1 Zeichen enthalten'
            },
            inlineSeparator: {
                name: 'Inline-Karten-Trennzeichen',
                desc: 'Trennzeichen zur Identifizierung von Inline-Karten in Notizen.',
                lengthError: 'Trennzeichen muss mindestens 1 Zeichen enthalten',
                duplicateError: 'Trennzeichen muss sich vom Inline-Rückwärts-Trennzeichen unterscheiden',
                changed: 'Trennzeichen geändert'
            },
            inlineReverseSeparator: {
                name: 'Inline-Rückwärts-Karten-Trennzeichen',
                desc: 'Trennzeichen zur Identifizierung von Inline-Rückwärts-Karten in Notizen.',
                lengthError: 'Trennzeichen muss mindestens 1 Zeichen enthalten',
                duplicateError: 'Trennzeichen muss sich vom Inline-Trennzeichen unterscheiden',
                changed: 'Trennzeichen geändert'
            }
        },
        ribbonIcon: {
            title: 'Ribbon-Icon-Verhalten',
            action: {
                name: 'Ribbon-Icon-Aktion',
                desc: 'Wählen Sie die Aktion beim Klicken auf das Ribbon-Icon',
                single: 'Aktuelle Datei verarbeiten',
                folder: 'Aktuellen Ordner verarbeiten',
                all: 'Alle Dateien verarbeiten'
            }
        },
        notifications: {
            title: 'Benachrichtigungseinstellungen',
            showNoChanges: {
                name: 'Keine-Änderungen-Benachrichtigung anzeigen',
                desc: 'Benachrichtigung anzeigen, wenn Datei keine Änderungen benötigt'
            }
        }
    },
    processing: {
        errors: {
            ankiNotOpen: 'Fehler: Anki muss mit installiertem AnkiConnect geöffnet sein.',
            couldNotUpdateDeck: 'Fehler: Stapel-Datei konnte nicht aktualisiert werden.',
            couldNotUpdateFile: 'Fehler: Datei konnte nicht aktualisiert werden.',
            couldNotUploadMedia: 'Fehler: Medien konnten nicht hochgeladen werden',
            couldNotReadMedia: 'Fehler: Medien konnten nicht gelesen werden',
            couldNotWriteCards: 'Fehler: Karten konnten nicht in Anki geschrieben werden',
            couldNotUpdateCards: 'Fehler: Karten konnten nicht in Anki aktualisiert werden',
            couldNotDeleteCard: 'Fehler: Karte konnte nicht aus Anki gelöscht werden',
            somethingWentWrong: 'Etwas ist schiefgelaufen',
            unknownError: 'Unbekannter Fehler',
            failedToIssueRequest: 'Anfrage konnte nicht gesendet werden',
            unexpectedNumberOfFields: 'Antwort hat eine unerwartete Anzahl von Feldern',
            missingErrorField: 'Antwort fehlt erforderliches Fehlerfeld',
            missingResultField: 'Antwort fehlt erforderliches Ergebnisfeld'
        },
        success: {
            cardsMoved: 'Karten in neuen Stapel verschoben',
            nothingToDo: 'Nichts zu tun. Alles ist auf dem neuesten Stand',
            folderProcessed: 'Ordner verarbeitet. Keine Änderungen erforderlich.',
            noChangesNeeded: 'Keine Änderungen erforderlich'
        },
        stats: {
            filesProcessed: 'Dateien verarbeitet',
            cardsCreated: 'Karten erstellt',
            cardsUpdated: 'Karten aktualisiert',
            cardsDeleted: 'Karten gelöscht',
            cardsSkipped: 'Karten übersprungen',
            cardsError: 'Karten mit Fehlern'
        }
    },
    // Befehle
    commands: {
        generateCurrentFile: 'Für aktuelle Datei generieren',
        generateAllFiles: 'Für alle Dateien im Tresor generieren',
        generateFlashcards: 'Karteikarten generieren'
    },
    // Benutzeroberfläche
    ui: {
        processingProgress: 'Verarbeitungsfortschritt',
        currentFile: 'Aktuelle Datei',
        currentFolder: 'Aktueller Ordner',
        calculating: 'Berechnung...',
        preparing: 'Vorbereitung...',
        folderProcessingResults: 'Ordner-Verarbeitungsergebnisse',
        flashcardsGenerationResults: 'Karteikarten-Generierungsergebnisse',
        processingError: 'Verarbeitungsfehler',
        unknownError: 'Unbekannter Fehler',
        openFileFirst: 'Bitte öffnen Sie zuerst eine Datei, um den zu verarbeitenden Ordner zu bestimmen',
        cannotDetermineFolder: 'Aktueller Ordner kann nicht bestimmt werden',
        processAllFilesPrompt: 'Derzeit ist keine Datei geöffnet. Möchten Sie alle Dateien im Tresor verarbeiten?',
        confirmation: 'Bestätigung',
        yes: 'Ja',
        no: 'Nein',
        noResultsToDisplay: 'Keine Ergebnisse anzuzeigen.',
        close: 'Schließen'
    },
    notifications: {
        insertedSuccessfully: 'Erfolgreich eingefügt',
        updatedSuccessfully: 'Erfolgreich aktualisiert',
        deletedSuccessfully: 'Erfolgreich gelöscht',
        error: 'Fehler',
        nothingToDo: 'Nichts zu tun',
        unknownError: 'Unbekannter Fehler',
        cards: 'Karten',
        allFilesProcessedNoChanges: 'Alle Dateien verarbeitet. Keine Änderungen erforderlich.',
        processingComplete: 'Verarbeitung abgeschlossen: {{processed}} Dateien verarbeitet, {{created}} Karten erstellt, {{updated}} Karten aktualisiert, {{deleted}} Karten gelöscht, {{skipped}} Dateien übersprungen, {{errors}} Fehler',
        cardNotInAnki: 'Karte mit ID {{id}} ist nicht in Anki!',
        cardsMovedToDeck: 'Karten in neues Deck verschoben',
        everythingUpToDate: 'Alles ist auf dem neuesten Stand',
        couldNotUploadMedia: 'Medien konnten nicht hochgeladen werden',
        couldNotReadMedia: 'Medien konnten nicht gelesen werden',
        couldNotWriteCards: 'Karten konnten nicht in Anki geschrieben werden',
        couldNotUpdateCards: 'Karten konnten nicht in Anki aktualisiert werden',
        couldNotDeleteCard: 'Karte konnte nicht aus Anki gelöscht werden',
        couldNotUpdateDeck: 'Deck konnte nicht aktualisiert werden',
        couldNotUpdateFile: 'Datei konnte nicht aktualisiert werden',
        ankiConnectNotRunning: 'Anki Connect läuft nicht. Bitte stellen Sie sicher, dass Anki geöffnet ist und das AnkiConnect-Plugin installiert ist.',
        ankiConnectTestSuccess: 'Anki Connect Verbindung erfolgreich!',
        ankiConnectTestFailed: 'Anki Connect Verbindung fehlgeschlagen',
        settingsUpdated: 'Einstellungen aktualisiert',
        languageChanged: 'Sprache geändert'
    },
    reverseSync: {
        noChanges: 'Keine geänderten Karten gefunden',
        processing: 'Verarbeite {{count}} geänderte Karten...',
        completed: 'Rückwärtssynchronisation abgeschlossen: {{updated}} Dateien aktualisiert, {{total}} Karten verarbeitet',
        noUpdates: 'Alle Karten sind auf dem neuesten Stand, keine Updates erforderlich',
        failed: 'Rückwärtssynchronisation fehlgeschlagen',
        connectionFailed: 'Anki-Verbindung fehlgeschlagen',
        cardProcessingFailed: 'Verarbeitung der Karte {{noteId}} fehlgeschlagen',
        fileNotFound: 'Entsprechende Obsidian-Quelldatei oder Metadaten nicht gefunden',
        noUpdateNeeded: 'Inhalt unverändert oder Obsidian-Version ist neuer',
        invalidFileLocation: 'Ungültiges Dateistandort-Ergebnis',
        cannotLocateCardContent: 'Karteninhalt-Bereich kann nicht lokalisiert werden'
    },
    anki: {
        models: {
            frontBack: 'Vorderseite / Rückseite',
            backFront: 'Rückseite / Vorderseite',
            cloze: 'Lückentext',
            spaced: 'Abstand'
        },
        fields: {
            front: 'Vorderseite',
            back: 'Rückseite',
            prompt: 'Eingabeaufforderung',
            text: 'Text',
            extra: 'Extra',
            source: 'Quelle'
        }
    },
    conflict: {
        title: 'Konfliktlösung ({{current}}/{{total}})',
        noConflicts: 'Keine Konflikte gefunden',
        cardId: 'Karten-ID: {{id}}',
        frontContent: 'Vorderseite: {{content}}',
        previous: 'Vorherige',
        next: 'Nächste',
        obsidianVersion: 'Obsidian-Version',
        ankiVersion: 'Anki-Version',
        differences: 'Unterschiede',
        lastModified: 'Zuletzt geändert: {{time}}',
        notExists: 'Existiert nicht',
        fieldDifferences: 'Feldunterschiede',
        tagDifferences: 'Tag-Unterschiede',
        tagsAdded: 'Tags hinzugefügt',
        tagsRemoved: 'Tags entfernt',
        deckChanged: 'Deck geändert',
        deckChangeDetails: 'Von "{{from}}" zu "{{to}}"',
        recommendedDirection: 'Empfohlene Synchronisationsrichtung',
        directionObToAnki: 'Obsidian → Anki',
        directionAnkiToOb: 'Anki → Obsidian',
        directionUnknown: 'Unbekannt',
        frontField: 'Vorderseite',
        backField: 'Rückseite',
        tags: 'Tags',
        deck: 'Deck',
        chooseResolution: 'Lösung wählen',
        useObsidianVersion: 'Obsidian-Version verwenden',
        useAnkiVersion: 'Anki-Version verwenden',
        applyToAll: 'Auf alle anwenden',
        applyToAllDesc: 'Diese Auswahl auf alle verbleibenden Konflikte anwenden',
        cancel: 'Abbrechen',
        finish: 'Fertig',
        unknown: 'Unbekannt'
    },
    sync: {
        bidirectional: {
            starting: 'Bidirektionale Synchronisation wird gestartet...',
            collecting: 'Kartenmetadaten werden gesammelt...',
            detecting: 'Konflikte werden erkannt...',
            resolving: 'Konflikte werden gelöst...',
            syncing: 'Synchronisation wird ausgeführt...'
        }
    }
};

// 多语言管理器
/**
 * 多语言管理器类
 * 提供语言切换、翻译文本获取等功能
 */
var I18nManager = /** @class */ (function () {
    function I18nManager() {
        this.currentLanguage = DEFAULT_LANGUAGE;
        this.changeListeners = [];
        // 初始化翻译资源
        this.translations = {
            zh: zhTranslations,
            en: enTranslations,
            de: deTranslations
        };
        // 从本地存储加载语言设置
        this.loadLanguageFromStorage();
    }
    /**
     * 获取当前语言
     */
    I18nManager.prototype.getCurrentLanguage = function () {
        return this.currentLanguage;
    };
    /**
     * 设置当前语言
     * @param language 要设置的语言
     */
    I18nManager.prototype.setLanguage = function (language) {
        if (this.currentLanguage !== language) {
            this.currentLanguage = language;
            this.saveLanguageToStorage();
            this.notifyLanguageChange();
        }
    };
    /**
     * 获取翻译文本
     * @param key 翻译键路径，支持点号分隔的嵌套路径
     * @param fallback 当翻译不存在时的备用文本
     * @param params 可选的参数对象，用于替换模板中的占位符
     * @returns 翻译后的文本
     */
    I18nManager.prototype.t = function (key, fallback, params) {
        var e_1, _a;
        var keys = key.split('.');
        var value = this.translations[this.currentLanguage];
        var _loop_1 = function (k) {
            var e_2, _b;
            if (value && typeof value === 'object' && k in value) {
                value = value[k];
            }
            else {
                // 如果当前语言没有找到翻译，尝试使用英语作为备用
                if (this_1.currentLanguage !== 'en') {
                    var fallbackValue = this_1.translations.en;
                    try {
                        for (var keys_2 = (e_2 = void 0, __values(keys)), keys_2_1 = keys_2.next(); !keys_2_1.done; keys_2_1 = keys_2.next()) {
                            var fk = keys_2_1.value;
                            if (fallbackValue && typeof fallbackValue === 'object' && fk in fallbackValue) {
                                fallbackValue = fallbackValue[fk];
                            }
                            else {
                                fallbackValue = undefined;
                                break;
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (keys_2_1 && !keys_2_1.done && (_b = keys_2.return)) _b.call(keys_2);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    if (typeof fallbackValue === 'string') {
                        var result_1 = fallbackValue;
                        // 如果提供了参数，替换模板中的占位符
                        if (params) {
                            Object.keys(params).forEach(function (paramKey) {
                                var placeholder = "{{".concat(paramKey, "}}");
                                result_1 = result_1.replace(new RegExp(placeholder, 'g'), String(params[paramKey]));
                            });
                        }
                        return { value: result_1 };
                    }
                }
                return { value: fallback || key };
            }
        };
        var this_1 = this;
        try {
            // 遍历嵌套键路径
            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var k = keys_1_1.value;
                var state_1 = _loop_1(k);
                if (typeof state_1 === "object")
                    return state_1.value;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var result = typeof value === 'string' ? value : (fallback || key);
        // 如果提供了参数，替换模板中的占位符
        if (params && typeof result === 'string') {
            Object.keys(params).forEach(function (paramKey) {
                var placeholder = "{{".concat(paramKey, "}}");
                result = result.replace(new RegExp(placeholder, 'g'), String(params[paramKey]));
            });
        }
        return result;
    };
    /**
     * 添加语言变更监听器
     * @param listener 监听器函数
     */
    I18nManager.prototype.addLanguageChangeListener = function (listener) {
        this.changeListeners.push(listener);
    };
    /**
     * 移除语言变更监听器
     * @param listener 要移除的监听器函数
     */
    I18nManager.prototype.removeLanguageChangeListener = function (listener) {
        var index = this.changeListeners.indexOf(listener);
        if (index > -1) {
            this.changeListeners.splice(index, 1);
        }
    };
    /**
     * 从本地存储加载语言设置
     */
    I18nManager.prototype.loadLanguageFromStorage = function () {
        try {
            var savedLanguage = localStorage.getItem('ob8anki-language');
            if (savedLanguage && ['zh', 'en', 'de'].includes(savedLanguage)) {
                this.currentLanguage = savedLanguage;
            }
        }
        catch (error) {
            console.warn('Failed to load language from storage:', error);
        }
    };
    /**
     * 保存语言设置到本地存储
     */
    I18nManager.prototype.saveLanguageToStorage = function () {
        try {
            localStorage.setItem('ob8anki-language', this.currentLanguage);
        }
        catch (error) {
            console.warn('Failed to save language to storage:', error);
        }
    };
    /**
     * 通知语言变更
     */
    I18nManager.prototype.notifyLanguageChange = function () {
        var _this = this;
        this.changeListeners.forEach(function (listener) {
            try {
                listener(_this.currentLanguage);
            }
            catch (error) {
                console.error('Error in language change listener:', error);
            }
        });
    };
    return I18nManager;
}());
// 创建全局实例
var i18n = new I18nManager();
// 导出便捷的翻译函数
var t = function (key, fallback, params) { return i18n.t(key, fallback, params); };

/**
 * AnkiService 类：提供与 AnkiConnect 的完整接口契约
 *
 * P0阶段契约要求：
 * 1. 明确方法签名与返回值类型
 * 2. 统一错误处理机制
 * 3. 支持批量操作与事务性
 * 4. 提供完整的 JSDoc 文档
 */
var Anki = /** @class */ (function () {
    function Anki() {
    }
    /**
     * 创建 Anki 模型（卡片模板）
     * @param sourceSupport 是否支持源字段
     * @param codeHighlightSupport 是否支持代码高亮
     * @param codeHighlightTheme 代码高亮主题
     * @returns Promise<any> 批量创建结果
     */
    Anki.prototype.createModels = function (sourceSupport, codeHighlightSupport, codeHighlightTheme) {
        return __awaiter(this, void 0, void 0, function () {
            var models;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        models = this.getModels(sourceSupport, codeHighlightSupport);
                        return [4 /*yield*/, this.storeHighlightAssetsIfNeeded(!!codeHighlightSupport, codeHighlightTheme)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.invoke("multi", 6, { actions: models })];
                }
            });
        });
    };
    /**
     * 创建 Anki 牌组
     * @param deckName 牌组名称
     * @returns Promise<any> 创建结果
     */
    Anki.prototype.createDeck = function (deckName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.invoke("createDeck", 6, { deck: deckName })];
            });
        });
    };
    /**
     * 存储高亮资源文件（如果需要）
     * @param codeHighlightSupport 是否支持代码高亮
     * @param theme 高亮主题
     * @returns Promise<void>
     */
    Anki.prototype.storeHighlightAssetsIfNeeded = function (codeHighlightSupport, theme) {
        return __awaiter(this, void 0, void 0, function () {
            var existsInit, cssData, actions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!codeHighlightSupport)
                            return [2 /*return*/];
                        return [4 /*yield*/, this.invoke("retrieveMediaFile", 6, { filename: "_highlightInit.js" })
                                .then(function () { return true; })
                                .catch(function () { return false; })];
                    case 1:
                        existsInit = _a.sent();
                        cssData = theme === 'google-light' ? highlightCssLightBase64 : highlightCssDarkBase64;
                        actions = [];
                        if (!existsInit) {
                            actions.push({ action: "storeMediaFile", params: { filename: "_highlight.js", data: highlightjsBase64 } });
                            actions.push({ action: "storeMediaFile", params: { filename: "_highlightInit.js", data: highlightInitBase64 } });
                        }
                        // 覆盖（或首次写入）主题样式文件，以保证主题切换生效
                        actions.push({ action: "storeMediaFile", params: { filename: "_highlight.css", data: cssData } });
                        if (!actions.length) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.invoke("multi", 6, { actions: actions })];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 存储媒体文件到 Anki
     * @param cards 卡片数组
     * @param codeHighlightSupport 是否支持代码高亮
     * @param codeHighlightTheme 代码高亮主题
     * @returns Promise<any> 存储结果
     */
    Anki.prototype.storeMediaFiles = function (cards, codeHighlightSupport, codeHighlightTheme) {
        return __awaiter(this, void 0, void 0, function () {
            var actions, cards_1, cards_1_1, card, _a, _b, media;
            var e_1, _c, e_2, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0: return [4 /*yield*/, this.storeHighlightAssetsIfNeeded(!!codeHighlightSupport, codeHighlightTheme)];
                    case 1:
                        _e.sent();
                        actions = [];
                        try {
                            for (cards_1 = __values(cards), cards_1_1 = cards_1.next(); !cards_1_1.done; cards_1_1 = cards_1.next()) {
                                card = cards_1_1.value;
                                try {
                                    for (_a = (e_2 = void 0, __values(card.getMedias())), _b = _a.next(); !_b.done; _b = _a.next()) {
                                        media = _b.value;
                                        actions.push({
                                            action: "storeMediaFile",
                                            params: media,
                                        });
                                    }
                                }
                                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                                finally {
                                    try {
                                        if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                                    }
                                    finally { if (e_2) throw e_2.error; }
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (cards_1_1 && !cards_1_1.done && (_c = cards_1.return)) _c.call(cards_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        if (actions.length > 0) {
                            return [2 /*return*/, this.invoke("multi", 6, { actions: actions })];
                        }
                        else {
                            return [2 /*return*/, {}];
                        }
                }
            });
        });
    };
    /**
     * 添加卡片到 Anki
     * @param cards 卡片数组
     * @returns Promise<number[]> 新创建的卡片 ID 数组
     */
    Anki.prototype.addCards = function (cards) {
        return __awaiter(this, void 0, void 0, function () {
            var notes;
            return __generator(this, function (_a) {
                notes = [];
                cards.forEach(function (card) { return notes.push(card.getCard(false)); });
                return [2 /*return*/, this.invoke("addNotes", 6, {
                        notes: notes,
                    })];
            });
        });
    };
    /**
     * 更新 Anki 中的卡片
     *
     * 注意：如果 Anki 的浏览窗口打开，更新可能不会立即生效
     * 参考：https://github.com/FooSoft/anki-connect/issues/82
     *
     * @param cards 要更新的卡片数组
     * @param codeHighlightSupport 是否支持代码高亮
     * @param codeHighlightTheme 代码高亮主题
     * @returns Promise<any> 更新结果
     */
    Anki.prototype.updateCards = function (cards, codeHighlightSupport, codeHighlightTheme) {
        return __awaiter(this, void 0, void 0, function () {
            var updateActions, ids, cards_2, cards_2_1, card;
            var e_3, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        updateActions = [];
                        // 确保存储高亮资源（可选）
                        return [4 /*yield*/, this.storeHighlightAssetsIfNeeded(!!codeHighlightSupport, codeHighlightTheme)];
                    case 1:
                        // 确保存储高亮资源（可选）
                        _b.sent();
                        ids = [];
                        try {
                            for (cards_2 = __values(cards), cards_2_1 = cards_2.next(); !cards_2_1.done; cards_2_1 = cards_2.next()) {
                                card = cards_2_1.value;
                                updateActions.push({
                                    action: "updateNoteFields",
                                    params: {
                                        note: card.getCard(true),
                                    },
                                });
                                updateActions = updateActions.concat(this.mergeTags(card.oldTags, card.tags, card.id));
                                ids.push(card.id);
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (cards_2_1 && !cards_2_1.done && (_a = cards_2.return)) _a.call(cards_2);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                        // Update deck
                        updateActions.push({
                            action: "changeDeck",
                            params: {
                                cards: ids,
                                deck: cards[0].deckName,
                            },
                        });
                        return [2 /*return*/, this.invoke("multi", 6, { actions: updateActions })];
                }
            });
        });
    };
    /**
     * 更改卡片所属牌组
     * @param ids 卡片 ID 数组
     * @param deckName 目标牌组名称
     * @returns Promise<any> 更改结果
     */
    Anki.prototype.changeDeck = function (ids, deckName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.invoke("changeDeck", 6, { cards: ids, deck: deckName })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * 获取卡片信息（用于判定牌组与版本时间等）
     * @param ids 卡片 ID 数组
     * @returns Promise<AnkiCardInfo[]> 卡片信息数组
     */
    Anki.prototype.cardsInfo = function (ids) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.invoke("cardsInfo", 6, { cards: ids })];
                    case 1:
                        res = _a.sent();
                        if (Array.isArray(res)) {
                            return [2 /*return*/, res.map(function (it) { return ({
                                    noteId: it.noteId,
                                    deckName: it.deckName,
                                    lastModifiedTime: typeof it.mod === 'number' ? it.mod : undefined,
                                }); })];
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * 获取笔记信息（用于比较字段与标签；包含关联卡片列表）
     * @param ids 笔记 ID 数组
     * @returns Promise<AnkiNoteInfo[]> 笔记信息数组
     */
    Anki.prototype.getCards = function (ids) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.invoke("notesInfo", 6, { notes: ids })];
                    case 1:
                        res = _a.sent();
                        if (Array.isArray(res)) {
                            return [2 /*return*/, res.map(function (it) {
                                    var _a, _b, _c;
                                    return ({
                                        noteId: it.noteId,
                                        tags: (_a = it.tags) !== null && _a !== void 0 ? _a : [],
                                        fields: (_b = it.fields) !== null && _b !== void 0 ? _b : {},
                                        cards: (_c = it.cards) !== null && _c !== void 0 ? _c : [],
                                        deckName: it.deckName,
                                        lastModifiedTime: typeof it.mod === 'number' ? it.mod : undefined,
                                    });
                                })];
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * 删除 Anki 中的卡片
     * @param ids 要删除的卡片 ID 数组
     * @returns Promise<any> 删除结果
     */
    Anki.prototype.deleteCards = function (ids) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.invoke("deleteNotes", 6, { notes: ids })];
            });
        });
    };
    /**
     * 检查 AnkiConnect 连接状态
     * @returns Promise<boolean> 连接是否正常
     */
    Anki.prototype.ping = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.invoke("version", 6)];
                    case 1: return [2 /*return*/, (_a.sent()) === 6];
                }
            });
        });
    };
    /**
     * 请求 AnkiConnect 权限
     * @returns Promise<any> 权限请求结果
     */
    Anki.prototype.requestPermission = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.invoke("requestPermission", 6)];
            });
        });
    };
    /**
     * 获取自指定时间以来发生变更的卡片列表（用于反向同步）
     * @param since 时间戳（毫秒），获取此时间之后修改的卡片
     * @param deckName 可选：限制在特定牌组中查找
     * @returns Promise<ChangedCardInfo[]> 变更的卡片信息数组
     */
    Anki.prototype.listChangedCards = function (since, deckName) {
        return __awaiter(this, void 0, void 0, function () {
            var daysSinceEpoch, query, noteIds, notesInfo, changedCards, error_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        daysSinceEpoch = Math.floor(since / (1000 * 60 * 60 * 24));
                        query = "edited:".concat(daysSinceEpoch);
                        if (deckName) {
                            query = "deck:\"".concat(deckName, "\" ").concat(query);
                        }
                        return [4 /*yield*/, this.invoke("findNotes", 6, { query: query })];
                    case 1:
                        noteIds = _a.sent();
                        if (!noteIds || noteIds.length === 0) {
                            return [2 /*return*/, []];
                        }
                        return [4 /*yield*/, this.invoke("notesInfo", 6, { notes: noteIds })];
                    case 2:
                        notesInfo = _a.sent();
                        if (!Array.isArray(notesInfo)) {
                            return [2 /*return*/, []];
                        }
                        changedCards = notesInfo
                            .filter(function (note) {
                            // 确保笔记有修改时间且在指定时间之后
                            var noteModTime = note.mod ? note.mod * 1000 : 0; // Anki 返回秒，转换为毫秒
                            return noteModTime >= since;
                        })
                            .map(function (note) {
                            var e_4, _a;
                            // 处理字段内容，清理 HTML 标签和格式化
                            var processedFields = {};
                            if (note.fields && typeof note.fields === 'object') {
                                try {
                                    for (var _b = __values(Object.entries(note.fields)), _c = _b.next(); !_c.done; _c = _b.next()) {
                                        var _d = __read(_c.value, 2), fieldName = _d[0], fieldValue = _d[1];
                                        if (typeof fieldValue === 'object' && fieldValue !== null && 'value' in fieldValue) {
                                            // 处理 AnkiConnect 返回的字段对象格式
                                            processedFields[fieldName] = { value: _this.cleanFieldContent(fieldValue.value || '') };
                                        }
                                        else if (typeof fieldValue === 'string') {
                                            // 处理直接字符串格式
                                            processedFields[fieldName] = { value: _this.cleanFieldContent(fieldValue) };
                                        }
                                        else {
                                            processedFields[fieldName] = { value: '' };
                                        }
                                    }
                                }
                                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                                finally {
                                    try {
                                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                                    }
                                    finally { if (e_4) throw e_4.error; }
                                }
                            }
                            return {
                                noteId: note.noteId,
                                deckName: note.deckName || '',
                                tags: Array.isArray(note.tags) ? note.tags : [],
                                fields: processedFields,
                                cards: Array.isArray(note.cards) ? note.cards : [],
                                lastModifiedTime: note.mod ? note.mod * 1000 : Date.now(),
                                modelName: note.modelName || ''
                            };
                        });
                        return [2 /*return*/, changedCards];
                    case 3:
                        error_1 = _a.sent();
                        console.error('Error fetching changed cards:', error_1);
                        throw new Error("Failed to fetch changed cards: ".concat(error_1));
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 清理字段内容，移除 HTML 标签并格式化
     * @param content 原始字段内容
     * @returns 清理后的内容
     */
    Anki.prototype.cleanFieldContent = function (content) {
        if (!content || typeof content !== 'string') {
            return '';
        }
        // 移除 HTML 标签
        var cleaned = content.replace(/<[^>]*>/g, '');
        // 解码 HTML 实体
        cleaned = cleaned
            .replace(/&lt;/g, '<')
            .replace(/&gt;/g, '>')
            .replace(/&amp;/g, '&')
            .replace(/&quot;/g, '"')
            .replace(/&#39;/g, "'")
            .replace(/&nbsp;/g, ' ');
        // 清理多余的空白字符
        cleaned = cleaned
            .replace(/\s+/g, ' ')
            .trim();
        return cleaned;
    };
    /**
     * 合并标签（处理标签的增加和删除）
     * @param oldTags 旧标签数组
     * @param newTags 新标签数组
     * @param cardId 卡片 ID
     * @returns 标签操作动作数组
     */
    Anki.prototype.mergeTags = function (oldTags, newTags, cardId) {
        var e_5, _a, e_6, _b;
        var actions = [];
        try {
            // Find tags to Add
            for (var newTags_1 = __values(newTags), newTags_1_1 = newTags_1.next(); !newTags_1_1.done; newTags_1_1 = newTags_1.next()) {
                var tag = newTags_1_1.value;
                var index = oldTags.indexOf(tag);
                if (index > -1) {
                    oldTags.splice(index, 1);
                }
                else {
                    actions.push({
                        action: "addTags",
                        params: {
                            notes: [cardId],
                            tags: tag,
                        },
                    });
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (newTags_1_1 && !newTags_1_1.done && (_a = newTags_1.return)) _a.call(newTags_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
        try {
            // All Tags to delete
            for (var oldTags_1 = __values(oldTags), oldTags_1_1 = oldTags_1.next(); !oldTags_1_1.done; oldTags_1_1 = oldTags_1.next()) {
                var tag = oldTags_1_1.value;
                actions.push({
                    action: "removeTags",
                    params: {
                        notes: [cardId],
                        tags: tag,
                    },
                });
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (oldTags_1_1 && !oldTags_1_1.done && (_b = oldTags_1.return)) _b.call(oldTags_1);
            }
            finally { if (e_6) throw e_6.error; }
        }
        return actions;
    };
    /**
     * 调用 AnkiConnect API
     * @param action API 动作名称
     * @param version API 版本（默认 6）
     * @param params API 参数
     * @returns Promise<any> API 响应结果
     * @throws 当 AnkiConnect 返回错误或网络异常时抛出异常
     */
    Anki.prototype.invoke = function (action, version, params) {
        if (version === void 0) { version = 6; }
        if (params === void 0) { params = {}; }
        return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.addEventListener("error", function () { return reject(t("processing.errors.failedToIssueRequest")); });
            xhr.addEventListener("load", function () {
                try {
                    var response = JSON.parse(xhr.responseText);
                    if (Object.getOwnPropertyNames(response).length != 2) {
                        throw t("processing.errors.unexpectedNumberOfFields");
                    }
                    if (!Object.prototype.hasOwnProperty.call(response, "error")) {
                        throw t("processing.errors.missingErrorField");
                    }
                    if (!Object.prototype.hasOwnProperty.call(response, "result")) {
                        throw t("processing.errors.missingResultField");
                    }
                    if (response.error) {
                        throw response.error;
                    }
                    resolve(response.result);
                }
                catch (e) {
                    reject(e);
                }
            });
            xhr.open("POST", "http://127.0.0.1:8765");
            xhr.send(JSON.stringify({ action: action, version: version, params: params }));
        });
    };
    /**
     * 获取 Anki 模型定义
     * @param sourceSupport 是否支持源字段
     * @param codeHighlightSupport 是否支持代码高亮
     * @returns 模型定义数组
     */
    Anki.prototype.getModels = function (sourceSupport, codeHighlightSupport) {
        var sourceFieldContent = "";
        var sourceExtension = "";
        if (sourceSupport) {
            sourceFieldContent = "\r\n" + sourceField;
            sourceExtension = sourceDeckExtension;
        }
        var css = '.card {\r\n font-family: arial;\r\n font-size: 20px;\r\n text-align: center;\r\n color: black;\r\n background-color: white;\r\n}\r\n\r\n.tag::before {\r\n\tcontent: "#";\r\n}\r\n\r\n.tag {\r\n  color: white;\r\n  background-color: #9F2BFF;\r\n  border: none;\r\n  font-size: 11px;\r\n  font-weight: bold;\r\n  padding: 1px 8px;\r\n  margin: 0px 3px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  border-radius: 14px;\r\n  display: inline;\r\n  vertical-align: middle;\r\n}\r\n .cloze { font-weight: bold; color: blue;}.nightMode .cloze { color: lightblue;}';
        var hl = codeHighlightSupport ? codeScript : "";
        var front = "{{Front}}\r\n<p class=\"tags\">{{Tags}}</p>\r\n\r\n<script>\r\n    var tagEl = document.querySelector('.tags');\r\n    var tags = tagEl.innerHTML.split(' ');\r\n    var html = '';\r\n    tags.forEach(function(tag) {\r\n\tif (tag) {\r\n\t    var newTag = '<span class=\"tag\">' + tag + '</span>';\r\n           html += newTag;\r\n    \t    tagEl.innerHTML = html;\r\n\t}\r\n    });\r\n    \r\n</script>".concat(hl);
        var back = "{{FrontSide}}\n\n<hr id=answer>\n\n{{Back}}".concat(sourceFieldContent).concat(hl);
        var frontReversed = "{{Back}}\r\n<p class=\"tags\">{{Tags}}</p>\r\n\r\n<script>\r\n    var tagEl = document.querySelector('.tags');\r\n    var tags = tagEl.innerHTML.split(' ');\r\n    var html = '';\r\n    tags.forEach(function(tag) {\r\n\tif (tag) {\r\n\t    var newTag = '<span class=\"tag\">' + tag + '</span>';\r\n           html += newTag;\r\n    \t    tagEl.innerHTML = html;\r\n\t}\r\n    });\r\n    \r\n</script>".concat(hl);
        var backReversed = "{{FrontSide}}\n\n<hr id=answer>\n\n{{Front}}".concat(sourceFieldContent).concat(hl);
        var prompt = "{{Prompt}}\r\n<p class=\"tags\">\uD83E\uDDE0spaced {{Tags}}</p>\r\n\r\n<script>\r\n    var tagEl = document.querySelector('.tags');\r\n    var tags = tagEl.innerHTML.split(' ');\r\n    var html = '';\r\n    tags.forEach(function(tag) {\r\n\tif (tag) {\r\n\t    var newTag = '<span class=\"tag\">' + tag + '</span>';\r\n           html += newTag;\r\n    \t    tagEl.innerHTML = html;\r\n\t}\r\n    });\r\n    \r\n</script>".concat(hl);
        var promptBack = "{{FrontSide}}\n\n<hr id=answer>\uD83E\uDDE0 Review done.".concat(sourceFieldContent).concat(hl);
        var clozeFront = "{{cloze:Text}}\n\n<script>\r\n    var tagEl = document.querySelector('.tags');\r\n    var tags = tagEl.innerHTML.split(' ');\r\n    var html = '';\r\n    tags.forEach(function(tag) {\r\n\tif (tag) {\r\n\t    var newTag = '<span class=\"tag\">' + tag + '</span>';\r\n           html += newTag;\r\n    \t    tagEl.innerHTML = html;\r\n\t}\r\n    });\r\n    \r\n</script>".concat(hl);
        var clozeBack = "{{cloze:Text}}\n\n<br>{{Extra}}".concat(sourceFieldContent, "<script>\r\n    var tagEl = document.querySelector('.tags');\r\n    var tags = tagEl.innerHTML.split(' ');\r\n    var html = '';\r\n    tags.forEach(function(tag) {\r\n\tif (tag) {\r\n\t    var newTag = '<span class=\"tag\">' + tag + '</span>';\r\n           html += newTag;\r\n    \t    tagEl.innerHTML = html;\r\n\t}\r\n    });\r\n    \r\n</script>").concat(hl);
        var classicFields = ["Front", "Back"];
        var promptFields = ["Prompt"];
        var clozeFields = ["Text", "Extra"];
        if (sourceSupport) {
            classicFields = classicFields.concat("Source");
            promptFields = promptFields.concat("Source");
            clozeFields = clozeFields.concat("Source");
        }
        var obsidianBasic = {
            action: "createModel",
            params: {
                modelName: "Obsidian-basic".concat(sourceExtension),
                inOrderFields: classicFields,
                css: css,
                cardTemplates: [
                    {
                        Name: "Front / Back",
                        Front: front,
                        Back: back,
                    },
                ],
            },
        };
        var obsidianBasicReversed = {
            action: "createModel",
            params: {
                modelName: "Obsidian-basic-reversed".concat(sourceExtension),
                inOrderFields: classicFields,
                css: css,
                cardTemplates: [
                    {
                        Name: "Front / Back",
                        Front: front,
                        Back: back,
                    },
                    {
                        Name: "Back / Front",
                        Front: frontReversed,
                        Back: backReversed,
                    },
                ],
            },
        };
        var obsidianCloze = {
            action: "createModel",
            params: {
                modelName: "Obsidian-cloze".concat(sourceExtension),
                inOrderFields: clozeFields,
                css: css,
                isCloze: true,
                cardTemplates: [
                    {
                        Name: "Cloze",
                        Front: clozeFront,
                        Back: clozeBack,
                    },
                ],
            },
        };
        var obsidianSpaced = {
            action: "createModel",
            params: {
                modelName: "Obsidian-spaced".concat(sourceExtension),
                inOrderFields: promptFields,
                css: css,
                cardTemplates: [
                    {
                        Name: "Spaced",
                        Front: prompt,
                        Back: promptBack,
                    },
                ],
            },
        };
        return [obsidianBasic, obsidianBasicReversed, obsidianCloze, obsidianSpaced];
    };
    return Anki;
}());

function arrayBufferToBase64(buffer) {
    var binary = "";
    var bytes = new Uint8Array(buffer);
    var len = bytes.byteLength;
    for (var i = 0; i < len; i++) {
        binary += String.fromCharCode(bytes[i]);
    }
    return window.btoa(binary);
}
function arraysEqual(a, b) {
    if (a === b)
        return true;
    if (a == null || b == null)
        return false;
    if (a.length !== b.length)
        return false;
    a.sort();
    b.sort();
    for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i])
            return false;
    }
    return true;
}
function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}

var SettingsTab = /** @class */ (function (_super) {
    __extends(SettingsTab, _super);
    function SettingsTab() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SettingsTab.prototype.display = function () {
        var _this = this;
        var containerEl = this.containerEl;
        var plugin = this.plugin;
        containerEl.empty();
        containerEl.createEl("h1", { text: t('settings.title') });
        // 添加语言设置选项
        new obsidian.Setting(containerEl)
            .setName(t('settings.language.name'))
            .setDesc(t('settings.language.desc'))
            .addDropdown(function (dropdown) {
            AVAILABLE_LANGUAGES.forEach(function (lang) {
                // 根据语言代码获取对应的翻译文本
                var displayName;
                switch (lang.code) {
                    case 'zh':
                        displayName = t('settings.language.chinese');
                        break;
                    case 'en':
                        displayName = t('settings.language.english');
                        break;
                    case 'de':
                        displayName = t('settings.language.german');
                        break;
                    default:
                        displayName = lang.name;
                }
                dropdown.addOption(lang.code, displayName);
            });
            dropdown
                .setValue(plugin.settings.language)
                .onChange(function (value) {
                plugin.settings.language = value;
                plugin.saveData(plugin.settings);
                i18n.setLanguage(value);
                // 重新渲染设置界面以应用新语言
                _this.display();
            });
        });
        var description = createFragment();
        description.append(t('settings.ankiConnect.description'), createEl('br'), t('settings.ankiConnect.requirement'));
        new obsidian.Setting(containerEl)
            .setName(t('settings.ankiConnect.givePermission'))
            .setDesc(description)
            .addButton(function (button) {
            button.setButtonText(t('settings.ankiConnect.grantPermission')).onClick(function () {
                new Anki().requestPermission().then(function (result) {
                    if (result.permission === "granted") {
                        plugin.settings.ankiConnectPermission = true;
                        plugin.saveData(plugin.settings);
                        new obsidian.Notice(t('settings.ankiConnect.permissionGranted'));
                    }
                    else {
                        new obsidian.Notice(t('settings.ankiConnect.permissionNotGranted'));
                    }
                }).catch(function (error) {
                    new obsidian.Notice(t('settings.ankiConnect.connectionError'));
                    console.error(error);
                });
            });
        });
        new obsidian.Setting(containerEl)
            .setName(t('settings.ankiConnect.testAnki'))
            .setDesc(t('settings.ankiConnect.testDesc'))
            .addButton(function (text) {
            text.setButtonText(t('settings.ankiConnect.test')).onClick(function () {
                new Anki()
                    .ping()
                    .then(function () { return new obsidian.Notice(t('settings.ankiConnect.testSuccess')); })
                    .catch(function () { return new obsidian.Notice(t('settings.ankiConnect.testFailed')); });
            });
        });
        containerEl.createEl("h2", { text: t('settings.general.title') });
        new obsidian.Setting(containerEl)
            .setName(t('settings.general.contextAware.name'))
            .setDesc(t('settings.general.contextAware.desc'))
            .addToggle(function (toggle) {
            return toggle.setValue(plugin.settings.contextAwareMode).onChange(function (value) {
                plugin.settings.contextAwareMode = value;
                plugin.saveData(plugin.settings);
            });
        });
        new obsidian.Setting(containerEl)
            .setName(t('settings.general.sourceSupport.name'))
            .setDesc(t('settings.general.sourceSupport.desc'))
            .addToggle(function (toggle) {
            return toggle.setValue(plugin.settings.sourceSupport).onChange(function (value) {
                plugin.settings.sourceSupport = value;
                plugin.saveData(plugin.settings);
            });
        });
        // 代码高亮支持开关（i18n）
        new obsidian.Setting(containerEl)
            .setName(t('settings.general.codeHighlight.name'))
            .setDesc(t('settings.general.codeHighlight.desc'))
            .addToggle(function (toggle) {
            return toggle.setValue(!!plugin.settings.codeHighlightSupport).onChange(function (value) {
                plugin.settings.codeHighlightSupport = value;
                plugin.saveData(plugin.settings);
            });
        });
        // 高亮主题选择（i18n，可扩展）
        new obsidian.Setting(containerEl)
            .setName(t('settings.general.codeHighlight.theme.name'))
            .setDesc(t('settings.general.codeHighlight.theme.desc'))
            .addDropdown(function (dropdown) {
            // 主题列表（可扩展）：仅需在 i18n 与构建脚本中补充新主题与样式
            var themeOptions = [
                { id: 'google-dark', labelKey: 'settings.general.codeHighlight.themes.googleDark' },
                { id: 'google-light', labelKey: 'settings.general.codeHighlight.themes.googleLight' },
            ];
            themeOptions.forEach(function (opt) { return dropdown.addOption(opt.id, t(opt.labelKey)); });
            var current = plugin.settings.codeHighlightTheme || 'google-dark';
            dropdown.setValue(current).onChange(function (value) {
                plugin.settings.codeHighlightTheme = value;
                plugin.saveData(plugin.settings);
            });
        });
        new obsidian.Setting(containerEl)
            .setName(t('settings.general.inlineID.name'))
            .setDesc(t('settings.general.inlineID.desc'))
            .addToggle(function (toggle) {
            return toggle.setValue(plugin.settings.inlineID).onChange(function (value) {
                plugin.settings.inlineID = value;
                plugin.saveData(plugin.settings);
            });
        });
        new obsidian.Setting(containerEl)
            .setName(t('settings.general.folderBasedDeck.name'))
            .setDesc(t('settings.general.folderBasedDeck.desc'))
            .addToggle(function (toggle) {
            return toggle.setValue(plugin.settings.folderBasedDeck).onChange(function (value) {
                plugin.settings.folderBasedDeck = value;
                plugin.saveData(plugin.settings);
            });
        });
        new obsidian.Setting(containerEl)
            .setName(t('settings.general.defaultDeck.name'))
            .setDesc(t('settings.general.defaultDeck.desc'))
            .addText(function (text) {
            text
                .setValue(plugin.settings.deck)
                .setPlaceholder(t('settings.general.defaultDeck.placeholder'))
                .onChange(function (value) {
                if (value.length) {
                    plugin.settings.deck = value;
                    plugin.saveData(plugin.settings);
                }
                else {
                    new obsidian.Notice(t('settings.general.defaultDeck.error'));
                }
            });
        });
        new obsidian.Setting(containerEl)
            .setName(t('settings.general.defaultAnkiTag.name'))
            .setDesc(t('settings.general.defaultAnkiTag.desc'))
            .addText(function (text) {
            text
                .setValue(plugin.settings.defaultAnkiTag)
                .setPlaceholder(t('settings.general.defaultAnkiTag.placeholder'))
                .onChange(function (value) {
                if (!value)
                    new obsidian.Notice(t('settings.general.defaultAnkiTag.noTagNotice'));
                plugin.settings.defaultAnkiTag = value.toLowerCase();
                plugin.saveData(plugin.settings);
            });
        });
        containerEl.createEl("h2", { text: t('settings.cardIdentification.title') });
        // 升级旧卡片ID格式功能区域
        containerEl.createEl("h3", { text: "升级旧卡片ID格式" });
        // 添加说明文本
        var upgradeDesc = containerEl.createEl("div", { cls: "setting-item-description" });
        upgradeDesc.innerHTML = "\n      <p><strong>\u91CD\u8981\u8BF4\u660E\uFF1A</strong></p>\n      <ul>\n        <li>\u6B64\u529F\u80FD\u7528\u4E8E\u5C06\u65E7\u683C\u5F0F\u7684\u5361\u7247ID\uFF08^13\u4F4D\u6570\u5B57\uFF09\u5347\u7EA7\u4E3A\u65B0\u683C\u5F0F\uFF08^anki-13\u4F4D\u6570\u5B57\uFF09</li>\n        <li>\u5347\u7EA7\u540E\uFF0C\u63D2\u4EF6\u5C06\u4E0D\u518D\u517C\u5BB9\u65E7\u683C\u5F0F\uFF0C\u8BF7\u786E\u4FDD\u5728\u5347\u7EA7\u524D\u5907\u4EFD\u91CD\u8981\u6587\u4EF6</li>\n        <li>\u5982\u679C\u5728\u4F7F\u7528\u8FC7\u7A0B\u4E2D\u9047\u5230\"\u68C0\u6D4B\u5230\u65E7\u683C\u5F0F\u7684\u5361\u7247ID\"\u9519\u8BEF\uFF0C\u8BF7\u4F7F\u7528\u6B64\u529F\u80FD\u8FDB\u884C\u5347\u7EA7</li>\n        <li>\u5347\u7EA7\u8FC7\u7A0B\u4F1A\u626B\u63CF\u6240\u6709\u5305\u542BAnki\u5361\u7247\u7684Markdown\u6587\u4EF6</li>\n      </ul>\n    ";
        new obsidian.Setting(containerEl)
            .setName('开始升级')
            .setDesc('点击此按钮开始升级旧格式的卡片ID')
            .addButton(function (button) {
            button.setButtonText('开始升级').onClick(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    // 暂时只显示提示，实际升级功能后续实现
                    new obsidian.Notice('升级功能正在开发中，敬请期待！\n\n如果遇到旧格式ID错误，请暂时手动将文件中的 ^13位数字 改为 ^anki-13位数字 格式。', 8000);
                    return [2 /*return*/];
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName(t('settings.cardIdentification.flashcardsTag.name'))
            .setDesc(t('settings.cardIdentification.flashcardsTag.desc'))
            .addText(function (text) {
            text
                .setValue(plugin.settings.flashcardsTag)
                .setPlaceholder(t('settings.cardIdentification.flashcardsTag.placeholder'))
                .onChange(function (value) {
                if (value) {
                    plugin.settings.flashcardsTag = value.toLowerCase();
                    plugin.saveData(plugin.settings);
                }
                else {
                    new obsidian.Notice(t('settings.cardIdentification.flashcardsTag.error'));
                }
            });
        });
        new obsidian.Setting(containerEl)
            .setName(t('settings.cardIdentification.inlineSeparator.name'))
            .setDesc(t('settings.cardIdentification.inlineSeparator.desc'))
            .addText(function (text) {
            text
                .setValue(plugin.settings.inlineSeparator)
                .setPlaceholder("::")
                .onChange(function (value) {
                // if the value is empty or is the same like the inlineseparatorreverse then set it to the default, otherwise save it
                if (value.trim().length === 0 || value === plugin.settings.inlineSeparatorReverse) {
                    plugin.settings.inlineSeparator = "::";
                    if (value.trim().length === 0) {
                        new obsidian.Notice(t('settings.cardIdentification.inlineSeparator.lengthError'));
                    }
                    else if (value === plugin.settings.inlineSeparatorReverse) {
                        new obsidian.Notice(t('settings.cardIdentification.inlineSeparator.duplicateError'));
                    }
                }
                else {
                    plugin.settings.inlineSeparator = escapeRegExp(value.trim());
                    new obsidian.Notice(t('settings.cardIdentification.inlineSeparator.changed'));
                }
                plugin.saveData(plugin.settings);
            });
        });
        new obsidian.Setting(containerEl)
            .setName(t('settings.cardIdentification.inlineReverseSeparator.name'))
            .setDesc(t('settings.cardIdentification.inlineReverseSeparator.desc'))
            .addText(function (text) {
            text
                .setValue(plugin.settings.inlineSeparatorReverse)
                .setPlaceholder(":::")
                .onChange(function (value) {
                // if the value is empty or is the same like the inlineseparatorreverse then set it to the default, otherwise save it
                if (value.trim().length === 0 || value === plugin.settings.inlineSeparator) {
                    plugin.settings.inlineSeparatorReverse = ":::";
                    if (value.trim().length === 0) {
                        new obsidian.Notice(t('settings.cardIdentification.inlineReverseSeparator.lengthError'));
                    }
                    else if (value === plugin.settings.inlineSeparator) {
                        new obsidian.Notice(t('settings.cardIdentification.inlineReverseSeparator.duplicateError'));
                    }
                }
                else {
                    plugin.settings.inlineSeparatorReverse = escapeRegExp(value.trim());
                    new obsidian.Notice(t('settings.cardIdentification.inlineReverseSeparator.changed'));
                }
                plugin.saveData(plugin.settings);
            });
        });
        containerEl.createEl("h2", { text: t('settings.ribbonIcon.title') });
        new obsidian.Setting(containerEl)
            .setName(t('settings.ribbonIcon.action.name'))
            .setDesc(t('settings.ribbonIcon.action.desc'))
            .addDropdown(function (dropdown) {
            dropdown
                .addOption("single", t('settings.ribbonIcon.action.single'))
                .addOption("folder", t('settings.ribbonIcon.action.folder'))
                .addOption("all", t('settings.ribbonIcon.action.all'))
                .setValue(plugin.settings.ribbonAction || "single")
                .onChange(function (value) {
                plugin.settings.ribbonAction = value;
                plugin.saveData(plugin.settings);
            });
        });
        containerEl.createEl("h2", { text: t('settings.notifications.title') });
        new obsidian.Setting(containerEl)
            .setName(t('settings.notifications.showNoChanges.name'))
            .setDesc(t('settings.notifications.showNoChanges.desc'))
            .addToggle(function (toggle) {
            return toggle.setValue(plugin.settings.showNoChangesNotice).onChange(function (value) {
                plugin.settings.showNoChangesNotice = value;
                plugin.saveData(plugin.settings);
            });
        });
    };
    return SettingsTab;
}(obsidian.PluginSettingTab));

var Card = /** @class */ (function () {
    function Card(id, deckName, initialContent, fields, reversed, initialOffset, endOffset, tags, inserted, mediaNames) {
        this.id = id;
        this.deckName = deckName;
        this.initialContent = initialContent;
        this.fields = fields;
        this.reversed = reversed;
        this.initialOffset = initialOffset;
        this.endOffset = endOffset;
        this.tags = tags;
        this.inserted = inserted;
        this.mediaNames = mediaNames;
        this.mediaBase64Encoded = [];
        this.oldTags = [];
        this.modelName = "";
    }
    Card.prototype.match = function (card) {
        // TODO not supported currently
        // if (this.modelName !== card.modelName) {
        //     return false
        // }
        var e_1, _a;
        var fields = Object.entries(card.fields);
        // This is the case of a switch from a model to another one. It cannot be handeled
        if (fields.length !== Object.entries(this.fields).length) {
            return true;
        }
        try {
            for (var fields_1 = __values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                var field = fields_1_1.value;
                var fieldName = field[0];
                if (field[1].value !== this.fields[fieldName]) {
                    return false;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return)) _a.call(fields_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return arraysEqual(card.tags, this.tags);
    };
    Card.prototype.getCodeDeckNameExtension = function () {
        return "";
    };
    return Card;
}());

var Flashcard = /** @class */ (function (_super) {
    __extends(Flashcard, _super);
    function Flashcard(id, deckName, initialContent, fields, reversed, initialOffset, endOffset, tags, inserted, mediaNames) {
        if (id === void 0) { id = -1; }
        if (tags === void 0) { tags = []; }
        if (inserted === void 0) { inserted = false; }
        var _this = _super.call(this, id, deckName, initialContent, fields, reversed, initialOffset, endOffset, tags, inserted, mediaNames) || this;
        _this.toString = function () {
            return "Q: ".concat(_this.fields[0], "\nA: ").concat(_this.fields[1]);
        };
        _this.modelName = _this.reversed
            ? "Obsidian-basic-reversed"
            : "Obsidian-basic";
        if (fields["Source"]) {
            _this.modelName += sourceDeckExtension;
        }
        return _this;
    }
    Flashcard.prototype.getCard = function (update) {
        if (update === void 0) { update = false; }
        var card = {
            deckName: this.deckName,
            modelName: this.modelName,
            fields: this.fields,
            tags: this.tags,
        };
        if (update) {
            card["id"] = this.id;
        }
        return card;
    };
    Flashcard.prototype.getMedias = function () {
        var _this = this;
        var medias = [];
        this.mediaBase64Encoded.forEach(function (data, index) {
            medias.push({
                filename: _this.mediaNames[index],
                data: data,
            });
        });
        return medias;
    };
    Flashcard.prototype.getIdFormat = function () {
        return "^" + this.id.toString() + "\n";
    };
    return Flashcard;
}(Card));

var Inlinecard = /** @class */ (function (_super) {
    __extends(Inlinecard, _super);
    function Inlinecard(id, deckName, initialContent, fields, reversed, initialOffset, endOffset, tags, inserted, mediaNames) {
        if (id === void 0) { id = -1; }
        if (tags === void 0) { tags = []; }
        if (inserted === void 0) { inserted = false; }
        var _this = _super.call(this, id, deckName, initialContent, fields, reversed, initialOffset, endOffset, tags, inserted, mediaNames) || this;
        _this.toString = function () {
            return "Q: ".concat(_this.fields[0], " \nA: ").concat(_this.fields[1], " ");
        };
        _this.modelName = _this.reversed
            ? "Obsidian-basic-reversed"
            : "Obsidian-basic";
        if (fields["Source"]) {
            _this.modelName += sourceDeckExtension;
        }
        return _this;
    }
    Inlinecard.prototype.getCard = function (update) {
        if (update === void 0) { update = false; }
        var card = {
            deckName: this.deckName,
            modelName: this.modelName,
            fields: this.fields,
            tags: this.tags,
        };
        if (update) {
            card["id"] = this.id;
        }
        return card;
    };
    Inlinecard.prototype.getMedias = function () {
        var _this = this;
        var medias = [];
        this.mediaBase64Encoded.forEach(function (data, index) {
            medias.push({
                filename: _this.mediaNames[index],
                data: data,
            });
        });
        return medias;
    };
    Inlinecard.prototype.getIdFormat = function () {
        return "^" + this.id.toString();
    };
    return Inlinecard;
}(Card));

var Spacedcard = /** @class */ (function (_super) {
    __extends(Spacedcard, _super);
    function Spacedcard(id, deckName, initialContent, fields, reversed, initialOffset, endOffset, tags, inserted, mediaNames) {
        if (id === void 0) { id = -1; }
        if (tags === void 0) { tags = []; }
        if (inserted === void 0) { inserted = false; }
        var _this = _super.call(this, id, deckName, initialContent, fields, reversed, initialOffset, endOffset, tags, inserted, mediaNames) || this;
        _this.toString = function () {
            return "Prompt: ".concat(_this.fields[0]);
        };
        _this.modelName = "Obsidian-spaced";
        if (fields["Source"]) {
            _this.modelName += sourceDeckExtension;
        }
        return _this;
    }
    Spacedcard.prototype.getCard = function (update) {
        if (update === void 0) { update = false; }
        var card = {
            deckName: this.deckName,
            modelName: this.modelName,
            fields: this.fields,
            tags: this.tags,
        };
        if (update) {
            card["id"] = this.id;
        }
        return card;
    };
    Spacedcard.prototype.getMedias = function () {
        var _this = this;
        var medias = [];
        this.mediaBase64Encoded.forEach(function (data, index) {
            medias.push({
                filename: _this.mediaNames[index],
                data: data,
            });
        });
        return medias;
    };
    Spacedcard.prototype.getIdFormat = function () {
        return "^" + this.id.toString() + "\n";
    };
    return Spacedcard;
}(Card));

var Clozecard = /** @class */ (function (_super) {
    __extends(Clozecard, _super);
    function Clozecard(id, deckName, initialContent, fields, reversed, initialOffset, endOffset, tags, inserted, mediaNames) {
        if (id === void 0) { id = -1; }
        if (tags === void 0) { tags = []; }
        if (inserted === void 0) { inserted = false; }
        var _this = _super.call(this, id, deckName, initialContent, fields, reversed, initialOffset, endOffset, tags, inserted, mediaNames) || this;
        _this.toString = function () {
            return "Cloze: ".concat(_this.fields[0]);
        };
        _this.modelName = "Obsidian-cloze";
        if (fields["Source"]) {
            _this.modelName += sourceDeckExtension;
        }
        return _this;
    }
    Clozecard.prototype.getCard = function (update) {
        if (update === void 0) { update = false; }
        var card = {
            deckName: this.deckName,
            modelName: this.modelName,
            fields: this.fields,
            tags: this.tags,
        };
        if (update) {
            card["id"] = this.id;
        }
        return card;
    };
    Clozecard.prototype.getMedias = function () {
        var _this = this;
        var medias = [];
        this.mediaBase64Encoded.forEach(function (data, index) {
            medias.push({
                filename: _this.mediaNames[index],
                data: data,
            });
        });
        return medias;
    };
    Clozecard.prototype.getIdFormat = function () {
        return "\n^" + this.id.toString();
    };
    return Clozecard;
}(Card));

/**
 * JSON 元数据结构定义
 * 用于在 Markdown 文件中存储卡片的同步状态和元数据信息
 *
 * 存储格式：^{"id":123,"frontContent":"正面内容",...}
 * 位置：紧邻卡片内容的下一行
 */
/**
 * 元数据常量定义
 */
var METADATA_CONSTANTS = {
    /** JSON元数据行前缀 */
    JSON_PREFIX: '^',
    /** 默认模板名称 */
    DEFAULT_MODEL_NAME: 'Basic',
    /** 默认牌组名称 */
    DEFAULT_DECK_NAME: 'Default',
    /** 哈希算法种子值 */
    HASH_SEED: BigInt(0),
    /** 时间戳精度（毫秒） */
    TIMESTAMP_PRECISION: 1000,
};
/**
 * 元数据字段验证规则
 */
var METADATA_VALIDATION_RULES = {
    /** 必需字段列表 */
    REQUIRED_FIELDS: [
        'id',
        'frontContent',
        'contentHash',
        'obModifiedTime',
        'ankiModifiedTime',
        'lastSyncTime',
        'syncDirection',
        'syncStatus',
        'deckName',
        'tags',
        'modelName',
        'createdTime'
    ],
    /** 字段类型映射 */
    FIELD_TYPES: {
        id: 'number',
        frontContent: 'string',
        backContent: 'string',
        contentHash: 'string',
        obModifiedTime: 'number',
        ankiModifiedTime: 'number',
        lastSyncTime: 'number',
        syncDirection: 'string',
        syncStatus: 'string',
        deckName: 'string',
        tags: 'object',
        modelName: 'string',
        createdTime: 'number'
    },
    /** 有效的同步状态值 */
    VALID_SYNC_STATUSES: [
        'pending-create',
        'created',
        'pending-update',
        'updated',
        'pending-delete-ob',
        'pending-delete-anki',
        'pending-delete-both',
        'deleted',
        'synced'
    ],
    /** 有效的同步方向值 */
    VALID_SYNC_DIRECTIONS: [
        'ob-to-anki',
        'anki-to-ob',
        'bidirectional'
    ],
    /** 内容长度限制 */
    CONTENT_LIMITS: {
        frontContent: 65535,
        backContent: 65535,
        deckName: 255,
        modelName: 255,
        tagName: 100,
        maxTags: 50 // 最多50个标签
    }
};

var xxhash = require('xxhash-wasm');
var XXHashUtils = /** @class */ (function () {
    function XXHashUtils() {
        this.xxHashAPI = null;
        this.isInitialized = false;
    }
    /**
     * 获取单例实例
     */
    XXHashUtils.getInstance = function () {
        if (!XXHashUtils.instance) {
            XXHashUtils.instance = new XXHashUtils();
        }
        return XXHashUtils.instance;
    };
    /**
     * 初始化 xxHash WASM 模块
     */
    XXHashUtils.prototype.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, error_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.isInitialized) {
                            return [2 /*return*/];
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        // 初始化 xxHash WASM 模块
                        _a = this;
                        return [4 /*yield*/, xxhash()];
                    case 2:
                        // 初始化 xxHash WASM 模块
                        _a.xxHashAPI = _b.sent();
                        this.isInitialized = true;
                        console.log('xxHash WASM 模块初始化成功');
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _b.sent();
                        console.error('xxHash WASM 模块初始化失败:', error_1);
                        throw new Error("xxHash \u521D\u59CB\u5316\u5931\u8D25: ".concat(error_1));
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 检查是否已初始化
     */
    XXHashUtils.prototype.ensureInitialized = function () {
        if (!this.isInitialized || !this.xxHashAPI) {
            throw new Error('xxHash 未初始化，请先调用 initialize() 方法');
        }
    };
    /**
     * 检查 xxHash 是否已初始化
     */
    XXHashUtils.prototype.isReady = function () {
        return this.isInitialized && this.xxHashAPI !== null;
    };
    /**
     * 计算字符串的 32 位 xxHash
     */
    XXHashUtils.prototype.hash32 = function (input, seed) {
        if (seed === void 0) { seed = 0; }
        this.ensureInitialized();
        return this.xxHashAPI.h32(input, seed);
    };
    /**
     * 计算字符串的 64 位 xxHash
     */
    XXHashUtils.prototype.hash64 = function (input, seed) {
        if (seed === void 0) { seed = BigInt(0); }
        this.ensureInitialized();
        return this.xxHashAPI.h64(input, seed);
    };
    /**
     * 计算 Uint8Array 的 32 位 xxHash
     */
    XXHashUtils.prototype.hash32Raw = function (input, seed) {
        if (seed === void 0) { seed = 0; }
        this.ensureInitialized();
        return this.xxHashAPI.h32Raw(input, seed);
    };
    /**
     * 计算 Uint8Array 的 64 位 xxHash
     */
    XXHashUtils.prototype.hash64Raw = function (input, seed) {
        if (seed === void 0) { seed = BigInt(0); }
        this.ensureInitialized();
        return this.xxHashAPI.h64Raw(input, seed);
    };
    /**
     * 计算字符串的 32 位 xxHash 并返回十六进制字符串
     */
    XXHashUtils.prototype.hash32Hex = function (input, seed) {
        if (seed === void 0) { seed = 0; }
        this.ensureInitialized();
        return this.xxHashAPI.h32ToString(input, seed);
    };
    /**
     * 计算字符串的 64 位 xxHash 并返回十六进制字符串
     */
    XXHashUtils.prototype.hash64Hex = function (input, seed) {
        if (seed === void 0) { seed = BigInt(0); }
        this.ensureInitialized();
        return this.xxHashAPI.h64ToString(input, seed);
    };
    /**
     * 批量计算多个字符串的哈希值
     * @param inputs 输入字符串数组
     * @param use64bit 是否使用64位哈希，默认为true（使用64位）
     * @param seed 种子值
     * @returns 哈希值数组
     */
    XXHashUtils.prototype.batchHash = function (inputs, use64bit, seed) {
        var _this = this;
        if (use64bit === void 0) { use64bit = true; }
        if (!this.isReady()) {
            throw new Error('xxHash 未初始化，请先调用 initialize() 方法');
        }
        return inputs.map(function (input) {
            if (use64bit) {
                return _this.hash64(input, seed || BigInt(0));
            }
            else {
                return _this.hash32(input, seed || 0);
            }
        });
    };
    /**
     * 计算卡片内容的哈希值（专为Ob8Anki优化）
     * @param frontContent 卡片正面内容
     * @param backContent 卡片背面内容（可选）
     * @param tags 标签列表（可选）
     * @param deckName 牌组名称（可选）
     * @param seed 种子值，默认为0n
     * @returns 64位哈希值的十六进制字符串
     */
    XXHashUtils.prototype.hashCardContent = function (frontContent, backContent, tags, deckName, seed) {
        if (seed === void 0) { seed = BigInt(0); }
        // 构建用于哈希计算的内容字符串
        var content = [
            frontContent,
            backContent || '',
            (tags === null || tags === void 0 ? void 0 : tags.join(',')) || '',
            deckName || ''
        ].join('|');
        return this.hash64Hex(content, seed);
    };
    /**
     * 计算文件内容的哈希值（适用于 Obsidian 文件处理）
     * @param content 文件内容
     * @param use64bit 是否使用64位哈希，默认为true
     * @param seed 种子值
     * @returns 哈希值的十六进制字符串
     */
    XXHashUtils.prototype.hashFileContent = function (content, use64bit, seed) {
        if (use64bit === void 0) { use64bit = true; }
        if (use64bit) {
            return this.hash64Hex(content, seed || BigInt(0));
        }
        else {
            return this.hash32Hex(content, seed || 0);
        }
    };
    /**
     * 快速比较两个内容是否相同（通过哈希值比较）
     * @param content1 内容1
     * @param content2 内容2
     * @param seed 种子值，默认为0n
     * @returns 是否相同
     */
    XXHashUtils.prototype.compareContent = function (content1, content2, seed) {
        if (seed === void 0) { seed = BigInt(0); }
        var hash1 = this.hash64Hex(content1, seed);
        var hash2 = this.hash64Hex(content2, seed);
        return hash1 === hash2;
    };
    /**
     * 性能测试方法：比较不同哈希算法的性能
     * @param testData 测试数据
     * @param iterations 迭代次数，默认1000次
     * @returns 性能测试结果
     */
    XXHashUtils.prototype.performanceTest = function (testData, iterations) {
        if (iterations === void 0) { iterations = 1000; }
        if (!this.isReady()) {
            throw new Error('xxHash 未初始化，请先调用 initialize() 方法');
        }
        // 测试 xxHash32
        var start32 = performance.now();
        var hash32Result = '';
        for (var i = 0; i < iterations; i++) {
            hash32Result = this.hash32Hex(testData);
        }
        var end32 = performance.now();
        // 测试 xxHash64
        var start64 = performance.now();
        var hash64Result = '';
        for (var i = 0; i < iterations; i++) {
            hash64Result = this.hash64Hex(testData);
        }
        var end64 = performance.now();
        return {
            xxHash32Time: end32 - start32,
            xxHash64Time: end64 - start64,
            xxHash32Result: hash32Result,
            xxHash64Result: hash64Result
        };
    };
    /**
     * 验证哈希值格式是否正确
     * @param hash 哈希值字符串
     * @param is64bit 是否为64位哈希，默认为true
     * @returns 是否为有效的哈希值格式
     */
    XXHashUtils.prototype.isValidHash = function (hash, is64bit) {
        if (is64bit === void 0) { is64bit = true; }
        if (typeof hash !== 'string') {
            return false;
        }
        // 64位哈希应该是16个十六进制字符，32位哈希应该是8个十六进制字符
        var expectedLength = is64bit ? 16 : 8;
        var hexPattern = /^[0-9a-fA-F]+$/;
        return hash.length === expectedLength && hexPattern.test(hash);
    };
    /**
     * 重置工具类实例（主要用于测试）
     */
    XXHashUtils.reset = function () {
        if (XXHashUtils.instance) {
            XXHashUtils.instance.isInitialized = false;
            XXHashUtils.instance.xxHashAPI = null;
            XXHashUtils.instance = null;
        }
    };
    XXHashUtils.instance = null;
    return XXHashUtils;
}());
/**
 * 便捷的全局函数，用于快速获取已初始化的 xxHash 实例
 */
var getXXHashUtils = function () {
    return XXHashUtils.getInstance();
};
/**
 * 便捷函数：初始化并返回 XXHashUtils 实例
 */
function initializeXXHash() {
    return __awaiter(this, void 0, void 0, function () {
        var utils;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    utils = XXHashUtils.getInstance();
                    return [4 /*yield*/, utils.initialize()];
                case 1:
                    _a.sent();
                    return [2 /*return*/, utils];
            }
        });
    });
}

/**
 * 元数据工具类
 * 提供JSON元数据的读写、解析、验证等功能
 */
var MetadataUtils = /** @class */ (function () {
    function MetadataUtils(app) {
        this.xxHashUtils = null;
        this.app = app;
    }
    /**
     * 初始化xxHash工具
     */
    MetadataUtils.prototype.ensureXXHashInitialized = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!!this.xxHashUtils) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, initializeXXHash()];
                    case 1:
                        _a.xxHashUtils = _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 解析JSON元数据行
     * @param line 包含JSON元数据的行
     * @returns 解析结果
     */
    MetadataUtils.prototype.parseJsonMetadata = function (line) {
        var result = {
            metadata: null,
            rawJson: line,
            success: false
        };
        // 检查是否为JSON元数据行
        if (!line.startsWith(METADATA_CONSTANTS.JSON_PREFIX + '{')) {
            result.error = '不是有效的JSON元数据行格式';
            return result;
        }
        try {
            // 移除前缀并解析JSON
            var jsonStr = line.substring(METADATA_CONSTANTS.JSON_PREFIX.length);
            var metadata = JSON.parse(jsonStr);
            // 验证元数据
            var validation = this.validateMetadata(metadata);
            if (validation.isValid) {
                result.metadata = metadata;
                result.success = true;
            }
            else {
                result.error = "\u5143\u6570\u636E\u9A8C\u8BC1\u5931\u8D25: ".concat(validation.errors.join(', '));
            }
        }
        catch (error) {
            result.error = "JSON\u89E3\u6790\u5931\u8D25: ".concat(error.message);
        }
        return result;
    };
    /**
     * 验证元数据完整性
     * @param metadata 待验证的元数据对象
     * @returns 验证结果
     */
    MetadataUtils.prototype.validateMetadata = function (metadata) {
        var e_1, _a, e_2, _b, e_3, _c;
        var result = {
            isValid: true,
            errors: [],
            warnings: []
        };
        if (!metadata || typeof metadata !== 'object') {
            result.isValid = false;
            result.errors.push('元数据必须是一个对象');
            return result;
        }
        try {
            // 检查必需字段
            for (var _d = __values(METADATA_VALIDATION_RULES.REQUIRED_FIELDS), _e = _d.next(); !_e.done; _e = _d.next()) {
                var field = _e.value;
                if (!(field in metadata)) {
                    result.isValid = false;
                    result.errors.push("\u7F3A\u5C11\u5FC5\u9700\u5B57\u6BB5: ".concat(field));
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            // 检查字段类型
            for (var _f = __values(Object.entries(METADATA_VALIDATION_RULES.FIELD_TYPES)), _g = _f.next(); !_g.done; _g = _f.next()) {
                var _h = __read(_g.value, 2), field = _h[0], expectedType = _h[1];
                if (field in metadata) {
                    var actualType = Array.isArray(metadata[field]) ? 'object' : typeof metadata[field];
                    if (actualType !== expectedType) {
                        result.isValid = false;
                        result.errors.push("\u5B57\u6BB5 ".concat(field, " \u7C7B\u578B\u9519\u8BEF\uFF0C\u671F\u671B ").concat(expectedType, "\uFF0C\u5B9E\u9645 ").concat(actualType));
                    }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
            }
            finally { if (e_2) throw e_2.error; }
        }
        // 检查同步状态值
        if (metadata.syncStatus && !METADATA_VALIDATION_RULES.VALID_SYNC_STATUSES.includes(metadata.syncStatus)) {
            result.isValid = false;
            result.errors.push("\u65E0\u6548\u7684\u540C\u6B65\u72B6\u6001: ".concat(metadata.syncStatus));
        }
        // 检查同步方向值
        if (metadata.syncDirection && !METADATA_VALIDATION_RULES.VALID_SYNC_DIRECTIONS.includes(metadata.syncDirection)) {
            result.isValid = false;
            result.errors.push("\u65E0\u6548\u7684\u540C\u6B65\u65B9\u5411: ".concat(metadata.syncDirection));
        }
        // 检查内容长度限制
        if (metadata.frontContent && metadata.frontContent.length > METADATA_VALIDATION_RULES.CONTENT_LIMITS.frontContent) {
            result.warnings.push("\u6B63\u9762\u5185\u5BB9\u8FC7\u957F (".concat(metadata.frontContent.length, "/").concat(METADATA_VALIDATION_RULES.CONTENT_LIMITS.frontContent, ")"));
        }
        if (metadata.backContent && metadata.backContent.length > METADATA_VALIDATION_RULES.CONTENT_LIMITS.backContent) {
            result.warnings.push("\u80CC\u9762\u5185\u5BB9\u8FC7\u957F (".concat(metadata.backContent.length, "/").concat(METADATA_VALIDATION_RULES.CONTENT_LIMITS.backContent, ")"));
        }
        // 检查标签数量和长度
        if (metadata.tags && Array.isArray(metadata.tags)) {
            if (metadata.tags.length > METADATA_VALIDATION_RULES.CONTENT_LIMITS.maxTags) {
                result.warnings.push("\u6807\u7B7E\u6570\u91CF\u8FC7\u591A (".concat(metadata.tags.length, "/").concat(METADATA_VALIDATION_RULES.CONTENT_LIMITS.maxTags, ")"));
            }
            try {
                for (var _j = __values(metadata.tags), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var tag = _k.value;
                    if (typeof tag === 'string' && tag.length > METADATA_VALIDATION_RULES.CONTENT_LIMITS.tagName) {
                        result.warnings.push("\u6807\u7B7E\u8FC7\u957F: ".concat(tag.substring(0, 20), "..."));
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        return result;
    };
    /**
     * 序列化元数据为JSON字符串
     * @param metadata 元数据对象
     * @returns JSON元数据行
     */
    MetadataUtils.prototype.serializeMetadata = function (metadata) {
        // 验证元数据
        var validation = this.validateMetadata(metadata);
        if (!validation.isValid) {
            throw new Error("\u5143\u6570\u636E\u9A8C\u8BC1\u5931\u8D25: ".concat(validation.errors.join(', ')));
        }
        // 序列化为紧凑的JSON格式
        var jsonStr = JSON.stringify(metadata);
        return METADATA_CONSTANTS.JSON_PREFIX + jsonStr;
    };
    /**
     * 计算卡片内容哈希值
     * @param frontContent 正面内容
     * @param backContent 背面内容（可选）
     * @param tags 标签列表（可选）
     * @param deckName 牌组名称（可选）
     * @returns 哈希值的十六进制字符串
     */
    MetadataUtils.prototype.calculateContentHash = function (frontContent, backContent, tags, deckName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ensureXXHashInitialized()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.xxHashUtils.hashCardContent(frontContent, backContent, tags, deckName, METADATA_CONSTANTS.HASH_SEED)];
                }
            });
        });
    };
    /**
     * 创建新的卡片元数据
     * @param id Anki卡片ID
     * @param frontContent 正面内容
     * @param backContent 背面内容（可选）
     * @param deckName 牌组名称
     * @param tags 标签列表
     * @param modelName 模板名称
     * @returns 新的元数据对象
     */
    MetadataUtils.prototype.createCardMetadata = function (id, frontContent, backContent, deckName, tags, modelName) {
        if (tags === void 0) { tags = []; }
        if (modelName === void 0) { modelName = METADATA_CONSTANTS.DEFAULT_MODEL_NAME; }
        return __awaiter(this, void 0, void 0, function () {
            var now, contentHash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        now = Date.now();
                        return [4 /*yield*/, this.calculateContentHash(frontContent, backContent, tags, deckName)];
                    case 1:
                        contentHash = _a.sent();
                        return [2 /*return*/, {
                                id: id,
                                frontContent: frontContent,
                                backContent: backContent,
                                contentHash: contentHash,
                                obModifiedTime: now,
                                ankiModifiedTime: now,
                                lastSyncTime: now,
                                syncDirection: 'ob-to-anki',
                                syncStatus: 'created',
                                deckName: deckName,
                                tags: tags,
                                modelName: modelName,
                                createdTime: now
                            }];
                }
            });
        });
    };
    /**
     * 更新元数据的内容哈希
     * @param metadata 元数据对象
     * @returns 更新后的元数据
     */
    MetadataUtils.prototype.updateContentHash = function (metadata) {
        return __awaiter(this, void 0, void 0, function () {
            var newHash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.calculateContentHash(metadata.frontContent, metadata.backContent, metadata.tags, metadata.deckName)];
                    case 1:
                        newHash = _a.sent();
                        return [2 /*return*/, __assign(__assign({}, metadata), { contentHash: newHash, obModifiedTime: Date.now() })];
                }
            });
        });
    };
    /**
     * 从文件内容中提取所有JSON元数据
     * @param content 文件内容
     * @returns 元数据解析结果数组
     */
    MetadataUtils.prototype.extractMetadataFromContent = function (content) {
        var lines = content.split('\n');
        var results = [];
        for (var i = 0; i < lines.length; i++) {
            var line = lines[i].trim();
            if (line.startsWith(METADATA_CONSTANTS.JSON_PREFIX + '{')) {
                var result = this.parseJsonMetadata(line);
                results.push(result);
            }
        }
        return results;
    };
    /**
     * 从文件中读取所有元数据
     * @param file 文件对象
     * @returns 元数据解析结果数组
     */
    MetadataUtils.prototype.readMetadataFromFile = function (file) {
        return __awaiter(this, void 0, void 0, function () {
            var content, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.app.vault.read(file)];
                    case 1:
                        content = _a.sent();
                        return [2 /*return*/, this.extractMetadataFromContent(content)];
                    case 2:
                        error_1 = _a.sent();
                        console.error("\u8BFB\u53D6\u6587\u4EF6\u5143\u6570\u636E\u5931\u8D25 [".concat(file.path, "]:"), error_1);
                        return [2 /*return*/, []];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 在文件内容中插入或更新元数据
     * @param content 原始文件内容
     * @param metadata 要插入的元数据
     * @param cardStartLine 卡片开始行号（0基）
     * @param cardEndLine 卡片结束行号（0基）
     * @returns 更新后的文件内容
     */
    MetadataUtils.prototype.insertOrUpdateMetadata = function (content, metadata, cardStartLine, cardEndLine) {
        var lines = content.split('\n');
        var metadataLine = this.serializeMetadata(metadata);
        // 检查卡片结束行的下一行是否已经是元数据行
        var nextLineIndex = cardEndLine + 1;
        if (nextLineIndex < lines.length &&
            lines[nextLineIndex].trim().startsWith(METADATA_CONSTANTS.JSON_PREFIX + '{')) {
            // 更新现有元数据
            lines[nextLineIndex] = metadataLine;
        }
        else {
            // 插入新元数据
            lines.splice(nextLineIndex, 0, metadataLine);
        }
        return lines.join('\n');
    };
    /**
     * 从文件内容中移除指定的元数据行
     * @param content 原始文件内容
     * @param metadataId 要移除的元数据ID
     * @returns 更新后的文件内容
     */
    MetadataUtils.prototype.removeMetadataFromContent = function (content, metadataId) {
        var e_4, _a;
        var _b;
        var lines = content.split('\n');
        var filteredLines = [];
        try {
            for (var lines_1 = __values(lines), lines_1_1 = lines_1.next(); !lines_1_1.done; lines_1_1 = lines_1.next()) {
                var line = lines_1_1.value;
                if (line.trim().startsWith(METADATA_CONSTANTS.JSON_PREFIX + '{')) {
                    var result = this.parseJsonMetadata(line.trim());
                    if (result.success && ((_b = result.metadata) === null || _b === void 0 ? void 0 : _b.id) === metadataId) {
                        // 跳过这行（删除元数据）
                        continue;
                    }
                }
                filteredLines.push(line);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (lines_1_1 && !lines_1_1.done && (_a = lines_1.return)) _a.call(lines_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return filteredLines.join('\n');
    };
    /**
     * 写入元数据到文件
     * @param file 文件对象
     * @param metadata 要写入的元数据
     * @param cardStartLine 卡片开始行号
     * @param cardEndLine 卡片结束行号
     */
    MetadataUtils.prototype.writeMetadataToFile = function (file, metadata, cardStartLine, cardEndLine) {
        return __awaiter(this, void 0, void 0, function () {
            var content, updatedContent, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.app.vault.read(file)];
                    case 1:
                        content = _a.sent();
                        updatedContent = this.insertOrUpdateMetadata(content, metadata, cardStartLine, cardEndLine);
                        return [4 /*yield*/, this.app.vault.modify(file, updatedContent)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_2 = _a.sent();
                        console.error("\u5199\u5165\u5143\u6570\u636E\u5230\u6587\u4EF6\u5931\u8D25 [".concat(file.path, "]:"), error_2);
                        throw error_2;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 从文件中删除元数据
     * @param file 文件对象
     * @param metadataId 要删除的元数据ID
     */
    MetadataUtils.prototype.removeMetadataFromFile = function (file, metadataId) {
        return __awaiter(this, void 0, void 0, function () {
            var content, updatedContent, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.app.vault.read(file)];
                    case 1:
                        content = _a.sent();
                        updatedContent = this.removeMetadataFromContent(content, metadataId);
                        return [4 /*yield*/, this.app.vault.modify(file, updatedContent)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_3 = _a.sent();
                        console.error("\u4ECE\u6587\u4EF6\u5220\u9664\u5143\u6570\u636E\u5931\u8D25 [".concat(file.path, "]:"), error_3);
                        throw error_3;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 批量处理文件中的元数据
     * @param file 文件对象
     * @param operations 操作列表
     * @returns 批量操作结果
     */
    MetadataUtils.prototype.batchProcessMetadata = function (file, operations) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var result, content, operations_1, operations_1_1, operation, error_4;
            var e_5, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        result = {
                            successCount: 0,
                            failureCount: 0,
                            skippedCount: 0,
                            details: []
                        };
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, this.app.vault.read(file)];
                    case 2:
                        content = _e.sent();
                        try {
                            for (operations_1 = __values(operations), operations_1_1 = operations_1.next(); !operations_1_1.done; operations_1_1 = operations_1.next()) {
                                operation = operations_1_1.value;
                                try {
                                    switch (operation.type) {
                                        case 'insert':
                                        case 'update':
                                            if (operation.metadata &&
                                                operation.cardStartLine !== undefined &&
                                                operation.cardEndLine !== undefined) {
                                                content = this.insertOrUpdateMetadata(content, operation.metadata, operation.cardStartLine, operation.cardEndLine);
                                                result.successCount++;
                                                result.details.push({
                                                    cardId: operation.metadata.id,
                                                    frontContent: operation.metadata.frontContent,
                                                    success: true
                                                });
                                            }
                                            else {
                                                result.skippedCount++;
                                                result.details.push({
                                                    frontContent: ((_a = operation.metadata) === null || _a === void 0 ? void 0 : _a.frontContent) || 'Unknown',
                                                    success: false,
                                                    error: '缺少必需的操作参数'
                                                });
                                            }
                                            break;
                                        case 'delete':
                                            if (operation.metadataId !== undefined) {
                                                content = this.removeMetadataFromContent(content, operation.metadataId);
                                                result.successCount++;
                                                result.details.push({
                                                    cardId: operation.metadataId,
                                                    frontContent: 'Deleted',
                                                    success: true
                                                });
                                            }
                                            else {
                                                result.skippedCount++;
                                                result.details.push({
                                                    frontContent: 'Unknown',
                                                    success: false,
                                                    error: '缺少元数据ID'
                                                });
                                            }
                                            break;
                                    }
                                }
                                catch (error) {
                                    result.failureCount++;
                                    result.details.push({
                                        cardId: ((_b = operation.metadata) === null || _b === void 0 ? void 0 : _b.id) || operation.metadataId,
                                        frontContent: ((_c = operation.metadata) === null || _c === void 0 ? void 0 : _c.frontContent) || 'Unknown',
                                        success: false,
                                        error: error.message
                                    });
                                }
                            }
                        }
                        catch (e_5_1) { e_5 = { error: e_5_1 }; }
                        finally {
                            try {
                                if (operations_1_1 && !operations_1_1.done && (_d = operations_1.return)) _d.call(operations_1);
                            }
                            finally { if (e_5) throw e_5.error; }
                        }
                        // 写入更新后的内容
                        return [4 /*yield*/, this.app.vault.modify(file, content)];
                    case 3:
                        // 写入更新后的内容
                        _e.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        error_4 = _e.sent();
                        console.error("\u6279\u91CF\u5904\u7406\u5143\u6570\u636E\u5931\u8D25 [".concat(file.path, "]:"), error_4);
                        throw error_4;
                    case 5: return [2 /*return*/, result];
                }
            });
        });
    };
    /**
     * 生成文件元数据
     * @param file 文件对象
     * @returns 文件元数据
     */
    MetadataUtils.prototype.generateFileMetadata = function (file) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var content, metadataResults, validMetadata, fileContentHash;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.ensureXXHashInitialized()];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, this.app.vault.read(file)];
                    case 2:
                        content = _b.sent();
                        metadataResults = this.extractMetadataFromContent(content);
                        validMetadata = metadataResults.filter(function (r) { return r.success; });
                        fileContentHash = this.xxHashUtils.hash64Hex(content, METADATA_CONSTANTS.HASH_SEED);
                        return [2 /*return*/, {
                                filePath: file.path,
                                fileModifiedTime: ((_a = file.stat) === null || _a === void 0 ? void 0 : _a.mtime) || Date.now(),
                                fileContentHash: fileContentHash,
                                cardCount: validMetadata.length,
                                lastScanTime: Date.now(),
                                globalTags: this.extractGlobalTags(content)
                            }];
                }
            });
        });
    };
    /**
     * 从文件内容中提取全局标签
     * @param content 文件内容
     * @returns 全局标签数组
     */
    MetadataUtils.prototype.extractGlobalTags = function (content) {
        var tags = [];
        var tagRegex = /#([a-zA-Z0-9_\-\/]+)/g;
        var match;
        while ((match = tagRegex.exec(content)) !== null) {
            var tag = match[1];
            if (!tags.includes(tag)) {
                tags.push(tag);
            }
        }
        return tags;
    };
    /**
     * 检查元数据是否需要更新
     * @param metadata 当前元数据
     * @param frontContent 新的正面内容
     * @param backContent 新的背面内容
     * @param tags 新的标签列表
     * @param deckName 新的牌组名称
     * @returns 是否需要更新
     */
    MetadataUtils.prototype.needsUpdate = function (metadata, frontContent, backContent, tags, deckName) {
        return __awaiter(this, void 0, void 0, function () {
            var newHash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.calculateContentHash(frontContent, backContent, tags, deckName)];
                    case 1:
                        newHash = _a.sent();
                        return [2 /*return*/, metadata.contentHash !== newHash];
                }
            });
        });
    };
    /**
     * 标记元数据为待删除状态
     * @param metadata 元数据对象
     * @param deleteType 删除类型
     * @returns 更新后的元数据
     */
    MetadataUtils.prototype.markForDeletion = function (metadata, deleteType) {
        var statusMap = {
            'ob': 'pending-delete-ob',
            'anki': 'pending-delete-anki',
            'both': 'pending-delete-both'
        };
        return __assign(__assign({}, metadata), { syncStatus: statusMap[deleteType], obModifiedTime: Date.now() });
    };
    return MetadataUtils;
}());
/**
 * 便捷函数：创建元数据工具实例
 * @param app Obsidian App实例
 * @returns 元数据工具实例
 */
function createMetadataUtils(app) {
    return new MetadataUtils(app);
}

/**
 * 新版本的Parser类，支持JSON元数据和两遍扫描策略
 */
var ParserV2 = /** @class */ (function () {
    function ParserV2(app, regex, settings) {
        this.regex = regex;
        this.settings = settings;
        this.metadataUtils = new MetadataUtils(app);
    }
    /**
     * 解析文件内容，识别所有卡片块
     * @param fileContent 文件内容
     * @param filePath 文件路径
     * @returns 文件解析结果
     */
    ParserV2.prototype.parseFile = function (fileContent, filePath) {
        return __awaiter(this, void 0, void 0, function () {
            var lines, cardTag, cardBlocks, _a, cardsToDelete, cardsToCreate, cardsToUpdate, globalTags;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        lines = fileContent.split('\n');
                        cardTag = this.settings.flashcardsTag || '#Ob8Anki';
                        return [4 /*yield*/, this.identifyCardBlocks(lines, cardTag, fileContent)];
                    case 1:
                        cardBlocks = _b.sent();
                        _a = this.categorizeCards(cardBlocks), cardsToDelete = _a.cardsToDelete, cardsToCreate = _a.cardsToCreate, cardsToUpdate = _a.cardsToUpdate;
                        globalTags = this.extractGlobalTags(fileContent);
                        return [2 /*return*/, {
                                cardBlocks: cardBlocks,
                                cardsToDelete: cardsToDelete,
                                cardsToCreate: cardsToCreate,
                                cardsToUpdate: cardsToUpdate,
                                globalTags: globalTags,
                                fileModifiedTime: Date.now()
                            }];
                }
            });
        });
    };
    /**
     * 识别文件中的所有卡片块
     * @param lines 文件行数组
     * @param cardTag 卡片标记
     * @param fileContent 完整文件内容
     * @returns 卡片块数组
     */
    ParserV2.prototype.identifyCardBlocks = function (lines, cardTag, fileContent) {
        return __awaiter(this, void 0, void 0, function () {
            var cardBlocks, currentCardBlock, charOffset, i, line, lineWithNewline, completedBlock, metadataResult, completedBlock, nextLineIndex, completedBlock, completedBlock;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cardBlocks = [];
                        currentCardBlock = null;
                        charOffset = 0;
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < lines.length)) return [3 /*break*/, 14];
                        line = lines[i];
                        lineWithNewline = line + (i < lines.length - 1 ? '\n' : '');
                        if (!(line.trim() === cardTag)) return [3 /*break*/, 4];
                        if (!currentCardBlock) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.completeCardBlock(currentCardBlock, lines, i - 1, fileContent)];
                    case 2:
                        completedBlock = _a.sent();
                        if (completedBlock) {
                            cardBlocks.push(completedBlock);
                        }
                        _a.label = 3;
                    case 3:
                        // 开始新卡片
                        currentCardBlock = {
                            startLine: i,
                            contentLines: [],
                            initialOffset: charOffset
                        };
                        return [3 /*break*/, 12];
                    case 4:
                        if (!line.trim().startsWith(METADATA_CONSTANTS.JSON_PREFIX + '{')) return [3 /*break*/, 7];
                        if (!currentCardBlock) return [3 /*break*/, 6];
                        metadataResult = this.metadataUtils.parseJsonMetadata(line.trim());
                        currentCardBlock.metadataParseResult = metadataResult;
                        currentCardBlock.metadata = metadataResult.success ? metadataResult.metadata : null;
                        currentCardBlock.endLine = i;
                        currentCardBlock.endOffset = charOffset + lineWithNewline.length;
                        return [4 /*yield*/, this.completeCardBlock(currentCardBlock, lines, i, fileContent)];
                    case 5:
                        completedBlock = _a.sent();
                        if (completedBlock) {
                            cardBlocks.push(completedBlock);
                        }
                        currentCardBlock = null;
                        _a.label = 6;
                    case 6: return [3 /*break*/, 12];
                    case 7:
                        if (!(line.trim() === '' && currentCardBlock && currentCardBlock.contentLines && currentCardBlock.contentLines.length > 0)) return [3 /*break*/, 11];
                        nextLineIndex = i + 1;
                        if (!(nextLineIndex < lines.length &&
                            lines[nextLineIndex].trim().startsWith(METADATA_CONSTANTS.JSON_PREFIX + '{'))) return [3 /*break*/, 8];
                        return [3 /*break*/, 10];
                    case 8:
                        // 没有JSON元数据，卡片结束
                        currentCardBlock.endLine = i - 1;
                        currentCardBlock.endOffset = charOffset;
                        return [4 /*yield*/, this.completeCardBlock(currentCardBlock, lines, i - 1, fileContent)];
                    case 9:
                        completedBlock = _a.sent();
                        if (completedBlock) {
                            cardBlocks.push(completedBlock);
                        }
                        currentCardBlock = null;
                        _a.label = 10;
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        if (currentCardBlock) {
                            if (!currentCardBlock.contentLines) {
                                currentCardBlock.contentLines = [];
                            }
                            currentCardBlock.contentLines.push(line);
                        }
                        _a.label = 12;
                    case 12:
                        charOffset += lineWithNewline.length;
                        _a.label = 13;
                    case 13:
                        i++;
                        return [3 /*break*/, 1];
                    case 14:
                        if (!currentCardBlock) return [3 /*break*/, 16];
                        currentCardBlock.endLine = lines.length - 1;
                        currentCardBlock.endOffset = charOffset;
                        return [4 /*yield*/, this.completeCardBlock(currentCardBlock, lines, lines.length - 1, fileContent)];
                    case 15:
                        completedBlock = _a.sent();
                        if (completedBlock) {
                            cardBlocks.push(completedBlock);
                        }
                        _a.label = 16;
                    case 16: return [2 /*return*/, cardBlocks];
                }
            });
        });
    };
    /**
     * 完成卡片块的构建
     * @param partialBlock 部分卡片块
     * @param lines 文件行数组
     * @param endLineIndex 结束行索引
     * @param fileContent 完整文件内容
     * @returns 完整的卡片块
     */
    ParserV2.prototype.completeCardBlock = function (partialBlock, lines, endLineIndex, fileContent) {
        return __awaiter(this, void 0, void 0, function () {
            var cardType, startLine, endLine, rawContentLines, rawContent;
            return __generator(this, function (_a) {
                if (!partialBlock.startLine !== undefined || !partialBlock.contentLines || partialBlock.contentLines.length === 0) {
                    return [2 /*return*/, null];
                }
                cardType = this.determineCardType(partialBlock.contentLines);
                startLine = partialBlock.startLine;
                endLine = partialBlock.endLine || endLineIndex;
                rawContentLines = lines.slice(startLine, endLine + 1);
                rawContent = rawContentLines.join('\n');
                return [2 /*return*/, {
                        startLine: startLine,
                        endLine: endLine,
                        contentLines: partialBlock.contentLines,
                        rawContent: rawContent,
                        metadata: partialBlock.metadata || null,
                        metadataParseResult: partialBlock.metadataParseResult || null,
                        cardType: cardType,
                        initialOffset: partialBlock.initialOffset || 0,
                        endOffset: partialBlock.endOffset || 0
                    }];
            });
        });
    };
    /**
     * 确定卡片类型
     * @param contentLines 卡片内容行
     * @returns 卡片类型
     */
    ParserV2.prototype.determineCardType = function (contentLines) {
        var content = contentLines.join('\n');
        // 检查是否包含填空语法
        if (content.includes('==') || content.includes('{') || content.includes('{{c')) {
            return 'cloze';
        }
        // 检查是否包含分隔符（简单模式）
        if (content.includes('---') || content.includes('::')) {
            return 'spaced';
        }
        // 检查是否是内联卡片
        if (contentLines.length === 1 || content.length < 100) {
            return 'inline';
        }
        // 默认为基于标签的卡片
        return 'tag-based';
    };
    /**
     * 根据元数据状态分类卡片
     * @param cardBlocks 所有卡片块
     * @returns 分类结果
     */
    ParserV2.prototype.categorizeCards = function (cardBlocks) {
        var e_1, _a;
        var cardsToDelete = [];
        var cardsToCreate = [];
        var cardsToUpdate = [];
        try {
            for (var cardBlocks_1 = __values(cardBlocks), cardBlocks_1_1 = cardBlocks_1.next(); !cardBlocks_1_1.done; cardBlocks_1_1 = cardBlocks_1.next()) {
                var block = cardBlocks_1_1.value;
                if (!block.metadata) {
                    // 没有元数据的卡片视为待创建
                    cardsToCreate.push(block);
                    continue;
                }
                var status_1 = block.metadata.syncStatus;
                // 根据同步状态分类
                switch (status_1) {
                    case 'pending-delete-ob':
                    case 'pending-delete-anki':
                    case 'pending-delete-both':
                        cardsToDelete.push(block);
                        break;
                    case 'created':
                    case 'updated':
                    case 'synced':
                        // 需要检查内容是否有变化
                        cardsToUpdate.push(block);
                        break;
                    case 'pending-create':
                    case 'pending-update':
                        cardsToCreate.push(block);
                        break;
                    default:
                        // 未知状态，视为待创建
                        cardsToCreate.push(block);
                        break;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (cardBlocks_1_1 && !cardBlocks_1_1.done && (_a = cardBlocks_1.return)) _a.call(cardBlocks_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return { cardsToDelete: cardsToDelete, cardsToCreate: cardsToCreate, cardsToUpdate: cardsToUpdate };
    };
    /**
     * 将卡片块转换为Flashcard对象
     * @param cardBlock 卡片块
     * @param deckName 牌组名称
     * @param vaultName 仓库名称
     * @param noteName 笔记名称
     * @param globalTags 全局标签
     * @returns Flashcard对象
     */
    ParserV2.prototype.convertToFlashcard = function (cardBlock, deckName, vaultName, noteName, globalTags) {
        if (globalTags === void 0) { globalTags = []; }
        return __awaiter(this, void 0, void 0, function () {
            var content;
            return __generator(this, function (_a) {
                content = cardBlock.contentLines.join('\n');
                try {
                    switch (cardBlock.cardType) {
                        case 'spaced':
                            return [2 /*return*/, this.createSpacedCard(cardBlock, content, deckName, vaultName, noteName, globalTags)];
                        case 'cloze':
                            return [2 /*return*/, this.createClozeCard(cardBlock, content, deckName, vaultName, noteName, globalTags)];
                        case 'inline':
                            return [2 /*return*/, this.createInlineCard(cardBlock, content, deckName, vaultName, noteName, globalTags)];
                        case 'tag-based':
                            return [2 /*return*/, this.createTagBasedCard(cardBlock, content, deckName, vaultName, noteName, globalTags)];
                        default:
                            console.warn("\u672A\u77E5\u7684\u5361\u7247\u7C7B\u578B: ".concat(cardBlock.cardType));
                            return [2 /*return*/, null];
                    }
                }
                catch (error) {
                    console.error("\u8F6C\u6362\u5361\u7247\u5931\u8D25:", error);
                    return [2 /*return*/, null];
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * 创建间隔重复卡片
     */
    ParserV2.prototype.createSpacedCard = function (cardBlock, content, deckName, vaultName, noteName, globalTags) {
        var _a;
        // 解析正反面内容
        var _b = this.parseSpacedContent(content), front = _b.front, back = _b.back;
        var fields = {
            "Front": this.processContent(front, vaultName),
            "Back": this.processContent(back, vaultName)
        };
        var tags = this.extractTags(content, globalTags);
        var mediaNames = this.extractMediaNames(content);
        var id = ((_a = cardBlock.metadata) === null || _a === void 0 ? void 0 : _a.id) || -1;
        return new Spacedcard(id, deckName, content, fields, false, // reversed
        cardBlock.initialOffset, cardBlock.endOffset, tags, false, // inserted
        mediaNames);
    };
    /**
     * 创建填空卡片
     */
    ParserV2.prototype.createClozeCard = function (cardBlock, content, deckName, vaultName, noteName, globalTags) {
        var _a;
        // 处理填空语法
        var processedContent = this.processClozeContent(content);
        var fields = {
            "Text": this.processContent(processedContent, vaultName)
        };
        var tags = this.extractTags(content, globalTags);
        var mediaNames = this.extractMediaNames(content);
        var id = ((_a = cardBlock.metadata) === null || _a === void 0 ? void 0 : _a.id) || -1;
        return new Clozecard(id, deckName, content, fields, false, // reversed
        cardBlock.initialOffset, cardBlock.endOffset, tags, false, // inserted
        mediaNames);
    };
    /**
     * 创建内联卡片
     */
    ParserV2.prototype.createInlineCard = function (cardBlock, content, deckName, vaultName, noteName, globalTags) {
        var _a;
        // 内联卡片通常是简短的问答
        var _b = this.parseInlineContent(content), front = _b.front, back = _b.back;
        var fields = {
            "Front": this.processContent(front, vaultName),
            "Back": this.processContent(back, vaultName)
        };
        var tags = this.extractTags(content, globalTags);
        var mediaNames = this.extractMediaNames(content);
        var id = ((_a = cardBlock.metadata) === null || _a === void 0 ? void 0 : _a.id) || -1;
        return new Inlinecard(id, deckName, content, fields, false, // reversed
        cardBlock.initialOffset, cardBlock.endOffset, tags, false, // inserted
        mediaNames);
    };
    /**
     * 创建基于标签的卡片
     */
    ParserV2.prototype.createTagBasedCard = function (cardBlock, content, deckName, vaultName, noteName, globalTags) {
        var _a;
        // 基于标签的卡片，尝试智能解析正反面
        var _b = this.parseTagBasedContent(content), front = _b.front, back = _b.back;
        var fields = {
            "Front": this.processContent(front, vaultName),
            "Back": this.processContent(back, vaultName)
        };
        var tags = this.extractTags(content, globalTags);
        var mediaNames = this.extractMediaNames(content);
        var id = ((_a = cardBlock.metadata) === null || _a === void 0 ? void 0 : _a.id) || -1;
        return new Flashcard(id, deckName, content, fields, false, // reversed
        cardBlock.initialOffset, cardBlock.endOffset, tags, false, // inserted
        mediaNames);
    };
    /**
     * 解析间隔重复卡片内容
     */
    ParserV2.prototype.parseSpacedContent = function (content) {
        var _a, _b;
        // 查找分隔符
        if (content.includes('---')) {
            var parts = content.split('---');
            return {
                front: ((_a = parts[0]) === null || _a === void 0 ? void 0 : _a.trim()) || '',
                back: parts.slice(1).join('---').trim()
            };
        }
        if (content.includes('::')) {
            var parts = content.split('::');
            return {
                front: ((_b = parts[0]) === null || _b === void 0 ? void 0 : _b.trim()) || '',
                back: parts.slice(1).join('::').trim()
            };
        }
        // 如果没有明确分隔符，尝试智能分割
        return this.smartSplitContent(content);
    };
    /**
     * 处理填空内容
     */
    ParserV2.prototype.processClozeContent = function (content) {
        var processed = content;
        var clozeIndex = 1;
        // 处理 ==高亮== 语法
        processed = processed.replace(/==(.*?)==/g, function (match, text) {
            return "{{c".concat(clozeIndex++, "::").concat(text, "}}");
        });
        // 处理 {填空} 语法
        processed = processed.replace(/\{([^}]+)\}/g, function (match, text) {
            // 检查是否已经是Anki格式
            if (text.includes('::')) {
                return match;
            }
            return "{{c".concat(clozeIndex++, "::").concat(text, "}}");
        });
        return processed;
    };
    /**
     * 解析内联卡片内容
     */
    ParserV2.prototype.parseInlineContent = function (content) {
        var _a;
        // 内联卡片通常使用 :: 分隔
        if (content.includes('::')) {
            var parts = content.split('::');
            return {
                front: ((_a = parts[0]) === null || _a === void 0 ? void 0 : _a.trim()) || '',
                back: parts.slice(1).join('::').trim()
            };
        }
        // 如果没有分隔符，整个内容作为正面，背面为空
        return {
            front: content.trim(),
            back: ''
        };
    };
    /**
     * 解析基于标签的卡片内容
     */
    ParserV2.prototype.parseTagBasedContent = function (content) {
        var e_2, _a;
        // 尝试识别问答结构
        var lines = content.split('\n');
        var questionLines = [];
        var answerLines = [];
        var inAnswer = false;
        try {
            for (var lines_1 = __values(lines), lines_1_1 = lines_1.next(); !lines_1_1.done; lines_1_1 = lines_1.next()) {
                var line = lines_1_1.value;
                var trimmedLine = line.trim().toLowerCase();
                // 检查是否是答案开始标记
                if (trimmedLine.startsWith('答案') ||
                    trimmedLine.startsWith('answer') ||
                    trimmedLine.startsWith('解答') ||
                    trimmedLine.includes('答：')) {
                    inAnswer = true;
                    continue;
                }
                if (inAnswer) {
                    answerLines.push(line);
                }
                else {
                    questionLines.push(line);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (lines_1_1 && !lines_1_1.done && (_a = lines_1.return)) _a.call(lines_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        // 如果没有明确的问答结构，使用智能分割
        if (answerLines.length === 0) {
            return this.smartSplitContent(content);
        }
        return {
            front: questionLines.join('\n').trim(),
            back: answerLines.join('\n').trim()
        };
    };
    /**
     * 智能分割内容
     */
    ParserV2.prototype.smartSplitContent = function (content) {
        var lines = content.split('\n');
        // 如果只有一行，整个作为正面
        if (lines.length <= 1) {
            return { front: content.trim(), back: '' };
        }
        // 如果有多行，前半部分作为正面，后半部分作为背面
        var midPoint = Math.ceil(lines.length / 2);
        return {
            front: lines.slice(0, midPoint).join('\n').trim(),
            back: lines.slice(midPoint).join('\n').trim()
        };
    };
    /**
     * 处理内容（转换链接、媒体等）
     */
    ParserV2.prototype.processContent = function (content, vaultName) {
        // 这里可以复用原有的内容处理逻辑
        // 暂时返回原内容
        return content;
    };
    /**
     * 提取标签
     */
    ParserV2.prototype.extractTags = function (content, globalTags) {
        var tags = __spreadArray([], __read(globalTags), false);
        var tagRegex = /#([a-zA-Z0-9_\-\/]+)/g;
        var match;
        while ((match = tagRegex.exec(content)) !== null) {
            var tag = match[1];
            if (!tags.includes(tag)) {
                tags.push(tag);
            }
        }
        return tags;
    };
    /**
     * 提取媒体文件名
     */
    ParserV2.prototype.extractMediaNames = function (content) {
        var mediaNames = [];
        // 提取图片链接
        var imageRegex = /!\[\[([^\]]+)\]\]/g;
        var match;
        while ((match = imageRegex.exec(content)) !== null) {
            mediaNames.push(match[1]);
        }
        // 提取音频链接
        var audioRegex = /!\[.*?\]\(([^)]+\.(mp3|wav|ogg|m4a))\)/gi;
        while ((match = audioRegex.exec(content)) !== null) {
            mediaNames.push(match[1]);
        }
        return mediaNames;
    };
    /**
     * 提取全局标签
     */
    ParserV2.prototype.extractGlobalTags = function (content) {
        var tags = [];
        var tagRegex = /#([a-zA-Z0-9_\-\/]+)/g;
        var match;
        while ((match = tagRegex.exec(content)) !== null) {
            var tag = match[1];
            if (!tags.includes(tag)) {
                tags.push(tag);
            }
        }
        return tags;
    };
    /**
     * 检查卡片内容是否需要更新
     * @param cardBlock 卡片块
     * @returns 是否需要更新
     */
    ParserV2.prototype.needsContentUpdate = function (cardBlock) {
        return __awaiter(this, void 0, void 0, function () {
            var currentHash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!cardBlock.metadata) {
                            return [2 /*return*/, true]; // 没有元数据，需要创建
                        }
                        cardBlock.contentLines.join('\n');
                        return [4 /*yield*/, this.metadataUtils.calculateContentHash(cardBlock.metadata.frontContent, cardBlock.metadata.backContent, cardBlock.metadata.tags, cardBlock.metadata.deckName)];
                    case 1:
                        currentHash = _a.sent();
                        return [2 /*return*/, cardBlock.metadata.contentHash !== currentHash];
                }
            });
        });
    };
    /**
     * 生成兼容的Flashcard数组（用于向后兼容）
     * @param fileContent 文件内容
     * @param deckName 牌组名称
     * @param vaultName 仓库名称
     * @param noteName 笔记名称
     * @param globalTags 全局标签
     * @returns Flashcard数组
     */
    ParserV2.prototype.generateFlashcards = function (fileContent, deckName, vaultName, noteName, globalTags) {
        if (globalTags === void 0) { globalTags = []; }
        return __awaiter(this, void 0, void 0, function () {
            var parseResult, flashcards, _a, _b, cardBlock, flashcard, e_3_1;
            var e_3, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, this.parseFile(fileContent, noteName)];
                    case 1:
                        parseResult = _d.sent();
                        flashcards = [];
                        _d.label = 2;
                    case 2:
                        _d.trys.push([2, 7, 8, 9]);
                        _a = __values(parseResult.cardBlocks), _b = _a.next();
                        _d.label = 3;
                    case 3:
                        if (!!_b.done) return [3 /*break*/, 6];
                        cardBlock = _b.value;
                        return [4 /*yield*/, this.convertToFlashcard(cardBlock, deckName, vaultName, noteName, globalTags)];
                    case 4:
                        flashcard = _d.sent();
                        if (flashcard) {
                            flashcards.push(flashcard);
                        }
                        _d.label = 5;
                    case 5:
                        _b = _a.next();
                        return [3 /*break*/, 3];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_3_1 = _d.sent();
                        e_3 = { error: e_3_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_3) throw e_3.error; }
                        return [7 /*endfinally*/];
                    case 9: return [2 /*return*/, flashcards];
                }
            });
        });
    };
    return ParserV2;
}());

var Regex = /** @class */ (function () {
    function Regex(settings) {
        this.update(settings);
    }
    Regex.prototype.update = function (settings) {
        // https://regex101.com/r/BOieWh/1
        this.headingsRegex = /^ {0,3}(#{1,6}) +([^\n]+?) ?((?: *#\S+)*) *$/gim;
        // Supported images https://publish.obsidian.md/help/How+to/Embed+files
        this.wikiImageLinks =
            /!\[\[(.*\.(?:png|jpg|jpeg|gif|bmp|svg|tiff)).*?\]\]/gim;
        this.markdownImageLinks =
            /!\[\]\((.*\.(?:png|jpg|jpeg|gif|bmp|svg|tiff)).*?\)/gim;
        this.wikiAudioLinks =
            /!\[\[(.*\.(?:mp3|webm|wav|m4a|ogg|3gp|flac)).*?\]\]/gim;
        // https://regex101.com/r/eqnJeW/1
        this.obsidianCodeBlock = /(?:```(?:.*?\n?)+?```)(?:\n|$)/gim;
        this.codeBlock = /<code\b[^>]*>(.*?)<\/code>/gim;
        this.mathBlock = /(\$\$)(.*?)(\$\$)/gi;
        this.mathInline = /(\$)(.*?)(\$)/gi;
        // 更健壮的匹配：允许空格、冒号、数字、子牌组等，匹配整行
        this.cardsDeckLine = /^\s*cards-deck:\s+.+$/gmi;
        // 只匹配新格式：^anki-13位数字
        this.cardsToDelete = /^\s*(?:\n)(?:\^anki-(\d{13}))(?:\n\s*?)?/gm;
        // https://regex101.com/r/WxuFI2/1
        // 使用 \w 替代 \p{L} 以兼容 ES5，支持字母、数字、下划线
        this.globalTagsSplitter =
            /\[\[(.*?)\]\]|#([\w\d:\-_/]+)|([\w\d:\-_/]+)/gim;
        this.tagHierarchy = /\//gm;
        // Cards
        var flags = "gimu";
        // 更健壮的块卡片匹配：
        // - 支持 CRLF 换行
        // - 标签只使用 JS 兼容的字符类（\\w 等）
        // - 答案在以下位置终止：ID 行、下一个 #card 标记行、或文件结束
        // 问题（group 2）允许跨多行直到 #tag 行
        var str = "( {0,3}[#]*)((?:[^\\n]\\n?)+?)(#" +
            settings.flashcardsTag +
            "(?:[/-]reverse)?)" +
            "((?: *#[\\w\\-\\/_]+)*) *?" +
            "\\r?\\n+" +
            "([\\s\\S]*?)(?=\\r?\\n\\^(?:anki-)?\\d{13}|\\r?\\n#" + settings.flashcardsTag + "(?:[/-]reverse)?|$)" +
            "(?:\\r?\\n\\^(?:anki-)?(\\d{13}))?";
        this.flashscardsWithTag = new RegExp(str, flags);
        // https://regex101.com/r/8wmOo8/1
        var sepLongest = settings.inlineSeparator.length >= settings.inlineSeparatorReverse.length ? settings.inlineSeparator : settings.inlineSeparatorReverse;
        var sepShortest = settings.inlineSeparator.length < settings.inlineSeparatorReverse.length ? settings.inlineSeparator : settings.inlineSeparatorReverse;
        // sepLongest is the longest between the inlineSeparator and the inlineSeparatorReverse because if the order is ::|::: then always the first will be matched
        // sepShortest is the shortest
        if (settings.inlineID) {
            str =
                "( {0,3}[#]{0,6})?(?:(?:[\\t ]*)(?:\\d.|[-+*]|#{1,6}))?(.+?) ?(" + sepLongest + "|" + sepShortest + ") ?(.+?)((?: *#[\\w\\-\\/_]+)+)?(?:\\s+\\^(?:anki-)?(\\d{13})|$)";
        }
        else {
            str =
                "( {0,3}[#]{0,6})?(?:(?:[\\t ]*)(?:\\d.|[-+*]|#{1,6}))?(.+?) ?(" + sepLongest + "|" + sepShortest + ") ?(.+?)((?: *#[\\w\\-\\/_]+)+|$)(?:\\r?\\n\\^(?:anki-)?(\\d{13}))?";
        }
        this.cardsInlineStyle = new RegExp(str, flags);
        // https://regex101.com/r/HOXF5E/1
        str =
            "( {0,3}[#]*)((?:[^\\n]\\n?)+?)(#" +
                settings.flashcardsTag +
                "[/-]spaced)((?: *#[\\w\\-\\/_]+)*) *\\r?\\n?(?:\\r?\\n\\^(?:anki-)?(\\d{13}))?";
        this.cardsSpacedStyle = new RegExp(str, flags);
        // https://regex101.com/r/cgtnLf/1
        str = "( {0,3}[#]{0,6})?(?:(?:[\\t ]*)(?:\\d.|[-+*]|#{1,6}))?(.*?(==.+?==|\\{.+?\\}).*?)((?: *#[\\w\\-\\/_]+)+|$)(?:\n\\^(?:anki-)?(\\d{13}))?";
        this.cardsClozeWholeLine = new RegExp(str, flags);
        this.singleClozeCurly = /((?:{)(?:(\d):?)?(.+?)(?:}))/g;
        this.singleClozeHighlight = /((?:==)(.+?)(?:==))/g;
        // Matches any embedded block but the one with an used extension from the wikilinks
        this.embedBlock = /!\[\[(.*?)(?<!\.(?:png|jpg|jpeg|gif|bmp|svg|tiff|mp3|webm|wav|m4a|ogg|3gp|flac))\]\]/g;
    };
    return Regex;
}());

/**
 * CardsServiceV2 - 基于JSON元数据和两遍扫描策略的卡片服务
 *
 * 主要特性：
 * 1. 使用JSON格式存储完整的卡片元数据
 * 2. 采用两遍扫描策略：第一遍处理删除，第二遍处理新增和更新
 * 3. 支持内容哈希快速检测变更
 * 4. 完整的同步状态管理
 */
var CardsServiceV2 = /** @class */ (function () {
    function CardsServiceV2(app, settings) {
        this.app = app;
        this.settings = settings;
        this.regex = new Regex(this.settings);
        this.parser = new ParserV2(app, this.regex, this.settings);
        this.anki = new Anki();
        this.metadataUtils = createMetadataUtils(app);
        this.hashUtils = getXXHashUtils();
    }
    /**
     * 执行单个文件的卡片处理
     */
    CardsServiceV2.prototype.execute = function (activeFile) {
        return __awaiter(this, void 0, void 0, function () {
            var err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.regex.update(this.settings);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.anki.ping()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        console.error(err_1);
                        return [2 /*return*/, ["Error: Anki must be open with AnkiConnect installed."]];
                    case 4: return [2 /*return*/, this.processFile(activeFile)];
                }
            });
        });
    };
    /**
     * 执行文件夹的批量处理
     */
    CardsServiceV2.prototype.executeFolder = function (folderPath, progressCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var err_2, files, totalFiles, allNotifications, stats, i, file, notifications, err_3, errorMsg, summary;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.regex.update(this.settings);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.anki.ping()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        console.error(err_2);
                        return [2 /*return*/, ["Error: Anki must be open with AnkiConnect installed."]];
                    case 4:
                        files = this.app.vault.getMarkdownFiles().filter(function (file) {
                            var _a;
                            if (folderPath === "/") {
                                return true; // 包含vault中的所有文件
                            }
                            return file.path.startsWith(folderPath + "/") || ((_a = file.parent) === null || _a === void 0 ? void 0 : _a.path) === folderPath;
                        });
                        console.log("Processing folder \"".concat(folderPath, "\" with ").concat(files.length, " files:"));
                        files.forEach(function (file) { return console.log("- ".concat(file.path)); });
                        totalFiles = files.length;
                        allNotifications = [];
                        stats = {
                            processed: 0,
                            created: 0,
                            updated: 0,
                            deleted: 0,
                            errors: 0,
                            skipped: 0
                        };
                        // 为所有文件初始化模型（仅一次）
                        return [4 /*yield*/, this.anki.createModels(this.settings.sourceSupport, this.settings.codeHighlightSupport, this.settings.codeHighlightTheme)];
                    case 5:
                        // 为所有文件初始化模型（仅一次）
                        _a.sent();
                        i = 0;
                        _a.label = 6;
                    case 6:
                        if (!(i < files.length)) return [3 /*break*/, 11];
                        file = files[i];
                        if (progressCallback) {
                            progressCallback(i + 1, totalFiles, file.basename);
                        }
                        _a.label = 7;
                    case 7:
                        _a.trys.push([7, 9, , 10]);
                        return [4 /*yield*/, this.processFile(file)];
                    case 8:
                        notifications = _a.sent();
                        allNotifications.push.apply(allNotifications, __spreadArray([], __read(notifications), false));
                        // 更新统计信息
                        stats.processed++;
                        notifications.forEach(function (notification) {
                            _this.applyNotificationToStats(notification, stats);
                        });
                        return [3 /*break*/, 10];
                    case 9:
                        err_3 = _a.sent();
                        console.error("Error processing file ".concat(file.path, ":"), err_3);
                        errorMsg = "".concat(t('notifications.error'), " in ").concat(file.basename, ": ").concat(err_3.message || t('notifications.unknownError'));
                        allNotifications.push(errorMsg);
                        stats.errors++;
                        return [3 /*break*/, 10];
                    case 10:
                        i++;
                        return [3 /*break*/, 6];
                    case 11:
                        summary = this.generateFolderSummary(stats, totalFiles);
                        allNotifications.unshift(summary);
                        return [2 /*return*/, allNotifications];
                }
            });
        });
    };
    /**
     * 执行所有文件的处理
     */
    CardsServiceV2.prototype.executeAll = function (progressCallback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.executeFolder("/", progressCallback)];
            });
        });
    };
    /**
     * 处理单个文件的核心逻辑 - 实现两遍扫描策略
     */
    CardsServiceV2.prototype.processFile = function (activeFile) {
        return __awaiter(this, void 0, void 0, function () {
            var filePath, sourcePath, fileCachedMetadata, frontmatter, deckName, _a, parseResult, existingIds, ankiCards, _b, _c, cardsToDelete, cardsToCreate, cardsToUpdate, cardsNotInAnki, cardsNotInAnki_1, cardsNotInAnki_1_1, card, allCards, existingMetadata, updatedFrontmatter, allCardIds, deckNeedToBeChanged, err_4, err_5;
            var e_1, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        // 初始化处理环境
                        this.updateFile = false;
                        this.totalOffset = 0;
                        this.notifications = [];
                        filePath = activeFile.basename;
                        sourcePath = activeFile.path;
                        this.currentSourcePath = sourcePath;
                        fileCachedMetadata = this.app.metadataCache.getFileCache(activeFile);
                        this.app.vault.getName();
                        frontmatter = fileCachedMetadata === null || fileCachedMetadata === void 0 ? void 0 : fileCachedMetadata.frontmatter;
                        deckName = "";
                        if (obsidian.parseFrontMatterEntry(frontmatter, "cards-deck")) {
                            deckName = obsidian.parseFrontMatterEntry(frontmatter, "cards-deck");
                        }
                        else if (this.settings.folderBasedDeck && activeFile.parent.path !== "/") {
                            // 如果当前文件路径是 "programming/java/strings.md"，则牌组名称是 "programming::java"
                            deckName = activeFile.parent.path.split("/").join("::");
                        }
                        else {
                            deckName = this.settings.deck;
                        }
                        _f.label = 1;
                    case 1:
                        _f.trys.push([1, 20, , 21]);
                        // 确保牌组存在
                        return [4 /*yield*/, this.anki.createDeck(deckName)];
                    case 2:
                        // 确保牌组存在
                        _f.sent();
                        // 读取文件内容并标准化换行
                        _a = this;
                        return [4 /*yield*/, this.app.vault.read(activeFile)];
                    case 3:
                        // 读取文件内容并标准化换行
                        _a.file = _f.sent();
                        if (!this.file.endsWith("\n")) {
                            this.file += "\n";
                        }
                        // 解析全局标签
                        this.parseGlobalTags(this.file);
                        return [4 /*yield*/, this.parser.parseFile(this.file, filePath)];
                    case 4:
                        parseResult = _f.sent();
                        existingIds = parseResult.cardBlocks
                            .map(function (block) { var _a; return (_a = block.metadata) === null || _a === void 0 ? void 0 : _a.id; })
                            .filter(function (id) { return id; });
                        if (!(existingIds.length > 0)) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.anki.getCards(existingIds)];
                    case 5:
                        _b = _f.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        _b = undefined;
                        _f.label = 7;
                    case 7:
                        ankiCards = _b;
                        _c = this.classifyCards(parseResult, ankiCards), cardsToDelete = _c.cardsToDelete, cardsToCreate = _c.cardsToCreate, cardsToUpdate = _c.cardsToUpdate, cardsNotInAnki = _c.cardsNotInAnki;
                        console.info("Flashcards for ".concat(filePath, ":"));
                        console.info("Cards to delete: ".concat(cardsToDelete.length));
                        console.info("Cards to create: ".concat(cardsToCreate.length));
                        console.info("Cards to update: ".concat(cardsToUpdate.length));
                        console.info("Cards not in Anki: ".concat(cardsNotInAnki.length));
                        // 处理不在Anki中的卡片（可能已被删除）
                        if (cardsNotInAnki.length > 0) {
                            console.info("Cards not in Anki (maybe deleted):");
                            try {
                                for (cardsNotInAnki_1 = __values(cardsNotInAnki), cardsNotInAnki_1_1 = cardsNotInAnki_1.next(); !cardsNotInAnki_1_1.done; cardsNotInAnki_1_1 = cardsNotInAnki_1.next()) {
                                    card = cardsNotInAnki_1_1.value;
                                    this.notifications.push("".concat(t('notifications.error'), ": ").concat(t('notifications.cardNotInAnki'), " (ID: ").concat(card.id, ")"));
                                }
                            }
                            catch (e_1_1) { e_1 = { error: e_1_1 }; }
                            finally {
                                try {
                                    if (cardsNotInAnki_1_1 && !cardsNotInAnki_1_1.done && (_e = cardsNotInAnki_1.return)) _e.call(cardsNotInAnki_1);
                                }
                                finally { if (e_1) throw e_1.error; }
                            }
                            console.info(cardsNotInAnki);
                        }
                        allCards = __spreadArray(__spreadArray([], __read(cardsToCreate), false), __read(cardsToUpdate), false);
                        return [4 /*yield*/, this.insertMedias(allCards, sourcePath)];
                    case 8:
                        _f.sent();
                        existingMetadata = parseResult.cardBlocks
                            .map(function (block) { return block.metadata; })
                            .filter(function (meta) { return meta !== null; });
                        return [4 /*yield*/, this.firstPassScan_HandleDeletions(cardsToDelete, existingMetadata)];
                    case 9:
                        _f.sent();
                        // 第二遍扫描：处理新增和更新操作（从尾至头）
                        return [4 /*yield*/, this.secondPassScan_HandleCreationsAndUpdates(cardsToCreate, cardsToUpdate, frontmatter, deckName)];
                    case 10:
                        // 第二遍扫描：处理新增和更新操作（从尾至头）
                        _f.sent();
                        updatedFrontmatter = this.parseFrontmatterFromContent(this.file);
                        this.updateFrontmatter(updatedFrontmatter, deckName);
                        allCardIds = __spreadArray(__spreadArray([], __read(cardsToCreate), false), __read(cardsToUpdate), false).map(function (card) { return card.id; })
                            .filter(function (id) { return id; });
                        if (!(allCardIds.length > 0)) return [3 /*break*/, 15];
                        return [4 /*yield*/, this.deckNeedToBeChanged(allCardIds, deckName)];
                    case 11:
                        deckNeedToBeChanged = _f.sent();
                        if (!deckNeedToBeChanged) return [3 /*break*/, 15];
                        _f.label = 12;
                    case 12:
                        _f.trys.push([12, 14, , 15]);
                        return [4 /*yield*/, this.anki.changeDeck(allCardIds, deckName)];
                    case 13:
                        _f.sent();
                        this.notifications.push(t('notifications.cardsMovedToDeck'));
                        return [3 /*break*/, 15];
                    case 14:
                        _f.sent();
                        return [2 /*return*/, [t('notifications.error') + ': ' + t('notifications.couldNotUpdateDeck')]];
                    case 15:
                        if (!this.updateFile) return [3 /*break*/, 19];
                        _f.label = 16;
                    case 16:
                        _f.trys.push([16, 18, , 19]);
                        return [4 /*yield*/, this.app.vault.modify(activeFile, this.file)];
                    case 17:
                        _f.sent();
                        return [3 /*break*/, 19];
                    case 18:
                        err_4 = _f.sent();
                        console.error(err_4);
                        return [2 /*return*/, [t('notifications.error') + ': ' + t('notifications.couldNotUpdateFile')]];
                    case 19:
                        // 如果没有任何更改且设置允许，显示"无更改"通知
                        if (!this.notifications.length && this.settings.showNoChangesNotice) {
                            this.notifications.push(t('notifications.nothingToDo'));
                        }
                        return [2 /*return*/, this.notifications];
                    case 20:
                        err_5 = _f.sent();
                        console.error(err_5);
                        return [2 /*return*/, ["".concat(t('notifications.error'), ": ").concat(err_5.message || t('notifications.unknownError'))]];
                    case 21: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 第一遍扫描：处理删除操作（从尾至头）
     */
    CardsServiceV2.prototype.firstPassScan_HandleDeletions = function (cardsToDelete, existingMetadata) {
        return __awaiter(this, void 0, void 0, function () {
            var deletedCount, totalToDelete, sortedDeletions, sortedDeletions_1, sortedDeletions_1_1, card, shouldDeleteFromAnki, shouldDeleteFromOb, err_6, e_2_1;
            var e_2, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (cardsToDelete.length === 0)
                            return [2 /*return*/];
                        deletedCount = 0;
                        totalToDelete = cardsToDelete.length;
                        sortedDeletions = cardsToDelete
                            .map(function (card) {
                            var metaIndex = existingMetadata.findIndex(function (meta) { return meta.id === card.id; });
                            return { card: card, metaIndex: metaIndex };
                        })
                            .filter(function (item) { return item.metaIndex >= 0; })
                            .sort(function (a, b) { return b.metaIndex - a.metaIndex; });
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 9, 10, 11]);
                        sortedDeletions_1 = __values(sortedDeletions), sortedDeletions_1_1 = sortedDeletions_1.next();
                        _b.label = 2;
                    case 2:
                        if (!!sortedDeletions_1_1.done) return [3 /*break*/, 8];
                        card = sortedDeletions_1_1.value.card;
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 6, , 7]);
                        shouldDeleteFromAnki = card.syncStatus === 'pending-delete-anki' ||
                            card.syncStatus === 'pending-delete-both';
                        shouldDeleteFromOb = card.syncStatus === 'pending-delete-ob' ||
                            card.syncStatus === 'pending-delete-both';
                        if (!(shouldDeleteFromAnki && card.id)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.anki.deleteCards([card.id])];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5:
                        // 从Obsidian删除（移除JSON元数据和卡片内容）
                        if (shouldDeleteFromOb) {
                            this.removeCardFromFile(card);
                        }
                        deletedCount++;
                        return [3 /*break*/, 7];
                    case 6:
                        err_6 = _b.sent();
                        console.error("Failed to delete card ".concat(card.id, ":"), err_6);
                        this.notifications.push("".concat(t('notifications.error'), ": ").concat(t('notifications.couldNotDeleteCard'), " (ID: ").concat(card.id, ")"));
                        return [3 /*break*/, 7];
                    case 7:
                        sortedDeletions_1_1 = sortedDeletions_1.next();
                        return [3 /*break*/, 2];
                    case 8: return [3 /*break*/, 11];
                    case 9:
                        e_2_1 = _b.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 11];
                    case 10:
                        try {
                            if (sortedDeletions_1_1 && !sortedDeletions_1_1.done && (_a = sortedDeletions_1.return)) _a.call(sortedDeletions_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 11:
                        if (deletedCount > 0) {
                            this.notifications.push("".concat(t('notifications.deletedSuccessfully'), " ").concat(deletedCount, "/").concat(totalToDelete, " cards"));
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 第二遍扫描：处理新增和更新操作（从尾至头）
     */
    CardsServiceV2.prototype.secondPassScan_HandleCreationsAndUpdates = function (cardsToCreate, cardsToUpdate, frontmatter, deckName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(cardsToUpdate.length > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.updateCardsOnAnki(cardsToUpdate)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!(cardsToCreate.length > 0)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.insertCardsOnAnki(cardsToCreate, frontmatter, deckName)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 分类卡片：根据现有元数据和Anki状态分类
     */
    CardsServiceV2.prototype.classifyCards = function (parseResult, ankiCards) {
        var e_3, _a;
        var cardsToDelete = [];
        var cardsNotInAnki = [];
        // 从cardBlocks中提取现有元数据
        var existingMetadata = parseResult.cardBlocks
            .map(function (block) { return block.metadata; })
            .filter(function (meta) { return meta !== null; });
        try {
            // 识别待删除的卡片
            for (var existingMetadata_1 = __values(existingMetadata), existingMetadata_1_1 = existingMetadata_1.next(); !existingMetadata_1_1.done; existingMetadata_1_1 = existingMetadata_1.next()) {
                var metadata = existingMetadata_1_1.value;
                if (metadata.syncStatus === 'pending-delete-ob' ||
                    metadata.syncStatus === 'pending-delete-anki' ||
                    metadata.syncStatus === 'pending-delete-both') {
                    cardsToDelete.push(metadata);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (existingMetadata_1_1 && !existingMetadata_1_1.done && (_a = existingMetadata_1.return)) _a.call(existingMetadata_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        // 直接使用parseResult中的分类结果
        return {
            cardsToDelete: cardsToDelete,
            cardsToCreate: parseResult.cardsToCreate,
            cardsToUpdate: parseResult.cardsToUpdate,
            cardsNotInAnki: cardsNotInAnki
        };
    };
    /**
     * 从文件中移除卡片（包括内容和元数据）
     */
    CardsServiceV2.prototype.removeCardFromFile = function (metadata) {
        // 这里需要根据metadata中的位置信息移除对应的文本
        // 具体实现需要根据parser-v2.ts中的位置记录来实现
        // 暂时使用简单的正则匹配方式
        "^".concat(JSON.stringify(metadata));
        var metadataRegex = new RegExp("\\^\\{[^}]*\"id\"\\s*:\\s*".concat(metadata.id, "[^}]*\\}"), 'g');
        var beforeLength = this.file.length;
        this.file = this.file.replace(metadataRegex, '');
        var afterLength = this.file.length;
        if (beforeLength !== afterLength) {
            this.updateFile = true;
            this.totalOffset += (afterLength - beforeLength);
        }
    };
    // 以下方法复用原有的实现，但需要适配新的元数据格式
    /**
     * 处理媒体文件
     */
    CardsServiceV2.prototype.insertMedias = function (cards, sourcePath) {
        return __awaiter(this, void 0, void 0, function () {
            var err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        // Currently the media are created for every run, this is not a problem since Anki APIs overwrite the file
                        // A more efficient way would be to keep track of the medias saved
                        return [4 /*yield*/, this.generateMediaLinks(cards, sourcePath)];
                    case 1:
                        // Currently the media are created for every run, this is not a problem since Anki APIs overwrite the file
                        // A more efficient way would be to keep track of the medias saved
                        _a.sent();
                        return [4 /*yield*/, this.anki.storeMediaFiles(cards, this.settings.codeHighlightSupport, this.settings.codeHighlightTheme)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        // P0语义：媒体失败仅记录日志，不向用户提示通知，不影响卡片创建流程
                        console.error('Media storage failed:', err_7);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 生成媒体链接
     */
    CardsServiceV2.prototype.generateMediaLinks = function (cards, sourcePath) {
        return __awaiter(this, void 0, void 0, function () {
            var cards_1, cards_1_1, card, _a, _b, mediaName, image, binaryMedia, err_8, e_4_1, e_5_1;
            var e_5, _c, e_4, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _e.trys.push([0, 13, 14, 15]);
                        cards_1 = __values(cards), cards_1_1 = cards_1.next();
                        _e.label = 1;
                    case 1:
                        if (!!cards_1_1.done) return [3 /*break*/, 12];
                        card = cards_1_1.value;
                        _e.label = 2;
                    case 2:
                        _e.trys.push([2, 9, 10, 11]);
                        _a = (e_4 = void 0, __values(card.mediaNames)), _b = _a.next();
                        _e.label = 3;
                    case 3:
                        if (!!_b.done) return [3 /*break*/, 8];
                        mediaName = _b.value;
                        image = this.app.metadataCache.getFirstLinkpathDest(decodeURIComponent(mediaName), sourcePath);
                        _e.label = 4;
                    case 4:
                        _e.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, this.app.vault.readBinary(image)];
                    case 5:
                        binaryMedia = _e.sent();
                        card.mediaBase64Encoded.push(arrayBufferToBase64(binaryMedia));
                        return [3 /*break*/, 7];
                    case 6:
                        err_8 = _e.sent();
                        // 媒体读取失败仅记录错误，不提示用户，不中断卡片处理
                        console.error("Failed to read media ".concat(mediaName, ":"), err_8);
                        return [3 /*break*/, 7];
                    case 7:
                        _b = _a.next();
                        return [3 /*break*/, 3];
                    case 8: return [3 /*break*/, 11];
                    case 9:
                        e_4_1 = _e.sent();
                        e_4 = { error: e_4_1 };
                        return [3 /*break*/, 11];
                    case 10:
                        try {
                            if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                        }
                        finally { if (e_4) throw e_4.error; }
                        return [7 /*endfinally*/];
                    case 11:
                        cards_1_1 = cards_1.next();
                        return [3 /*break*/, 1];
                    case 12: return [3 /*break*/, 15];
                    case 13:
                        e_5_1 = _e.sent();
                        e_5 = { error: e_5_1 };
                        return [3 /*break*/, 15];
                    case 14:
                        try {
                            if (cards_1_1 && !cards_1_1.done && (_c = cards_1.return)) _c.call(cards_1);
                        }
                        finally { if (e_5) throw e_5.error; }
                        return [7 /*endfinally*/];
                    case 15: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 在Anki中插入新卡片
     */
    CardsServiceV2.prototype.insertCardsOnAnki = function (cardsToCreate, frontmatter, deckName) {
        return __awaiter(this, void 0, void 0, function () {
            var insertedIds, insertedCount, i, card, insertedId, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (cardsToCreate.length === 0)
                            return [2 /*return*/, 0];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.anki.addCards(cardsToCreate)];
                    case 2:
                        insertedIds = _a.sent();
                        insertedCount = 0;
                        for (i = 0; i < cardsToCreate.length; i++) {
                            card = cardsToCreate[i];
                            insertedId = insertedIds[i];
                            if (insertedId) {
                                card.id = insertedId;
                                insertedCount++;
                            }
                            else {
                                console.error("Failed to insert card: ".concat(card.toString()));
                                new obsidian.Notice("".concat(t('notifications.error'), ": ").concat(t('notifications.couldNotWriteCard')), noticeTimeout);
                            }
                        }
                        // 写入JSON元数据
                        this.writeJsonMetadata(cardsToCreate.filter(function (card) { return card.id; }));
                        if (insertedCount > 0) {
                            this.notifications.push("".concat(t('notifications.insertedSuccessfully'), " ").concat(insertedCount, "/").concat(cardsToCreate.length, " cards"));
                        }
                        return [2 /*return*/, insertedCount];
                    case 3:
                        err_9 = _a.sent();
                        console.error('Failed to insert cards:', err_9);
                        this.notifications.push("".concat(t('notifications.error'), ": ").concat(t('notifications.couldNotWriteCards')));
                        return [2 /*return*/, 0];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 在Anki中更新卡片
     */
    CardsServiceV2.prototype.updateCardsOnAnki = function (cards) {
        return __awaiter(this, void 0, void 0, function () {
            var err_10;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (cards.length === 0)
                            return [2 /*return*/, 0];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.anki.updateCards(cards, this.settings.codeHighlightSupport, this.settings.codeHighlightTheme)];
                    case 2:
                        _a.sent();
                        // 更新JSON元数据
                        this.updateJsonMetadata(cards);
                        this.notifications.push("".concat(t('notifications.updatedSuccessfully'), " ").concat(cards.length, "/").concat(cards.length, " cards"));
                        return [2 /*return*/, cards.length];
                    case 3:
                        err_10 = _a.sent();
                        console.error('Failed to update cards:', err_10);
                        this.notifications.push("".concat(t('notifications.error'), ": ").concat(t('notifications.couldNotUpdateCards')));
                        return [2 /*return*/, 0];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 写入JSON元数据到文件
     */
    CardsServiceV2.prototype.writeJsonMetadata = function (cards) {
        var e_6, _a;
        // 从尾至头处理，避免偏移量问题
        var sortedCards = __spreadArray([], __read(cards), false).sort(function (a, b) { return (b.endOffset || 0) - (a.endOffset || 0); });
        try {
            for (var sortedCards_1 = __values(sortedCards), sortedCards_1_1 = sortedCards_1.next(); !sortedCards_1_1.done; sortedCards_1_1 = sortedCards_1.next()) {
                var card = sortedCards_1_1.value;
                if (!card.id)
                    continue;
                var metadata = {
                    id: card.id,
                    frontContent: this.extractFrontContent(card),
                    contentHash: this.hashUtils.hashCardContent(card.fields.Front || '', card.fields.Back || '', card.tags, card.deckName),
                    obModifiedTime: Date.now(),
                    ankiModifiedTime: Date.now(),
                    lastSyncTime: Date.now(),
                    syncDirection: 'ob-to-anki',
                    syncStatus: 'synced',
                    ankiReviewState: {
                        due: 0,
                        interval: 0,
                        ease: 2500,
                        reviews: 0,
                        lapses: 0,
                        type: 0,
                        queue: 0,
                    },
                    deckName: card.deckName,
                    tags: card.tags || [],
                    modelName: card.modelName,
                    createdTime: Date.now()
                };
                var metadataLine = "^".concat(JSON.stringify(metadata));
                var insertPosition = card.endOffset || this.file.length;
                // 检查是否已存在元数据
                var existingMetadataRegex = new RegExp("\\^\\{[^}]*\"id\"\\s*:\\s*".concat(card.id, "[^}]*\\}"), 'g');
                if (!existingMetadataRegex.test(this.file)) {
                    // 插入新的元数据行
                    if (card instanceof Inlinecard && this.settings.inlineID) {
                        // 内联卡片：在行尾插入
                        this.file = this.file.slice(0, insertPosition) + " ".concat(metadataLine) + this.file.slice(insertPosition);
                        this.totalOffset += metadataLine.length + 1;
                    }
                    else {
                        // 普通卡片：换行插入
                        this.file = this.file.slice(0, insertPosition) + "\n".concat(metadataLine) + this.file.slice(insertPosition);
                        this.totalOffset += metadataLine.length + 1;
                    }
                    this.updateFile = true;
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (sortedCards_1_1 && !sortedCards_1_1.done && (_a = sortedCards_1.return)) _a.call(sortedCards_1);
            }
            finally { if (e_6) throw e_6.error; }
        }
    };
    /**
     * 更新JSON元数据
     */
    CardsServiceV2.prototype.updateJsonMetadata = function (cards) {
        var e_7, _a;
        try {
            for (var cards_2 = __values(cards), cards_2_1 = cards_2.next(); !cards_2_1.done; cards_2_1 = cards_2.next()) {
                var card = cards_2_1.value;
                if (!card.id)
                    continue;
                // 查找现有元数据并更新
                var metadataRegex = new RegExp("(\\^\\{[^}]*\"id\"\\s*:\\s*".concat(card.id, "[^}]*\\})"), 'g');
                var match = metadataRegex.exec(this.file);
                if (match) {
                    try {
                        var existingMetadata = JSON.parse(match[1].substring(1)); // 移除^前缀
                        // 更新元数据
                        var frontContent = this.extractFrontContent(card);
                        var backContent = card.fields.Back || card.fields.Answer || '';
                        existingMetadata.contentHash = this.hashUtils.hashCardContent(frontContent, backContent, card.tags, card.deckName);
                        existingMetadata.ankiModifiedTime = Date.now();
                        existingMetadata.lastSyncTime = Date.now();
                        existingMetadata.syncStatus = 'synced';
                        existingMetadata.tags = card.tags || [];
                        var updatedMetadataLine = "^".concat(JSON.stringify(existingMetadata));
                        this.file = this.file.replace(match[1], updatedMetadataLine);
                        this.updateFile = true;
                    }
                    catch (err) {
                        console.error("Failed to update metadata for card ".concat(card.id, ":"), err);
                    }
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (cards_2_1 && !cards_2_1.done && (_a = cards_2.return)) _a.call(cards_2);
            }
            finally { if (e_7) throw e_7.error; }
        }
    };
    /**
     * 提取卡片正面内容用于元数据
     */
    CardsServiceV2.prototype.extractFrontContent = function (card) {
        var _a;
        if (card.fields && Object.keys(card.fields).length > 0) {
            // 优先使用 Front 字段，如果没有则使用第一个字段
            var frontContent = card.fields.Front || card.fields.Prompt || Object.values(card.fields)[0];
            return (frontContent === null || frontContent === void 0 ? void 0 : frontContent.substring(0, 100)) || ''; // 截取前100个字符
        }
        return ((_a = card.initialContent) === null || _a === void 0 ? void 0 : _a.substring(0, 100)) || '';
    };
    // 以下方法复用原有实现
    CardsServiceV2.prototype.parseFrontmatterFromContent = function (content) {
        var e_8, _a;
        // 复用原有实现
        var frontmatterRegex = /^---\n([\s\S]*?)\n---/;
        var match = frontmatterRegex.exec(content);
        if (match) {
            try {
                var frontmatterText = match[1];
                var frontmatter = {};
                var lines = frontmatterText.split('\n');
                try {
                    for (var lines_1 = __values(lines), lines_1_1 = lines_1.next(); !lines_1_1.done; lines_1_1 = lines_1.next()) {
                        var line = lines_1_1.value;
                        var colonIndex = line.indexOf(':');
                        if (colonIndex > 0) {
                            var key = line.substring(0, colonIndex).trim();
                            var value = line.substring(colonIndex + 1).trim();
                            frontmatter[key] = value;
                        }
                    }
                }
                catch (e_8_1) { e_8 = { error: e_8_1 }; }
                finally {
                    try {
                        if (lines_1_1 && !lines_1_1.done && (_a = lines_1.return)) _a.call(lines_1);
                    }
                    finally { if (e_8) throw e_8.error; }
                }
                return frontmatter;
            }
            catch (err) {
                console.error('Failed to parse frontmatter:', err);
            }
        }
        return null;
    };
    CardsServiceV2.prototype.updateFrontmatter = function (frontmatter, deckName) {
        // 复用原有实现
        if (!frontmatter || frontmatter['cards-deck'] === deckName) {
            return;
        }
        var frontmatterRegex = /^(---\n)([\s\S]*?)(\n---)/;
        var match = frontmatterRegex.exec(this.file);
        if (match) {
            var frontmatterContent = match[2];
            var deckLineRegex = /^cards-deck:\s*.*/m;
            if (deckLineRegex.test(frontmatterContent)) {
                frontmatterContent = frontmatterContent.replace(deckLineRegex, "cards-deck: ".concat(deckName));
            }
            else {
                frontmatterContent += "\ncards-deck: ".concat(deckName);
            }
            var newFrontmatter = "".concat(match[1]).concat(frontmatterContent).concat(match[3]);
            this.file = this.file.replace(match[0], newFrontmatter);
            this.updateFile = true;
        }
        else {
            // 添加新的frontmatter
            var newFrontmatter = "---\ncards-deck: ".concat(deckName, "\n---\n\n");
            this.file = newFrontmatter + this.file;
            this.totalOffset += newFrontmatter.length;
            this.updateFile = true;
        }
    };
    CardsServiceV2.prototype.deckNeedToBeChanged = function (cardsIds, deckName) {
        return __awaiter(this, void 0, void 0, function () {
            var cardsInfo, err_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // 复用原有实现
                        if (cardsIds.length === 0)
                            return [2 /*return*/, false];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.anki.cardsInfo(cardsIds)];
                    case 2:
                        cardsInfo = _a.sent();
                        return [2 /*return*/, cardsInfo.some(function (cardInfo) { return cardInfo.deckName !== deckName; })];
                    case 3:
                        err_11 = _a.sent();
                        console.error('Failed to check deck changes:', err_11);
                        return [2 /*return*/, false];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    CardsServiceV2.prototype.parseGlobalTags = function (file) {
        // 复用原有实现
        var globalTagsRegex = /^tags:\s*\[(.*?)\]/m;
        var match = globalTagsRegex.exec(file);
        if (match) {
            try {
                return JSON.parse("[".concat(match[1], "]"));
            }
            catch (err) {
                console.error('Failed to parse global tags:', err);
            }
        }
        return [];
    };
    CardsServiceV2.prototype.generateFolderSummary = function (stats, totalFiles) {
        return "Processed ".concat(totalFiles, " files: ").concat(stats.created, " created, ").concat(stats.updated, " updated, ").concat(stats.deleted, " deleted, ").concat(stats.errors, " errors, ").concat(stats.skipped, " skipped");
    };
    CardsServiceV2.prototype.applyNotificationToStats = function (notification, stats) {
        if (notification.includes('inserted') || notification.includes('created')) {
            var match = notification.match(/(\d+)/);
            if (match)
                stats.created += parseInt(match[1]);
        }
        else if (notification.includes('updated')) {
            var match = notification.match(/(\d+)/);
            if (match)
                stats.updated += parseInt(match[1]);
        }
        else if (notification.includes('deleted')) {
            var match = notification.match(/(\d+)/);
            if (match)
                stats.deleted += parseInt(match[1]);
        }
        else if (notification.includes('nothing') || notification.includes('up to date')) {
            stats.skipped++;
        }
        else if (notification.includes('error') || notification.includes('Error')) {
            stats.errors++;
        }
    };
    return CardsServiceV2;
}());

var Ob8AnkiPlugin = /** @class */ (function (_super) {
    __extends(Ob8AnkiPlugin, _super);
    function Ob8AnkiPlugin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Ob8AnkiPlugin.prototype.onload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var anki, _a, statusBar;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        obsidian.addIcon("ob8anki", flashcardsIcon);
                        anki = new Anki();
                        _a = this;
                        return [4 /*yield*/, this.loadData()];
                    case 1:
                        _a.settings = (_b.sent()) || this.getDefaultSettings();
                        // 初始化多语言管理器
                        i18n.setLanguage(this.settings.language);
                        this.cardsService = new CardsServiceV2(this.app, this.settings);
                        statusBar = this.addStatusBarItem();
                        this.addCommand({
                            id: 'generate-flashcard-current-file',
                            name: t('commands.generateCurrentFile'),
                            checkCallback: function (checking) {
                                var activeFile = _this.app.workspace.getActiveFile();
                                if (activeFile) {
                                    if (!checking) {
                                        _this.generateCards(activeFile);
                                    }
                                    return true;
                                }
                                return false;
                            }
                        });
                        this.addCommand({
                            id: 'generate-flashcard-all-files',
                            name: t('commands.generateAllFiles'),
                            callback: function () {
                                _this.generateCardsForAllFiles();
                            }
                        });
                        this.addRibbonIcon('ob8anki', t('commands.generateFlashcards'), function () {
                            var activeFile = _this.app.workspace.getActiveFile();
                            // Check user preference for ribbon icon behavior
                            switch (_this.settings.ribbonAction) {
                                case "all":
                                    _this.generateCardsForAllFiles();
                                    return;
                                case "folder":
                                    if (activeFile) {
                                        _this.generateCardsForCurrentFolder();
                                    }
                                    else {
                                        new ConfirmationModal(_this.app, t('ui.processAllFilesPrompt'), function () { return _this.generateCardsForAllFiles(); }).open();
                                    }
                                    return;
                                case "single":
                                default:
                                    if (activeFile) {
                                        _this.generateCards(activeFile);
                                    }
                                    else {
                                        new ConfirmationModal(_this.app, t('ui.processAllFilesPrompt'), function () { return _this.generateCardsForAllFiles(); }).open();
                                    }
                            }
                        });
                        this.addSettingTab(new SettingsTab(this.app, this));
                        this.registerInterval(window.setInterval(function () {
                            return anki.ping().then(function () { return statusBar.setText('Anki ⚡️'); }).catch(function () { return statusBar.setText(''); });
                        }, 15 * 1000));
                        return [2 /*return*/];
                }
            });
        });
    };
    Ob8AnkiPlugin.prototype.onunload = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.saveData(this.settings)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Ob8AnkiPlugin.prototype.getDefaultSettings = function () {
        return {
            contextAwareMode: true,
            sourceSupport: false,
            codeHighlightSupport: false,
            inlineID: false,
            contextSeparator: " > ",
            deck: "Default",
            folderBasedDeck: true,
            flashcardsTag: "card",
            inlineSeparator: "::",
            inlineSeparatorReverse: ":::",
            defaultAnkiTag: "obsidian",
            ankiConnectPermission: false,
            ribbonAction: "single",
            showNoChangesNotice: true,
            language: DEFAULT_LANGUAGE // 默认语言设置为中文
        };
    };
    Ob8AnkiPlugin.prototype.generateCards = function (activeFile) {
        this.cardsService.execute(activeFile).then(function (res) {
            var e_1, _a;
            try {
                for (var res_1 = __values(res), res_1_1 = res_1.next(); !res_1_1.done; res_1_1 = res_1.next()) {
                    var r = res_1_1.value;
                    new obsidian.Notice(r, noticeTimeout);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (res_1_1 && !res_1_1.done && (_a = res_1.return)) _a.call(res_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            console.log(res);
        }).catch(function (err) {
            console.error('生成卡片时发生错误:', err);
            // 检查是否是版本兼容性错误
            if (err.message && err.message.includes('检测到旧格式的卡片ID')) {
                new obsidian.Notice('检测到旧格式的卡片ID！\n\n' +
                    '请到 设置 → Ob8Anki → 升级旧卡片ID格式 进行升级。\n\n' +
                    '升级后即可正常使用插件功能。', 10000);
            }
            else {
                new obsidian.Notice("\u751F\u6210\u5361\u7247\u65F6\u53D1\u751F\u9519\u8BEF: ".concat(err.message || err), noticeTimeout);
            }
        });
    };
    Ob8AnkiPlugin.prototype.generateCardsForCurrentFolder = function () {
        var _this = this;
        var _a;
        var activeFile = this.app.workspace.getActiveFile();
        if (!activeFile) {
            new obsidian.Notice(t('ui.openFileFirst'), noticeTimeout);
            return;
        }
        var folderPath = (_a = activeFile.parent) === null || _a === void 0 ? void 0 : _a.path;
        if (!folderPath) {
            new obsidian.Notice(t('ui.cannotDetermineFolder'), noticeTimeout);
            return;
        }
        // Create progress element
        var progressContainer = document.createElement('div');
        progressContainer.className = 'ob8anki-progress';
        progressContainer.innerHTML = "\n\t\t\t<div>".concat(t('ui.processingProgress'), ": <span id=\"ob8anki-current\">0</span>/<span id=\"ob8anki-total\">").concat(t('ui.calculating'), "</span></div>\n\t\t\t<div>").concat(t('ui.currentFile'), ": <span id=\"ob8anki-filename\">").concat(t('ui.preparing'), "</span></div>\n\t\t\t<div>").concat(t('ui.currentFolder'), ": ").concat(folderPath, "</div>\n\t\t\t<div class=\"ob8anki-progress-bar\" style=\"width: 0%\"></div>\n\t\t");
        document.body.appendChild(progressContainer);
        // Get elements for updating
        var currentElement = document.getElementById('ob8anki-current');
        var filenameElement = document.getElementById('ob8anki-filename');
        var progressBarElement = progressContainer.querySelector('.ob8anki-progress-bar');
        // Progress callback function
        var updateProgress = function (current, total, filename) {
            if (currentElement)
                currentElement.textContent = current.toString();
            if (filenameElement)
                filenameElement.textContent = filename;
            if (progressBarElement) {
                var percentage = Math.round((current / total) * 100);
                progressBarElement.setAttribute('style', "width: ".concat(percentage, "%"));
            }
        };
        // Process folder files with progress tracking
        this.cardsService.executeFolder(folderPath, updateProgress).then(function (res) {
            // Remove progress element
            document.body.removeChild(progressContainer);
            // Show results in a modal for better readability
            new ResultsModal(_this.app, "".concat(t('ui.folderProcessingResults'), " \"").concat(folderPath, "\""), res).open();
            // Also log results to console
            console.log("Flashcards generation for folder \"".concat(folderPath, "\" completed:"), res);
        }).catch(function (err) {
            // Remove progress element and show error
            document.body.removeChild(progressContainer);
            console.error('处理文件夹时发生错误:', err);
            // 检查是否是版本兼容性错误
            if (err.message && err.message.includes('检测到旧格式的卡片ID')) {
                new obsidian.Notice('检测到旧格式的卡片ID！\n\n' +
                    '请到 设置 → Ob8Anki → 升级旧卡片ID格式 进行升级。\n\n' +
                    '升级后即可正常使用插件功能。', 10000);
            }
            else {
                new obsidian.Notice("".concat(t('ui.processingError'), " \"").concat(folderPath, "\": ").concat(err.message || t('ui.unknownError')), noticeTimeout);
            }
        });
    };
    Ob8AnkiPlugin.prototype.generateCardsForAllFiles = function () {
        var _this = this;
        // Get total number of files
        var totalFiles = this.app.vault.getMarkdownFiles().length;
        // Create progress element
        var progressContainer = document.createElement('div');
        progressContainer.className = 'ob8anki-progress';
        progressContainer.innerHTML = "\n\t\t\t<div>".concat(t('ui.processingProgress'), ": <span id=\"ob8anki-current\">0</span>/<span id=\"ob8anki-total\">").concat(totalFiles, "</span></div>\n\t\t\t<div>").concat(t('ui.currentFile'), ": <span id=\"ob8anki-filename\">").concat(t('ui.preparing'), "</span></div>\n\t\t\t<div class=\"ob8anki-progress-bar\" style=\"width: 0%\"></div>\n\t\t");
        document.body.appendChild(progressContainer);
        // Get elements for updating
        var currentElement = document.getElementById('ob8anki-current');
        var filenameElement = document.getElementById('ob8anki-filename');
        var progressBarElement = progressContainer.querySelector('.ob8anki-progress-bar');
        // Progress callback function
        var updateProgress = function (current, total, filename) {
            if (currentElement)
                currentElement.textContent = current.toString();
            if (filenameElement)
                filenameElement.textContent = filename;
            if (progressBarElement) {
                var percentage = Math.round((current / total) * 100);
                progressBarElement.setAttribute('style', "width: ".concat(percentage, "%"));
            }
        };
        // Process all files with progress tracking
        this.cardsService.executeAll(updateProgress).then(function (res) {
            // Remove progress element
            document.body.removeChild(progressContainer);
            // Show results in a modal for better readability
            new ResultsModal(_this.app, t('ui.flashcardsGenerationResults'), res).open();
            // Also log results to console
            console.log("Flashcards generation for all files completed:", res);
        }).catch(function (err) {
            // Remove progress element and show error
            document.body.removeChild(progressContainer);
            console.error('处理所有文件时发生错误:', err);
            // 检查是否是版本兼容性错误
            if (err.message && err.message.includes('检测到旧格式的卡片ID')) {
                new obsidian.Notice('检测到旧格式的卡片ID！\n\n' +
                    '请到 设置 → Ob8Anki → 升级旧卡片ID格式 进行升级。\n\n' +
                    '升级后即可正常使用插件功能。', 10000);
            }
            else {
                new obsidian.Notice("".concat(t('ui.processingError'), ": ").concat(err.message || t('ui.unknownError')), noticeTimeout);
            }
        });
    };
    return Ob8AnkiPlugin;
}(obsidian.Plugin));
// Modal for confirmation dialogs
var ConfirmationModal = /** @class */ (function (_super) {
    __extends(ConfirmationModal, _super);
    function ConfirmationModal(app, message, onConfirm) {
        var _this = _super.call(this, app) || this;
        _this.message = message;
        _this.onConfirm = onConfirm;
        return _this;
    }
    ConfirmationModal.prototype.onOpen = function () {
        var _this = this;
        var contentEl = this.contentEl;
        contentEl.createEl("h2", { text: t('ui.confirmation') });
        contentEl.createEl("p", { text: this.message });
        var buttonContainer = contentEl.createDiv();
        buttonContainer.addClass("ob8anki-modal-buttons");
        var confirmButton = buttonContainer.createEl("button", { text: t('ui.yes') });
        confirmButton.addEventListener("click", function () {
            _this.onConfirm();
            _this.close();
        });
        var cancelButton = buttonContainer.createEl("button", { text: t('ui.no') });
        cancelButton.addEventListener("click", function () {
            _this.close();
        });
    };
    ConfirmationModal.prototype.onClose = function () {
        var contentEl = this.contentEl;
        contentEl.empty();
    };
    return ConfirmationModal;
}(obsidian.Modal));
// Modal for displaying results
var ResultsModal = /** @class */ (function (_super) {
    __extends(ResultsModal, _super);
    function ResultsModal(app, title, results) {
        var _this = _super.call(this, app) || this;
        _this.title = title;
        _this.results = results;
        return _this;
    }
    ResultsModal.prototype.onOpen = function () {
        var e_2, _a;
        var _this = this;
        var contentEl = this.contentEl;
        contentEl.createEl("h2", { text: this.title });
        var resultsContainer = contentEl.createDiv();
        resultsContainer.addClass("ob8anki-results-container");
        if (this.results.length > 0) {
            var resultsList = resultsContainer.createEl("ul");
            try {
                for (var _b = __values(this.results), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var result = _c.value;
                    resultsList.createEl("li", { text: result });
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        else {
            resultsContainer.createEl("p", { text: t('ui.noResultsToDisplay') });
        }
        var buttonContainer = contentEl.createDiv();
        buttonContainer.addClass("ob8anki-modal-buttons");
        var closeButton = buttonContainer.createEl("button", { text: t('ui.close') });
        closeButton.addEventListener("click", function () {
            _this.close();
        });
    };
    ResultsModal.prototype.onClose = function () {
        var contentEl = this.contentEl;
        contentEl.empty();
    };
    return ResultsModal;
}(obsidian.Modal));

module.exports = Ob8AnkiPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
