'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

// 自动生成文件：构建阶段由 scripts/build-highlight-assets.js 生成
// 请勿手动修改
var highlightjsBase64 = "";
var highlightCssDarkBase64 = "LyohCiAgVGhlbWU6IEdvb2dsZSBEYXJrCiAgQXV0aG9yOiBTZXRoIFdyaWdodCAoaHR0cDovL3NldGhhd3JpZ2h0LmNvbSkKICBMaWNlbnNlOiB+IE1JVCAob3IgbW9yZSBwZXJtaXNzaXZlKSBbdmlhIGJhc2UxNi1zY2hlbWVzLXNvdXJjZV0KICBNYWludGFpbmVyOiBAaGlnaGxpZ2h0anMvY29yZS10ZWFtCiAgVmVyc2lvbjogMjAyMS4wOS4wCiovcHJlIGNvZGUuaGxqc3tkaXNwbGF5OmJsb2NrO292ZXJmbG93LXg6YXV0bztwYWRkaW5nOjFlbX1jb2RlLmhsanN7cGFkZGluZzozcHggNXB4fS5obGpze2NvbG9yOiNjNWM4YzY7YmFja2dyb3VuZDojMWQxZjIxfS5obGpzIDo6c2VsZWN0aW9uLC5obGpzOjpzZWxlY3Rpb257YmFja2dyb3VuZC1jb2xvcjojMzczYjQxO2NvbG9yOiNjNWM4YzZ9LmhsanMtY29tbWVudHtjb2xvcjojOTY5ODk2fS5obGpzLXRhZ3tjb2xvcjojYjRiN2I0fS5obGpzLW9wZXJhdG9yLC5obGpzLXB1bmN0dWF0aW9uLC5obGpzLXN1YnN0e2NvbG9yOiNjNWM4YzZ9LmhsanMtb3BlcmF0b3J7b3BhY2l0eTouN30uaGxqcy1idWxsZXQsLmhsanMtZGVsZXRpb24sLmhsanMtbmFtZSwuaGxqcy1zZWxlY3Rvci10YWcsLmhsanMtdGVtcGxhdGUtdmFyaWFibGUsLmhsanMtdmFyaWFibGV7Y29sb3I6I2NjMzQyYn0uaGxqcy1hdHRyLC5obGpzLWxpbmssLmhsanMtbGl0ZXJhbCwuaGxqcy1udW1iZXIsLmhsanMtc3ltYm9sLC5obGpzLXZhcmlhYmxlLmNvbnN0YW50X3tjb2xvcjojZjk2YTM4fS5obGpzLWNsYXNzIC5obGpzLXRpdGxlLC5obGpzLXRpdGxlLC5obGpzLXRpdGxlLmNsYXNzX3tjb2xvcjojZmJhOTIyfS5obGpzLXN0cm9uZ3tmb250LXdlaWdodDo3MDA7Y29sb3I6I2ZiYTkyMn0uaGxqcy1hZGRpdGlvbiwuaGxqcy1jb2RlLC5obGpzLXN0cmluZywuaGxqcy10aXRsZS5jbGFzc18uaW5oZXJpdGVkX197Y29sb3I6IzE5ODg0NH0uaGxqcy1hdHRyaWJ1dGUsLmhsanMtYnVpbHRfaW4sLmhsanMtZG9jdGFnLC5obGpzLWZ1bmN0aW9uIC5obGpzLXRpdGxlLC5obGpzLWtleXdvcmQuaGxqcy1hdHJ1bGUsLmhsanMtcXVvdGUsLmhsanMtcmVnZXhwLC5obGpzLXNlY3Rpb24sLmhsanMtdGl0bGUuZnVuY3Rpb25fLC5ydWJ5IC5obGpzLXByb3BlcnR5e2NvbG9yOiMzOTcxZWR9LmRpZmYgLmhsanMtbWV0YSwuaGxqcy1rZXl3b3JkLC5obGpzLXRlbXBsYXRlLXRhZywuaGxqcy10eXBle2NvbG9yOiNhMzZhYzd9LmhsanMtZW1waGFzaXN7Y29sb3I6I2EzNmFjNztmb250LXN0eWxlOml0YWxpY30uaGxqcy1tZXRhLC5obGpzLW1ldGEgLmhsanMta2V5d29yZCwuaGxqcy1tZXRhIC5obGpzLXN0cmluZ3tjb2xvcjojMzk3MWVkfS5obGpzLW1ldGEgLmhsanMta2V5d29yZCwuaGxqcy1tZXRhLWtleXdvcmR7Zm9udC13ZWlnaHQ6NzAwfQ==";
var highlightCssLightBase64 = "LyohCiAgVGhlbWU6IEdvb2dsZSBMaWdodAogIEF1dGhvcjogU2V0aCBXcmlnaHQgKGh0dHA6Ly9zZXRoYXdyaWdodC5jb20pCiAgTGljZW5zZTogfiBNSVQgKG9yIG1vcmUgcGVybWlzc2l2ZSkgW3ZpYSBiYXNlMTYtc2NoZW1lcy1zb3VyY2VdCiAgTWFpbnRhaW5lcjogQGhpZ2hsaWdodGpzL2NvcmUtdGVhbQogIFZlcnNpb246IDIwMjEuMDkuMAoqL3ByZSBjb2RlLmhsanN7ZGlzcGxheTpibG9jaztvdmVyZmxvdy14OmF1dG87cGFkZGluZzoxZW19Y29kZS5obGpze3BhZGRpbmc6M3B4IDVweH0uaGxqc3tjb2xvcjojMzczYjQxO2JhY2tncm91bmQ6I2ZmZn0uaGxqcyA6OnNlbGVjdGlvbiwuaGxqczo6c2VsZWN0aW9ue2JhY2tncm91bmQtY29sb3I6I2M1YzhjNjtjb2xvcjojMzczYjQxfS5obGpzLWNvbW1lbnR7Y29sb3I6I2I0YjdiNH0uaGxqcy10YWd7Y29sb3I6Izk2OTg5Nn0uaGxqcy1vcGVyYXRvciwuaGxqcy1wdW5jdHVhdGlvbiwuaGxqcy1zdWJzdHtjb2xvcjojMzczYjQxfS5obGpzLW9wZXJhdG9ye29wYWNpdHk6Ljd9LmhsanMtYnVsbGV0LC5obGpzLWRlbGV0aW9uLC5obGpzLW5hbWUsLmhsanMtc2VsZWN0b3ItdGFnLC5obGpzLXRlbXBsYXRlLXZhcmlhYmxlLC5obGpzLXZhcmlhYmxle2NvbG9yOiNjYzM0MmJ9LmhsanMtYXR0ciwuaGxqcy1saW5rLC5obGpzLWxpdGVyYWwsLmhsanMtbnVtYmVyLC5obGpzLXN5bWJvbCwuaGxqcy12YXJpYWJsZS5jb25zdGFudF97Y29sb3I6I2Y5NmEzOH0uaGxqcy1jbGFzcyAuaGxqcy10aXRsZSwuaGxqcy10aXRsZSwuaGxqcy10aXRsZS5jbGFzc197Y29sb3I6I2ZiYTkyMn0uaGxqcy1zdHJvbmd7Zm9udC13ZWlnaHQ6NzAwO2NvbG9yOiNmYmE5MjJ9LmhsanMtYWRkaXRpb24sLmhsanMtY29kZSwuaGxqcy1zdHJpbmcsLmhsanMtdGl0bGUuY2xhc3NfLmluaGVyaXRlZF9fe2NvbG9yOiMxOTg4NDR9LmhsanMtYXR0cmlidXRlLC5obGpzLWJ1aWx0X2luLC5obGpzLWRvY3RhZywuaGxqcy1mdW5jdGlvbiAuaGxqcy10aXRsZSwuaGxqcy1rZXl3b3JkLmhsanMtYXRydWxlLC5obGpzLXF1b3RlLC5obGpzLXJlZ2V4cCwuaGxqcy1zZWN0aW9uLC5obGpzLXRpdGxlLmZ1bmN0aW9uXywucnVieSAuaGxqcy1wcm9wZXJ0eXtjb2xvcjojMzk3MWVkfS5kaWZmIC5obGpzLW1ldGEsLmhsanMta2V5d29yZCwuaGxqcy10ZW1wbGF0ZS10YWcsLmhsanMtdHlwZXtjb2xvcjojYTM2YWM3fS5obGpzLWVtcGhhc2lze2NvbG9yOiNhMzZhYzc7Zm9udC1zdHlsZTppdGFsaWN9LmhsanMtbWV0YSwuaGxqcy1tZXRhIC5obGpzLWtleXdvcmQsLmhsanMtbWV0YSAuaGxqcy1zdHJpbmd7Y29sb3I6IzM5NzFlZH0uaGxqcy1tZXRhIC5obGpzLWtleXdvcmQsLmhsanMtbWV0YS1rZXl3b3Jke2ZvbnQtd2VpZ2h0OjcwMH0=";
var highlightInitBase64 = "KGZ1bmN0aW9uKCl7CiAgZnVuY3Rpb24gcmVhZHkoZm4pe2lmKGRvY3VtZW50LnJlYWR5U3RhdGU9PT0nbG9hZGluZycpe2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLGZuKTt9ZWxzZXtmbigpO319CiAgcmVhZHkoZnVuY3Rpb24oKXsKICAgIGlmKHR5cGVvZiBobGpzPT09J3VuZGVmaW5lZCcpIHJldHVybjsKICAgIHRyeSB7CiAgICAgIGhsanMuY29uZmlndXJlKHtjbGFzc1ByZWZpeDogJ2hsanMtJ30pOwogICAgfSBjYXRjaChlKSB7fQogICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgncHJlIGNvZGUnKS5mb3JFYWNoKGZ1bmN0aW9uKGJsb2NrKXsKICAgICAgdHJ5IHsgaGxqcy5oaWdobGlnaHRFbGVtZW50KGJsb2NrKTsgfSBjYXRjaChlKSB7fQogICAgfSk7CiAgfSk7Cn0pKCk7";
// 注入到 Anki 模板的脚本/样式占位（媒体文件名固定）
var codeScript = "<link rel=\"stylesheet\" href=\"_highlight.css\">\n<script src=\"_highlight.js\"></script>\n<script src=\"_highlightInit.js\"></script>";

var noticeTimeout = 15 * 1000;
var sourceDeckExtension = "-source";
var flashcardsIcon = "<path fill=\"currentColor\" stroke=\"currentColor\" d=\"m98.69029,0.55335l-54.30674,0a1.1128,1.14693 0 0 0 -1.1128,1.15682l0,26.36956l-42.32491,14.67282a1.1128,1.14693 0 0 0 -0.7003,1.45344c0.09593,0.30651 9.89052,30.40359 13.18097,40.38981c2.6573,8.05819 2.20642,13.55555 2.19683,13.61488a1.1128,1.14693 0 0 0 0.4221,0.98873a1.08402,1.11727 0 0 0 0.69071,0.24718a1.10321,1.13704 0 0 0 0.35495,-0.05932l51.47676,-17.79722a1.1224,1.15682 0 0 0 0.75786,-0.98873c0,-0.2373 0.58518,-5.71489 -2.16805,-14.14879c-0.62355,-1.92803 -1.48694,-4.56795 -2.47503,-7.60337l34.00766,0a1.1128,1.14693 0 0 0 1.1224,-1.14693l0,-55.99205a1.1224,1.15682 0 0 0 -1.1224,-1.15682zm-31.55182,79.09878l-49.24156,17.02601a41.33682,42.60458 0 0 0 -2.35991,-12.85355c-2.87794,-8.86895 -11.02251,-33.73563 -12.81643,-39.25277l49.35668,-17.115c1.8131,5.53691 10.00564,30.65078 12.96032,39.70759a35.96466,37.06766 0 0 1 2.1009,12.48772zm30.43902,-23.07707l-33.65272,0c-4.25935,-13.03152 -10.08238,-30.9474 -10.08238,-30.9474a1.1224,1.15682 0  0 0 -1.41978,-0.72178l-6.91665,2.39274l0,-24.44152l52.07154,0l0,53.71796z\"/>";
var sourceField = "<br><br>\r\n<small>Source: {{Source}}</small>";

// 国际化类型定义文件
// 可用语言列表
var AVAILABLE_LANGUAGES = [
    { code: 'zh', name: 'Chinese', nativeName: '中文' },
    { code: 'en', name: 'English', nativeName: 'English' },
    { code: 'de', name: 'German', nativeName: 'Deutsch' }
];
// 默认语言
var DEFAULT_LANGUAGE = 'zh';

var zhTranslations = {
    settings: {
        title: '闪卡 - 设置',
        language: {
            name: '界面语言',
            desc: '选择界面显示语言',
            chinese: '中文',
            english: 'English',
            german: 'Deutsch'
        },
        ankiConnect: {
            description: '这只需要做一次。打开 Anki 并点击按钮来授予权限。',
            requirement: '需要 AnkiConnect 插件',
            givePermission: '授予权限',
            grantPermission: '授予权限',
            permissionGranted: 'Anki Connect 权限已授予',
            permissionNotGranted: 'AnkiConnect 权限未授予',
            connectionError: '出现错误，Anki 是否已打开？',
            testAnki: '测试 Anki',
            testDesc: '测试 Anki 和 Obsidian 之间的连接是否正常工作。',
            test: '测试',
            testSuccess: 'Anki 连接正常',
            testFailed: 'Anki 连接失败'
        },
        general: {
            title: '通用设置',
            contextAware: {
                name: '上下文感知模式',
                desc: '将祖先标题添加到闪卡的问题中。'
            },
            sourceSupport: {
                name: '源支持',
                desc: '为每张卡片添加源，即指向原始卡片的链接。注意：没有源支持的旧卡片无法更新。'
            },
            inlineID: {
                name: '内联 ID 支持',
                desc: '在内联卡片的行末添加 ID。'
            },
            folderBasedDeck: {
                name: '基于文件夹的牌组名称',
                desc: '根据文件夹路径自动生成牌组名称。'
            },
            defaultDeck: {
                name: '默认牌组名称',
                desc: '未指定时卡片将添加到的默认牌组名称。',
                placeholder: '牌组::子牌组',
                error: '牌组名称必须至少包含 1 个字符'
            },
            defaultAnkiTag: {
                name: '默认 Anki 标签',
                desc: '此标签将添加到 Anki 上生成的每张卡片',
                placeholder: 'Anki 标签',
                noTagNotice: '不会添加默认标签'
            },
            codeHighlight: {
                name: '代码高亮',
                desc: '在 Anki 卡片中注入 highlight.js 并高亮代码块',
                theme: {
                    name: '高亮主题',
                    desc: '选择用于 Anki 卡片的代码高亮主题'
                },
                themes: {
                    googleDark: 'Google Dark',
                    googleLight: 'Google Light'
                }
            }
        },
        cardIdentification: {
            title: '卡片识别',
            flashcardsTag: {
                name: '闪卡 #标签',
                desc: '用于识别笔记中闪卡的标签（不区分大小写）。',
                placeholder: '卡片',
                error: '标签必须至少包含 1 个字符'
            },
            inlineSeparator: {
                name: '内联卡片分隔符',
                desc: '用于识别笔记中内联卡片的分隔符。',
                lengthError: '分隔符必须至少包含 1 个字符',
                duplicateError: '分隔符必须与内联反向分隔符不同',
                changed: '分隔符已更改'
            },
            inlineReverseSeparator: {
                name: '内联反向卡片分隔符',
                desc: '用于识别笔记中内联反向卡片的分隔符。',
                lengthError: '分隔符必须至少包含 1 个字符',
                duplicateError: '分隔符必须与内联分隔符不同',
                changed: '分隔符已更改'
            }
        },
        ribbonIcon: {
            title: '功能区图标行为',
            action: {
                name: '功能区图标操作',
                desc: '选择点击功能区图标时的操作',
                single: '处理当前文件',
                folder: '处理当前文件夹',
                all: '处理所有文件'
            }
        },
        notifications: {
            title: '通知设置',
            showNoChanges: {
                name: '显示无更改通知',
                desc: '当文件不需要更改时显示通知'
            }
        }
    },
    // 命令相关
    commands: {
        generateCurrentFile: '为当前文件生成闪卡',
        generateAllFiles: '为所有文件生成闪卡',
        generateFlashcards: '生成闪卡'
    },
    // 界面相关
    ui: {
        processingProgress: '处理进度',
        currentFile: '当前文件',
        currentFolder: '当前文件夹',
        calculating: '计算中...',
        preparing: '准备中...',
        folderProcessingResults: '文件夹处理结果',
        flashcardsGenerationResults: '记忆卡片生成结果',
        processingError: '处理时出错',
        unknownError: '未知错误',
        openFileFirst: '请先打开一个文件以确定要处理的文件夹',
        cannotDetermineFolder: '无法确定当前文件夹',
        processAllFilesPrompt: '当前没有打开文件。是否要处理库中的所有文件？',
        confirmation: '确认',
        yes: '是',
        no: '否',
        noResultsToDisplay: '没有结果可显示。',
        close: '关闭'
    },
    processing: {
        errors: {
            ankiNotOpen: 'Anki 未打开或 AnkiConnect 未运行',
            couldNotUpdateDeck: '无法更新牌组',
            couldNotUpdateFile: '无法更新文件',
            couldNotUploadMedia: '无法上传媒体文件',
            couldNotReadMedia: '无法读取媒体文件',
            couldNotWriteCards: '无法写入卡片',
            couldNotUpdateCards: '无法更新卡片',
            couldNotDeleteCard: '无法删除卡片',
            somethingWentWrong: '出现了问题',
            unknownError: '未知错误',
            failedToIssueRequest: '请求发送失败',
            unexpectedNumberOfFields: '字段数量不符合预期',
            missingErrorField: '缺少错误字段',
            missingResultField: '缺少结果字段'
        },
        success: {
            cardsMoved: '卡片已移动到新牌组',
            nothingToDo: '无需操作。一切都是最新的',
            folderProcessed: '文件夹已处理。没有需要更改的内容。',
            noChangesNeeded: '没有需要更改的内容'
        },
        stats: {
            filesProcessed: '已处理文件',
            cardsCreated: '已创建卡片',
            cardsUpdated: '已更新卡片',
            cardsDeleted: '已删除卡片',
            cardsSkipped: '已跳过卡片',
            cardsError: '错误卡片'
        }
    },
    notifications: {
        insertedSuccessfully: '创建成功',
        updatedSuccessfully: '更新成功',
        deletedSuccessfully: '删除成功',
        error: '错误',
        nothingToDo: '无需更改',
        unknownError: '未知错误',
        cards: '张卡片',
        allFilesProcessedNoChanges: '所有文件已处理。没有需要更改的内容。',
        processingComplete: '处理完成: 共处理 {{processed}} 个文件, 创建 {{created}} 张卡片, 更新 {{updated}} 张卡片, 删除 {{deleted}} 张卡片, 跳过 {{skipped}} 个文件, 错误 {{errors}} 个',
        cardNotInAnki: 'ID为 {{id}} 的卡片不在 Anki 中！',
        cardsMovedToDeck: '卡片已移动到新牌组',
        everythingUpToDate: '一切都是最新的',
        couldNotUploadMedia: '无法上传媒体文件',
        couldNotReadMedia: '无法读取媒体文件',
        couldNotWriteCards: '无法在 Anki 中写入卡片',
        couldNotUpdateCards: '无法在 Anki 中更新卡片',
        couldNotDeleteCard: '无法从 Anki 中删除卡片',
        couldNotUpdateDeck: '无法更新牌组',
        couldNotUpdateFile: '无法更新文件',
        ankiConnectNotRunning: 'Anki Connect 未运行。请确保 Anki 已打开并安装了 AnkiConnect 插件。',
        ankiConnectTestSuccess: 'Anki Connect 连接成功！',
        ankiConnectTestFailed: 'Anki Connect 连接失败',
        settingsUpdated: '设置已更新',
        languageChanged: '语言已切换'
    },
    anki: {
        models: {
            frontBack: '正面 / 背面',
            backFront: '背面 / 正面',
            cloze: '填空',
            spaced: '间隔'
        },
        fields: {
            front: '正面',
            back: '背面',
            prompt: '提示',
            text: '文本',
            extra: '额外',
            source: '来源'
        }
    }
};

var enTranslations = {
    settings: {
        title: 'Flashcards - Settings',
        language: {
            name: 'Interface Language',
            desc: 'Choose interface display language',
            chinese: '中文',
            english: 'English',
            german: 'Deutsch'
        },
        ankiConnect: {
            description: 'This only needs to be done once. Open Anki and click the button to grant permission.',
            requirement: 'AnkiConnect plugin required',
            givePermission: 'Give Permission',
            grantPermission: 'Grant Permission',
            permissionGranted: 'Anki Connect permission granted',
            permissionNotGranted: 'AnkiConnect permission not granted',
            connectionError: 'An error occurred, is Anki open?',
            testAnki: 'Test Anki',
            testDesc: 'Test if the connection between Anki and Obsidian is working properly.',
            test: 'Test',
            testSuccess: 'Anki connection works',
            testFailed: 'Anki connection failed'
        },
        general: {
            title: 'General Settings',
            contextAware: {
                name: 'Context-aware mode',
                desc: 'Add ancestor headings to flashcard questions.'
            },
            sourceSupport: {
                name: 'Source support',
                desc: 'Add source to each card, i.e., a link to the original card. Note: Old cards without source support cannot be updated.'
            },
            inlineID: {
                name: 'Inline ID support',
                desc: 'Add ID at the end of inline card lines.'
            },
            folderBasedDeck: {
                name: 'Folder-based deck name',
                desc: 'Automatically generate deck names based on folder path.'
            },
            defaultDeck: {
                name: 'Default deck name',
                desc: 'Default deck name where cards will be added when not specified.',
                placeholder: 'Deck::Subdeck',
                error: 'Deck name must contain at least 1 character'
            },
            defaultAnkiTag: {
                name: 'Default Anki tag',
                desc: 'This tag will be added to every card generated on Anki',
                placeholder: 'Anki tag',
                noTagNotice: 'No default tag will be added'
            },
            codeHighlight: {
                name: 'Code Highlight',
                desc: 'Inject highlight.js and highlight code blocks in Anki cards',
                theme: {
                    name: 'Highlight Theme',
                    desc: 'Choose the code highlight theme for Anki cards'
                },
                themes: {
                    googleDark: 'Google Dark',
                    googleLight: 'Google Light'
                }
            }
        },
        cardIdentification: {
            title: 'Cards Identification',
            flashcardsTag: {
                name: 'Flashcards #tag',
                desc: 'Tag used to identify flashcards in notes (case insensitive).',
                placeholder: 'card',
                error: 'Tag must contain at least 1 character'
            },
            inlineSeparator: {
                name: 'Inline card separator',
                desc: 'Separator used to identify inline cards in notes.',
                lengthError: 'Separator must contain at least 1 character',
                duplicateError: 'Separator must be different from inline reverse separator',
                changed: 'Separator changed'
            },
            inlineReverseSeparator: {
                name: 'Inline reverse card separator',
                desc: 'Separator used to identify inline reverse cards in notes.',
                lengthError: 'Separator must contain at least 1 character',
                duplicateError: 'Separator must be different from inline separator',
                changed: 'Separator changed'
            }
        },
        ribbonIcon: {
            title: 'Ribbon Icon Behavior',
            action: {
                name: 'Ribbon icon action',
                desc: 'Choose action when clicking the ribbon icon',
                single: 'Process current file',
                folder: 'Process current folder',
                all: 'Process all files'
            }
        },
        notifications: {
            title: 'Notification Settings',
            showNoChanges: {
                name: 'Show no changes notice',
                desc: 'Show notification when file needs no changes'
            }
        }
    },
    processing: {
        errors: {
            ankiNotOpen: 'Anki is not open or AnkiConnect is not running',
            couldNotUpdateDeck: 'Could not update deck',
            couldNotUpdateFile: 'Could not update file',
            couldNotUploadMedia: 'Could not upload media file',
            couldNotReadMedia: 'Could not read media file',
            couldNotWriteCards: 'Could not write cards',
            couldNotUpdateCards: 'Could not update cards',
            couldNotDeleteCard: 'Could not delete card',
            somethingWentWrong: 'Something went wrong',
            unknownError: 'Unknown error',
            failedToIssueRequest: 'Failed to issue request',
            unexpectedNumberOfFields: 'Unexpected number of fields',
            missingErrorField: 'Missing error field',
            missingResultField: 'Missing result field'
        },
        success: {
            cardsMoved: 'Cards moved in new deck',
            nothingToDo: 'Nothing to do. Everything is up to date',
            folderProcessed: 'Folder processed. No changes needed.',
            noChangesNeeded: 'No changes needed'
        },
        stats: {
            filesProcessed: 'Files processed',
            cardsCreated: 'Cards created',
            cardsUpdated: 'Cards updated',
            cardsDeleted: 'Cards deleted',
            cardsSkipped: 'Cards skipped',
            cardsError: 'Cards with errors'
        }
    },
    notifications: {
        insertedSuccessfully: 'Inserted successfully',
        updatedSuccessfully: 'Updated successfully',
        deletedSuccessfully: 'Deleted successfully',
        error: 'Error',
        nothingToDo: 'Nothing to do',
        unknownError: 'Unknown error',
        cards: 'cards',
        allFilesProcessedNoChanges: 'All files processed. No changes needed.',
        processingComplete: 'Processing complete: {{processed}} files processed, {{created}} cards created, {{updated}} cards updated, {{deleted}} cards deleted, {{skipped}} files skipped, {{errors}} errors',
        cardNotInAnki: 'Card with ID {{id}} is not in Anki!',
        cardsMovedToDeck: 'Cards moved to new deck',
        everythingUpToDate: 'Everything is up to date',
        couldNotUploadMedia: 'Could not upload media files',
        couldNotReadMedia: 'Could not read media files',
        couldNotWriteCards: 'Could not write cards to Anki',
        couldNotUpdateCards: 'Could not update cards in Anki',
        couldNotDeleteCard: 'Could not delete card from Anki',
        couldNotUpdateDeck: 'Could not update deck',
        couldNotUpdateFile: 'Could not update file',
        ankiConnectNotRunning: 'Anki Connect is not running. Please ensure Anki is open and AnkiConnect plugin is installed.',
        ankiConnectTestSuccess: 'Anki Connect connection successful!',
        ankiConnectTestFailed: 'Anki Connect connection failed',
        settingsUpdated: 'Settings updated',
        languageChanged: 'Language changed'
    },
    // Commands
    commands: {
        generateCurrentFile: 'Generate for the current file',
        generateAllFiles: 'Generate for all files in vault',
        generateFlashcards: 'Generate flashcards'
    },
    // UI
    ui: {
        processingProgress: 'Processing Progress',
        currentFile: 'Current File',
        currentFolder: 'Current Folder',
        calculating: 'Calculating...',
        preparing: 'Preparing...',
        folderProcessingResults: 'Folder Processing Results',
        flashcardsGenerationResults: 'Flashcards Generation Results',
        processingError: 'Processing Error',
        unknownError: 'Unknown Error',
        openFileFirst: 'Please open a file first to determine the folder to process',
        cannotDetermineFolder: 'Cannot determine current folder',
        processAllFilesPrompt: 'No file is currently open. Would you like to process all files in the vault?',
        confirmation: 'Confirmation',
        yes: 'Yes',
        no: 'No',
        noResultsToDisplay: 'No results to display.',
        close: 'Close'
    },
    anki: {
        models: {
            frontBack: 'Front / Back',
            backFront: 'Back / Front',
            cloze: 'Cloze',
            spaced: 'Spaced'
        },
        fields: {
            front: 'Front',
            back: 'Back',
            prompt: 'Prompt',
            text: 'Text',
            extra: 'Extra',
            source: 'Source'
        }
    }
};

var deTranslations = {
    settings: {
        title: 'Karteikarten - Einstellungen',
        language: {
            name: 'Oberflächensprache',
            desc: 'Wählen Sie die Anzeigesprache der Oberfläche',
            chinese: '中文',
            english: 'English',
            german: 'Deutsch'
        },
        ankiConnect: {
            description: 'Dies muss nur einmal gemacht werden. Öffnen Sie Anki und klicken Sie auf die Schaltfläche, um die Berechtigung zu erteilen.',
            requirement: 'AnkiConnect Plugin erforderlich',
            givePermission: 'Berechtigung erteilen',
            grantPermission: 'Berechtigung gewähren',
            permissionGranted: 'Anki Connect Berechtigung erteilt',
            permissionNotGranted: 'AnkiConnect Berechtigung nicht erteilt',
            connectionError: 'Ein Fehler ist aufgetreten, ist Anki geöffnet?',
            testAnki: 'Anki testen',
            testDesc: 'Testen Sie, ob die Verbindung zwischen Anki und Obsidian ordnungsgemäß funktioniert.',
            test: 'Testen',
            testSuccess: 'Anki-Verbindung funktioniert',
            testFailed: 'Anki-Verbindung fehlgeschlagen'
        },
        general: {
            title: 'Allgemeine Einstellungen',
            contextAware: {
                name: 'Kontextbewusster Modus',
                desc: 'Fügen Sie Vorfahren-Überschriften zu Karteikarten-Fragen hinzu.'
            },
            sourceSupport: {
                name: 'Quellunterstützung',
                desc: 'Fügen Sie jeder Karte eine Quelle hinzu, d.h. einen Link zur ursprünglichen Karte. Hinweis: Alte Karten ohne Quellunterstützung können nicht aktualisiert werden.'
            },
            inlineID: {
                name: 'Inline-ID-Unterstützung',
                desc: 'ID am Ende der Inline-Kartenzeilen hinzufügen.'
            },
            folderBasedDeck: {
                name: 'Ordnerbasierter Stapelname',
                desc: 'Stapelnamen automatisch basierend auf dem Ordnerpfad generieren.'
            },
            defaultDeck: {
                name: 'Standard-Stapelname',
                desc: 'Standard-Stapelname, zu dem Karten hinzugefügt werden, wenn nicht angegeben.',
                placeholder: 'Stapel::Unterstapel',
                error: 'Stapelname muss mindestens 1 Zeichen enthalten'
            },
            defaultAnkiTag: {
                name: 'Standard-Anki-Tag',
                desc: 'Dieses Tag wird zu jeder auf Anki generierten Karte hinzugefügt',
                placeholder: 'Anki-Tag',
                noTagNotice: 'Kein Standard-Tag wird hinzugefügt'
            },
            codeHighlight: {
                name: 'Code-Hervorhebung',
                desc: 'Inject highlight.js und hebe Codeblöcke in Anki-Karten hervor',
                theme: {
                    name: 'Hervorhebungsthema',
                    desc: 'Wählen Sie das Code-Hervorhebungsthema für Anki-Karten'
                },
                themes: {
                    googleDark: 'Google Dark',
                    googleLight: 'Google Light'
                }
            }
        },
        cardIdentification: {
            title: 'Kartenerkennung',
            flashcardsTag: {
                name: 'Karteikarten #Tag',
                desc: 'Tag zur Identifizierung von Karteikarten in Notizen (nicht case-sensitive).',
                placeholder: 'Karte',
                error: 'Tag muss mindestens 1 Zeichen enthalten'
            },
            inlineSeparator: {
                name: 'Inline-Karten-Trennzeichen',
                desc: 'Trennzeichen zur Identifizierung von Inline-Karten in Notizen.',
                lengthError: 'Trennzeichen muss mindestens 1 Zeichen enthalten',
                duplicateError: 'Trennzeichen muss sich vom Inline-Rückwärts-Trennzeichen unterscheiden',
                changed: 'Trennzeichen geändert'
            },
            inlineReverseSeparator: {
                name: 'Inline-Rückwärts-Karten-Trennzeichen',
                desc: 'Trennzeichen zur Identifizierung von Inline-Rückwärts-Karten in Notizen.',
                lengthError: 'Trennzeichen muss mindestens 1 Zeichen enthalten',
                duplicateError: 'Trennzeichen muss sich vom Inline-Trennzeichen unterscheiden',
                changed: 'Trennzeichen geändert'
            }
        },
        ribbonIcon: {
            title: 'Ribbon-Icon-Verhalten',
            action: {
                name: 'Ribbon-Icon-Aktion',
                desc: 'Wählen Sie die Aktion beim Klicken auf das Ribbon-Icon',
                single: 'Aktuelle Datei verarbeiten',
                folder: 'Aktuellen Ordner verarbeiten',
                all: 'Alle Dateien verarbeiten'
            }
        },
        notifications: {
            title: 'Benachrichtigungseinstellungen',
            showNoChanges: {
                name: 'Keine-Änderungen-Benachrichtigung anzeigen',
                desc: 'Benachrichtigung anzeigen, wenn Datei keine Änderungen benötigt'
            }
        }
    },
    processing: {
        errors: {
            ankiNotOpen: 'Fehler: Anki muss mit installiertem AnkiConnect geöffnet sein.',
            couldNotUpdateDeck: 'Fehler: Stapel-Datei konnte nicht aktualisiert werden.',
            couldNotUpdateFile: 'Fehler: Datei konnte nicht aktualisiert werden.',
            couldNotUploadMedia: 'Fehler: Medien konnten nicht hochgeladen werden',
            couldNotReadMedia: 'Fehler: Medien konnten nicht gelesen werden',
            couldNotWriteCards: 'Fehler: Karten konnten nicht in Anki geschrieben werden',
            couldNotUpdateCards: 'Fehler: Karten konnten nicht in Anki aktualisiert werden',
            couldNotDeleteCard: 'Fehler: Karte konnte nicht aus Anki gelöscht werden',
            somethingWentWrong: 'Etwas ist schiefgelaufen',
            unknownError: 'Unbekannter Fehler',
            failedToIssueRequest: 'Anfrage konnte nicht gesendet werden',
            unexpectedNumberOfFields: 'Antwort hat eine unerwartete Anzahl von Feldern',
            missingErrorField: 'Antwort fehlt erforderliches Fehlerfeld',
            missingResultField: 'Antwort fehlt erforderliches Ergebnisfeld'
        },
        success: {
            cardsMoved: 'Karten in neuen Stapel verschoben',
            nothingToDo: 'Nichts zu tun. Alles ist auf dem neuesten Stand',
            folderProcessed: 'Ordner verarbeitet. Keine Änderungen erforderlich.',
            noChangesNeeded: 'Keine Änderungen erforderlich'
        },
        stats: {
            filesProcessed: 'Dateien verarbeitet',
            cardsCreated: 'Karten erstellt',
            cardsUpdated: 'Karten aktualisiert',
            cardsDeleted: 'Karten gelöscht',
            cardsSkipped: 'Karten übersprungen',
            cardsError: 'Karten mit Fehlern'
        }
    },
    // Befehle
    commands: {
        generateCurrentFile: 'Für aktuelle Datei generieren',
        generateAllFiles: 'Für alle Dateien im Tresor generieren',
        generateFlashcards: 'Karteikarten generieren'
    },
    // Benutzeroberfläche
    ui: {
        processingProgress: 'Verarbeitungsfortschritt',
        currentFile: 'Aktuelle Datei',
        currentFolder: 'Aktueller Ordner',
        calculating: 'Berechnung...',
        preparing: 'Vorbereitung...',
        folderProcessingResults: 'Ordner-Verarbeitungsergebnisse',
        flashcardsGenerationResults: 'Karteikarten-Generierungsergebnisse',
        processingError: 'Verarbeitungsfehler',
        unknownError: 'Unbekannter Fehler',
        openFileFirst: 'Bitte öffnen Sie zuerst eine Datei, um den zu verarbeitenden Ordner zu bestimmen',
        cannotDetermineFolder: 'Aktueller Ordner kann nicht bestimmt werden',
        processAllFilesPrompt: 'Derzeit ist keine Datei geöffnet. Möchten Sie alle Dateien im Tresor verarbeiten?',
        confirmation: 'Bestätigung',
        yes: 'Ja',
        no: 'Nein',
        noResultsToDisplay: 'Keine Ergebnisse anzuzeigen.',
        close: 'Schließen'
    },
    notifications: {
        insertedSuccessfully: 'Erfolgreich eingefügt',
        updatedSuccessfully: 'Erfolgreich aktualisiert',
        deletedSuccessfully: 'Erfolgreich gelöscht',
        error: 'Fehler',
        nothingToDo: 'Nichts zu tun',
        unknownError: 'Unbekannter Fehler',
        cards: 'Karten',
        allFilesProcessedNoChanges: 'Alle Dateien verarbeitet. Keine Änderungen erforderlich.',
        processingComplete: 'Verarbeitung abgeschlossen: {{processed}} Dateien verarbeitet, {{created}} Karten erstellt, {{updated}} Karten aktualisiert, {{deleted}} Karten gelöscht, {{skipped}} Dateien übersprungen, {{errors}} Fehler',
        cardNotInAnki: 'Karte mit ID {{id}} ist nicht in Anki!',
        cardsMovedToDeck: 'Karten in neues Deck verschoben',
        everythingUpToDate: 'Alles ist auf dem neuesten Stand',
        couldNotUploadMedia: 'Medien konnten nicht hochgeladen werden',
        couldNotReadMedia: 'Medien konnten nicht gelesen werden',
        couldNotWriteCards: 'Karten konnten nicht in Anki geschrieben werden',
        couldNotUpdateCards: 'Karten konnten nicht in Anki aktualisiert werden',
        couldNotDeleteCard: 'Karte konnte nicht aus Anki gelöscht werden',
        couldNotUpdateDeck: 'Deck konnte nicht aktualisiert werden',
        couldNotUpdateFile: 'Datei konnte nicht aktualisiert werden',
        ankiConnectNotRunning: 'Anki Connect läuft nicht. Bitte stellen Sie sicher, dass Anki geöffnet ist und das AnkiConnect-Plugin installiert ist.',
        ankiConnectTestSuccess: 'Anki Connect Verbindung erfolgreich!',
        ankiConnectTestFailed: 'Anki Connect Verbindung fehlgeschlagen',
        settingsUpdated: 'Einstellungen aktualisiert',
        languageChanged: 'Sprache geändert'
    },
    anki: {
        models: {
            frontBack: 'Vorderseite / Rückseite',
            backFront: 'Rückseite / Vorderseite',
            cloze: 'Lückentext',
            spaced: 'Abstand'
        },
        fields: {
            front: 'Vorderseite',
            back: 'Rückseite',
            prompt: 'Eingabeaufforderung',
            text: 'Text',
            extra: 'Extra',
            source: 'Quelle'
        }
    }
};

// 多语言管理器
/**
 * 多语言管理器类
 * 提供语言切换、翻译文本获取等功能
 */
var I18nManager = /** @class */ (function () {
    function I18nManager() {
        this.currentLanguage = DEFAULT_LANGUAGE;
        this.changeListeners = [];
        // 初始化翻译资源
        this.translations = {
            zh: zhTranslations,
            en: enTranslations,
            de: deTranslations
        };
        // 从本地存储加载语言设置
        this.loadLanguageFromStorage();
    }
    /**
     * 获取当前语言
     */
    I18nManager.prototype.getCurrentLanguage = function () {
        return this.currentLanguage;
    };
    /**
     * 设置当前语言
     * @param language 要设置的语言
     */
    I18nManager.prototype.setLanguage = function (language) {
        if (this.currentLanguage !== language) {
            this.currentLanguage = language;
            this.saveLanguageToStorage();
            this.notifyLanguageChange();
        }
    };
    /**
     * 获取翻译文本
     * @param key 翻译键路径，支持点号分隔的嵌套路径
     * @param fallback 当翻译不存在时的备用文本
     * @param params 可选的参数对象，用于替换模板中的占位符
     * @returns 翻译后的文本
     */
    I18nManager.prototype.t = function (key, fallback, params) {
        var e_1, _a;
        var keys = key.split('.');
        var value = this.translations[this.currentLanguage];
        var _loop_1 = function (k) {
            var e_2, _b;
            if (value && typeof value === 'object' && k in value) {
                value = value[k];
            }
            else {
                // 如果当前语言没有找到翻译，尝试使用英语作为备用
                if (this_1.currentLanguage !== 'en') {
                    var fallbackValue = this_1.translations.en;
                    try {
                        for (var keys_2 = (e_2 = void 0, __values(keys)), keys_2_1 = keys_2.next(); !keys_2_1.done; keys_2_1 = keys_2.next()) {
                            var fk = keys_2_1.value;
                            if (fallbackValue && typeof fallbackValue === 'object' && fk in fallbackValue) {
                                fallbackValue = fallbackValue[fk];
                            }
                            else {
                                fallbackValue = undefined;
                                break;
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (keys_2_1 && !keys_2_1.done && (_b = keys_2.return)) _b.call(keys_2);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    if (typeof fallbackValue === 'string') {
                        var result_1 = fallbackValue;
                        // 如果提供了参数，替换模板中的占位符
                        if (params) {
                            Object.keys(params).forEach(function (paramKey) {
                                var placeholder = "{{".concat(paramKey, "}}");
                                result_1 = result_1.replace(new RegExp(placeholder, 'g'), String(params[paramKey]));
                            });
                        }
                        return { value: result_1 };
                    }
                }
                return { value: fallback || key };
            }
        };
        var this_1 = this;
        try {
            // 遍历嵌套键路径
            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var k = keys_1_1.value;
                var state_1 = _loop_1(k);
                if (typeof state_1 === "object")
                    return state_1.value;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var result = typeof value === 'string' ? value : (fallback || key);
        // 如果提供了参数，替换模板中的占位符
        if (params && typeof result === 'string') {
            Object.keys(params).forEach(function (paramKey) {
                var placeholder = "{{".concat(paramKey, "}}");
                result = result.replace(new RegExp(placeholder, 'g'), String(params[paramKey]));
            });
        }
        return result;
    };
    /**
     * 添加语言变更监听器
     * @param listener 监听器函数
     */
    I18nManager.prototype.addLanguageChangeListener = function (listener) {
        this.changeListeners.push(listener);
    };
    /**
     * 移除语言变更监听器
     * @param listener 要移除的监听器函数
     */
    I18nManager.prototype.removeLanguageChangeListener = function (listener) {
        var index = this.changeListeners.indexOf(listener);
        if (index > -1) {
            this.changeListeners.splice(index, 1);
        }
    };
    /**
     * 从本地存储加载语言设置
     */
    I18nManager.prototype.loadLanguageFromStorage = function () {
        try {
            var savedLanguage = localStorage.getItem('ob8anki-language');
            if (savedLanguage && ['zh', 'en', 'de'].includes(savedLanguage)) {
                this.currentLanguage = savedLanguage;
            }
        }
        catch (error) {
            console.warn('Failed to load language from storage:', error);
        }
    };
    /**
     * 保存语言设置到本地存储
     */
    I18nManager.prototype.saveLanguageToStorage = function () {
        try {
            localStorage.setItem('ob8anki-language', this.currentLanguage);
        }
        catch (error) {
            console.warn('Failed to save language to storage:', error);
        }
    };
    /**
     * 通知语言变更
     */
    I18nManager.prototype.notifyLanguageChange = function () {
        var _this = this;
        this.changeListeners.forEach(function (listener) {
            try {
                listener(_this.currentLanguage);
            }
            catch (error) {
                console.error('Error in language change listener:', error);
            }
        });
    };
    return I18nManager;
}());
// 创建全局实例
var i18n = new I18nManager();
// 导出便捷的翻译函数
var t = function (key, fallback, params) { return i18n.t(key, fallback, params); };

var Anki = /** @class */ (function () {
    function Anki() {
    }
    Anki.prototype.createModels = function (sourceSupport, codeHighlightSupport, codeHighlightTheme) {
        return __awaiter(this, void 0, void 0, function () {
            var models;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        models = this.getModels(sourceSupport, codeHighlightSupport);
                        return [4 /*yield*/, this.storeHighlightAssetsIfNeeded(!!codeHighlightSupport, codeHighlightTheme)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.invoke("multi", 6, { actions: models })];
                }
            });
        });
    };
    Anki.prototype.createDeck = function (deckName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.invoke("createDeck", 6, { deck: deckName })];
            });
        });
    };
    Anki.prototype.storeHighlightAssetsIfNeeded = function (codeHighlightSupport, theme) {
        return __awaiter(this, void 0, void 0, function () {
            var existsInit, cssData, actions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!codeHighlightSupport)
                            return [2 /*return*/];
                        return [4 /*yield*/, this.invoke("retrieveMediaFile", 6, { filename: "_highlightInit.js" })
                                .then(function () { return true; })
                                .catch(function () { return false; })];
                    case 1:
                        existsInit = _a.sent();
                        cssData = theme === 'google-light' ? highlightCssLightBase64 : highlightCssDarkBase64;
                        actions = [];
                        if (!existsInit) {
                            actions.push({ action: "storeMediaFile", params: { filename: "_highlight.js", data: highlightjsBase64 } });
                            actions.push({ action: "storeMediaFile", params: { filename: "_highlightInit.js", data: highlightInitBase64 } });
                        }
                        // 覆盖（或首次写入）主题样式文件，以保证主题切换生效
                        actions.push({ action: "storeMediaFile", params: { filename: "_highlight.css", data: cssData } });
                        if (!actions.length) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.invoke("multi", 6, { actions: actions })];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Anki.prototype.storeMediaFiles = function (cards, codeHighlightSupport, codeHighlightTheme) {
        return __awaiter(this, void 0, void 0, function () {
            var actions, cards_1, cards_1_1, card, _a, _b, media;
            var e_1, _c, e_2, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0: return [4 /*yield*/, this.storeHighlightAssetsIfNeeded(!!codeHighlightSupport, codeHighlightTheme)];
                    case 1:
                        _e.sent();
                        actions = [];
                        try {
                            for (cards_1 = __values(cards), cards_1_1 = cards_1.next(); !cards_1_1.done; cards_1_1 = cards_1.next()) {
                                card = cards_1_1.value;
                                try {
                                    for (_a = (e_2 = void 0, __values(card.getMedias())), _b = _a.next(); !_b.done; _b = _a.next()) {
                                        media = _b.value;
                                        actions.push({
                                            action: "storeMediaFile",
                                            params: media,
                                        });
                                    }
                                }
                                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                                finally {
                                    try {
                                        if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                                    }
                                    finally { if (e_2) throw e_2.error; }
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (cards_1_1 && !cards_1_1.done && (_c = cards_1.return)) _c.call(cards_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        if (actions) {
                            return [2 /*return*/, this.invoke("multi", 6, { actions: actions })];
                        }
                        else {
                            return [2 /*return*/, {}];
                        }
                }
            });
        });
    };
    Anki.prototype.addCards = function (cards) {
        return __awaiter(this, void 0, void 0, function () {
            var notes;
            return __generator(this, function (_a) {
                notes = [];
                cards.forEach(function (card) { return notes.push(card.getCard(false)); });
                return [2 /*return*/, this.invoke("addNotes", 6, {
                        notes: notes,
                    })];
            });
        });
    };
    /**
     * Given the new cards with an optional deck name, it updates all the cards on Anki.
     *
     * Be aware of https://github.com/FooSoft/anki-connect/issues/82. If the Browse pane is opened on Anki,
     * the update does not change all the cards.
     * @param cards the new cards.
     * @param deckName the new deck name.
     */
    Anki.prototype.updateCards = function (cards, codeHighlightSupport, codeHighlightTheme) {
        return __awaiter(this, void 0, void 0, function () {
            var updateActions, ids, cards_2, cards_2_1, card;
            var e_3, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        updateActions = [];
                        // 确保存储高亮资源（可选）
                        return [4 /*yield*/, this.storeHighlightAssetsIfNeeded(!!codeHighlightSupport, codeHighlightTheme)];
                    case 1:
                        // 确保存储高亮资源（可选）
                        _b.sent();
                        ids = [];
                        try {
                            for (cards_2 = __values(cards), cards_2_1 = cards_2.next(); !cards_2_1.done; cards_2_1 = cards_2.next()) {
                                card = cards_2_1.value;
                                updateActions.push({
                                    action: "updateNoteFields",
                                    params: {
                                        note: card.getCard(true),
                                    },
                                });
                                updateActions = updateActions.concat(this.mergeTags(card.oldTags, card.tags, card.id));
                                ids.push(card.id);
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (cards_2_1 && !cards_2_1.done && (_a = cards_2.return)) _a.call(cards_2);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                        // Update deck
                        updateActions.push({
                            action: "changeDeck",
                            params: {
                                cards: ids,
                                deck: cards[0].deckName,
                            },
                        });
                        return [2 /*return*/, this.invoke("multi", 6, { actions: updateActions })];
                }
            });
        });
    };
    Anki.prototype.changeDeck = function (ids, deckName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.invoke("changeDeck", 6, { cards: ids, deck: deckName })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Anki.prototype.cardsInfo = function (ids) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.invoke("cardsInfo", 6, { cards: ids })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Anki.prototype.getCards = function (ids) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.invoke("notesInfo", 6, { notes: ids })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Anki.prototype.deleteCards = function (ids) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.invoke("deleteNotes", 6, { notes: ids })];
            });
        });
    };
    Anki.prototype.ping = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.invoke("version", 6)];
                    case 1: return [2 /*return*/, (_a.sent()) === 6];
                }
            });
        });
    };
    Anki.prototype.mergeTags = function (oldTags, newTags, cardId) {
        var e_4, _a, e_5, _b;
        var actions = [];
        try {
            // Find tags to Add
            for (var newTags_1 = __values(newTags), newTags_1_1 = newTags_1.next(); !newTags_1_1.done; newTags_1_1 = newTags_1.next()) {
                var tag = newTags_1_1.value;
                var index = oldTags.indexOf(tag);
                if (index > -1) {
                    oldTags.splice(index, 1);
                }
                else {
                    actions.push({
                        action: "addTags",
                        params: {
                            notes: [cardId],
                            tags: tag,
                        },
                    });
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (newTags_1_1 && !newTags_1_1.done && (_a = newTags_1.return)) _a.call(newTags_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        try {
            // All Tags to delete
            for (var oldTags_1 = __values(oldTags), oldTags_1_1 = oldTags_1.next(); !oldTags_1_1.done; oldTags_1_1 = oldTags_1.next()) {
                var tag = oldTags_1_1.value;
                actions.push({
                    action: "removeTags",
                    params: {
                        notes: [cardId],
                        tags: tag,
                    },
                });
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (oldTags_1_1 && !oldTags_1_1.done && (_b = oldTags_1.return)) _b.call(oldTags_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return actions;
    };
    Anki.prototype.invoke = function (action, version, params) {
        if (version === void 0) { version = 6; }
        if (params === void 0) { params = {}; }
        return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.addEventListener("error", function () { return reject(t("processing.errors.failedToIssueRequest")); });
            xhr.addEventListener("load", function () {
                try {
                    var response = JSON.parse(xhr.responseText);
                    if (Object.getOwnPropertyNames(response).length != 2) {
                        throw t("processing.errors.unexpectedNumberOfFields");
                    }
                    if (!Object.prototype.hasOwnProperty.call(response, "error")) {
                        throw t("processing.errors.missingErrorField");
                    }
                    if (!Object.prototype.hasOwnProperty.call(response, "result")) {
                        throw t("processing.errors.missingResultField");
                    }
                    if (response.error) {
                        throw response.error;
                    }
                    resolve(response.result);
                }
                catch (e) {
                    reject(e);
                }
            });
            xhr.open("POST", "http://127.0.0.1:8765");
            xhr.send(JSON.stringify({ action: action, version: version, params: params }));
        });
    };
    Anki.prototype.getModels = function (sourceSupport, codeHighlightSupport) {
        var sourceFieldContent = "";
        var sourceExtension = "";
        if (sourceSupport) {
            sourceFieldContent = "\r\n" + sourceField;
            sourceExtension = sourceDeckExtension;
        }
        var css = '.card {\r\n font-family: arial;\r\n font-size: 20px;\r\n text-align: center;\r\n color: black;\r\n background-color: white;\r\n}\r\n\r\n.tag::before {\r\n\tcontent: "#";\r\n}\r\n\r\n.tag {\r\n  color: white;\r\n  background-color: #9F2BFF;\r\n  border: none;\r\n  font-size: 11px;\r\n  font-weight: bold;\r\n  padding: 1px 8px;\r\n  margin: 0px 3px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  border-radius: 14px;\r\n  display: inline;\r\n  vertical-align: middle;\r\n}\r\n .cloze { font-weight: bold; color: blue;}.nightMode .cloze { color: lightblue;}';
        var hl = codeHighlightSupport ? codeScript : "";
        var front = "{{Front}}\r\n<p class=\"tags\">{{Tags}}</p>\r\n\r\n<script>\r\n    var tagEl = document.querySelector('.tags');\r\n    var tags = tagEl.innerHTML.split(' ');\r\n    var html = '';\r\n    tags.forEach(function(tag) {\r\n\tif (tag) {\r\n\t    var newTag = '<span class=\"tag\">' + tag + '</span>';\r\n           html += newTag;\r\n    \t    tagEl.innerHTML = html;\r\n\t}\r\n    });\r\n    \r\n</script>".concat(hl);
        var back = "{{FrontSide}}\n\n<hr id=answer>\n\n{{Back}}".concat(sourceFieldContent).concat(hl);
        var frontReversed = "{{Back}}\r\n<p class=\"tags\">{{Tags}}</p>\r\n\r\n<script>\r\n    var tagEl = document.querySelector('.tags');\r\n    var tags = tagEl.innerHTML.split(' ');\r\n    var html = '';\r\n    tags.forEach(function(tag) {\r\n\tif (tag) {\r\n\t    var newTag = '<span class=\"tag\">' + tag + '</span>';\r\n           html += newTag;\r\n    \t    tagEl.innerHTML = html;\r\n\t}\r\n    });\r\n    \r\n</script>".concat(hl);
        var backReversed = "{{FrontSide}}\n\n<hr id=answer>\n\n{{Front}}".concat(sourceFieldContent).concat(hl);
        var prompt = "{{Prompt}}\r\n<p class=\"tags\">\uD83E\uDDE0spaced {{Tags}}</p>\r\n\r\n<script>\r\n    var tagEl = document.querySelector('.tags');\r\n    var tags = tagEl.innerHTML.split(' ');\r\n    var html = '';\r\n    tags.forEach(function(tag) {\r\n\tif (tag) {\r\n\t    var newTag = '<span class=\"tag\">' + tag + '</span>';\r\n           html += newTag;\r\n    \t    tagEl.innerHTML = html;\r\n\t}\r\n    });\r\n    \r\n</script>".concat(hl);
        var promptBack = "{{FrontSide}}\n\n<hr id=answer>\uD83E\uDDE0 Review done.".concat(sourceFieldContent).concat(hl);
        var clozeFront = "{{cloze:Text}}\n\n<script>\r\n    var tagEl = document.querySelector('.tags');\r\n    var tags = tagEl.innerHTML.split(' ');\r\n    var html = '';\r\n    tags.forEach(function(tag) {\r\n\tif (tag) {\r\n\t    var newTag = '<span class=\"tag\">' + tag + '</span>';\r\n           html += newTag;\r\n    \t    tagEl.innerHTML = html;\r\n\t}\r\n    });\r\n    \r\n</script>".concat(hl);
        var clozeBack = "{{cloze:Text}}\n\n<br>{{Extra}}".concat(sourceFieldContent, "<script>\r\n    var tagEl = document.querySelector('.tags');\r\n    var tags = tagEl.innerHTML.split(' ');\r\n    var html = '';\r\n    tags.forEach(function(tag) {\r\n\tif (tag) {\r\n\t    var newTag = '<span class=\"tag\">' + tag + '</span>';\r\n           html += newTag;\r\n    \t    tagEl.innerHTML = html;\r\n\t}\r\n    });\r\n    \r\n</script>").concat(hl);
        var classicFields = ["Front", "Back"];
        var promptFields = ["Prompt"];
        var clozeFields = ["Text", "Extra"];
        if (sourceSupport) {
            classicFields = classicFields.concat("Source");
            promptFields = promptFields.concat("Source");
            clozeFields = clozeFields.concat("Source");
        }
        var obsidianBasic = {
            action: "createModel",
            params: {
                modelName: "Obsidian-basic".concat(sourceExtension),
                inOrderFields: classicFields,
                css: css,
                cardTemplates: [
                    {
                        Name: "Front / Back",
                        Front: front,
                        Back: back,
                    },
                ],
            },
        };
        var obsidianBasicReversed = {
            action: "createModel",
            params: {
                modelName: "Obsidian-basic-reversed".concat(sourceExtension),
                inOrderFields: classicFields,
                css: css,
                cardTemplates: [
                    {
                        Name: "Front / Back",
                        Front: front,
                        Back: back,
                    },
                    {
                        Name: "Back / Front",
                        Front: frontReversed,
                        Back: backReversed,
                    },
                ],
            },
        };
        var obsidianCloze = {
            action: "createModel",
            params: {
                modelName: "Obsidian-cloze".concat(sourceExtension),
                inOrderFields: clozeFields,
                css: css,
                isCloze: true,
                cardTemplates: [
                    {
                        Name: "Cloze",
                        Front: clozeFront,
                        Back: clozeBack,
                    },
                ],
            },
        };
        var obsidianSpaced = {
            action: "createModel",
            params: {
                modelName: "Obsidian-spaced".concat(sourceExtension),
                inOrderFields: promptFields,
                css: css,
                cardTemplates: [
                    {
                        Name: "Spaced",
                        Front: prompt,
                        Back: promptBack,
                    },
                ],
            },
        };
        return [obsidianBasic, obsidianBasicReversed, obsidianCloze, obsidianSpaced];
    };
    Anki.prototype.requestPermission = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.invoke("requestPermission", 6)];
            });
        });
    };
    return Anki;
}());

function arrayBufferToBase64(buffer) {
    var binary = "";
    var bytes = new Uint8Array(buffer);
    var len = bytes.byteLength;
    for (var i = 0; i < len; i++) {
        binary += String.fromCharCode(bytes[i]);
    }
    return window.btoa(binary);
}
function arraysEqual(a, b) {
    if (a === b)
        return true;
    if (a == null || b == null)
        return false;
    if (a.length !== b.length)
        return false;
    a.sort();
    b.sort();
    for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i])
            return false;
    }
    return true;
}
function escapeMarkdown(string, skips) {
    if (skips === void 0) { skips = []; }
    var replacements = [
        // [/\*/g, "\\*", "asterisks"],
        [/#/g, "#", "number signs"],
        // [/\//g, "\\/", "slashes"],
        [/\\/g, "\\\\", "backslash"],
        [/\(/g, "\\(", "parentheses"],
        [/\)/g, "\\)", "parentheses"],
        [/\[/g, "\\[", "square brackets"],
        [/\]/g, "\\]", "square brackets"],
        [/</g, "&lt;", "angle brackets"],
        [/>/g, "&gt;", "angle brackets"],
        [/_/g, "\\_", "underscores"],
    ];
    return replacements.reduce(function (s, replacement) {
        var name = replacement[2];
        return name && skips.indexOf(name) !== -1
            ? s
            : s.replace(replacement[0], replacement[1]);
    }, string);
}
function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}

var SettingsTab = /** @class */ (function (_super) {
    __extends(SettingsTab, _super);
    function SettingsTab() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SettingsTab.prototype.display = function () {
        var _this = this;
        var containerEl = this.containerEl;
        var plugin = this.plugin;
        containerEl.empty();
        containerEl.createEl("h1", { text: t('settings.title') });
        // 添加语言设置选项
        new obsidian.Setting(containerEl)
            .setName(t('settings.language.name'))
            .setDesc(t('settings.language.desc'))
            .addDropdown(function (dropdown) {
            AVAILABLE_LANGUAGES.forEach(function (lang) {
                // 根据语言代码获取对应的翻译文本
                var displayName;
                switch (lang.code) {
                    case 'zh':
                        displayName = t('settings.language.chinese');
                        break;
                    case 'en':
                        displayName = t('settings.language.english');
                        break;
                    case 'de':
                        displayName = t('settings.language.german');
                        break;
                    default:
                        displayName = lang.name;
                }
                dropdown.addOption(lang.code, displayName);
            });
            dropdown
                .setValue(plugin.settings.language)
                .onChange(function (value) {
                plugin.settings.language = value;
                plugin.saveData(plugin.settings);
                i18n.setLanguage(value);
                // 重新渲染设置界面以应用新语言
                _this.display();
            });
        });
        var description = createFragment();
        description.append(t('settings.ankiConnect.description'), createEl('br'), t('settings.ankiConnect.requirement'));
        new obsidian.Setting(containerEl)
            .setName(t('settings.ankiConnect.givePermission'))
            .setDesc(description)
            .addButton(function (button) {
            button.setButtonText(t('settings.ankiConnect.grantPermission')).onClick(function () {
                new Anki().requestPermission().then(function (result) {
                    if (result.permission === "granted") {
                        plugin.settings.ankiConnectPermission = true;
                        plugin.saveData(plugin.settings);
                        new obsidian.Notice(t('settings.ankiConnect.permissionGranted'));
                    }
                    else {
                        new obsidian.Notice(t('settings.ankiConnect.permissionNotGranted'));
                    }
                }).catch(function (error) {
                    new obsidian.Notice(t('settings.ankiConnect.connectionError'));
                    console.error(error);
                });
            });
        });
        new obsidian.Setting(containerEl)
            .setName(t('settings.ankiConnect.testAnki'))
            .setDesc(t('settings.ankiConnect.testDesc'))
            .addButton(function (text) {
            text.setButtonText(t('settings.ankiConnect.test')).onClick(function () {
                new Anki()
                    .ping()
                    .then(function () { return new obsidian.Notice(t('settings.ankiConnect.testSuccess')); })
                    .catch(function () { return new obsidian.Notice(t('settings.ankiConnect.testFailed')); });
            });
        });
        containerEl.createEl("h2", { text: t('settings.general.title') });
        new obsidian.Setting(containerEl)
            .setName(t('settings.general.contextAware.name'))
            .setDesc(t('settings.general.contextAware.desc'))
            .addToggle(function (toggle) {
            return toggle.setValue(plugin.settings.contextAwareMode).onChange(function (value) {
                plugin.settings.contextAwareMode = value;
                plugin.saveData(plugin.settings);
            });
        });
        new obsidian.Setting(containerEl)
            .setName(t('settings.general.sourceSupport.name'))
            .setDesc(t('settings.general.sourceSupport.desc'))
            .addToggle(function (toggle) {
            return toggle.setValue(plugin.settings.sourceSupport).onChange(function (value) {
                plugin.settings.sourceSupport = value;
                plugin.saveData(plugin.settings);
            });
        });
        // 代码高亮支持开关（i18n）
        new obsidian.Setting(containerEl)
            .setName(t('settings.general.codeHighlight.name'))
            .setDesc(t('settings.general.codeHighlight.desc'))
            .addToggle(function (toggle) {
            return toggle.setValue(!!plugin.settings.codeHighlightSupport).onChange(function (value) {
                plugin.settings.codeHighlightSupport = value;
                plugin.saveData(plugin.settings);
            });
        });
        // 高亮主题选择（i18n，可扩展）
        new obsidian.Setting(containerEl)
            .setName(t('settings.general.codeHighlight.theme.name'))
            .setDesc(t('settings.general.codeHighlight.theme.desc'))
            .addDropdown(function (dropdown) {
            // 主题列表（可扩展）：仅需在 i18n 与构建脚本中补充新主题与样式
            var themeOptions = [
                { id: 'google-dark', labelKey: 'settings.general.codeHighlight.themes.googleDark' },
                { id: 'google-light', labelKey: 'settings.general.codeHighlight.themes.googleLight' },
            ];
            themeOptions.forEach(function (opt) { return dropdown.addOption(opt.id, t(opt.labelKey)); });
            var current = plugin.settings.codeHighlightTheme || 'google-dark';
            dropdown.setValue(current).onChange(function (value) {
                plugin.settings.codeHighlightTheme = value;
                plugin.saveData(plugin.settings);
            });
        });
        new obsidian.Setting(containerEl)
            .setName(t('settings.general.inlineID.name'))
            .setDesc(t('settings.general.inlineID.desc'))
            .addToggle(function (toggle) {
            return toggle.setValue(plugin.settings.inlineID).onChange(function (value) {
                plugin.settings.inlineID = value;
                plugin.saveData(plugin.settings);
            });
        });
        new obsidian.Setting(containerEl)
            .setName(t('settings.general.folderBasedDeck.name'))
            .setDesc(t('settings.general.folderBasedDeck.desc'))
            .addToggle(function (toggle) {
            return toggle.setValue(plugin.settings.folderBasedDeck).onChange(function (value) {
                plugin.settings.folderBasedDeck = value;
                plugin.saveData(plugin.settings);
            });
        });
        new obsidian.Setting(containerEl)
            .setName(t('settings.general.defaultDeck.name'))
            .setDesc(t('settings.general.defaultDeck.desc'))
            .addText(function (text) {
            text
                .setValue(plugin.settings.deck)
                .setPlaceholder(t('settings.general.defaultDeck.placeholder'))
                .onChange(function (value) {
                if (value.length) {
                    plugin.settings.deck = value;
                    plugin.saveData(plugin.settings);
                }
                else {
                    new obsidian.Notice(t('settings.general.defaultDeck.error'));
                }
            });
        });
        new obsidian.Setting(containerEl)
            .setName(t('settings.general.defaultAnkiTag.name'))
            .setDesc(t('settings.general.defaultAnkiTag.desc'))
            .addText(function (text) {
            text
                .setValue(plugin.settings.defaultAnkiTag)
                .setPlaceholder(t('settings.general.defaultAnkiTag.placeholder'))
                .onChange(function (value) {
                if (!value)
                    new obsidian.Notice(t('settings.general.defaultAnkiTag.noTagNotice'));
                plugin.settings.defaultAnkiTag = value.toLowerCase();
                plugin.saveData(plugin.settings);
            });
        });
        containerEl.createEl("h2", { text: t('settings.cardIdentification.title') });
        new obsidian.Setting(containerEl)
            .setName(t('settings.cardIdentification.flashcardsTag.name'))
            .setDesc(t('settings.cardIdentification.flashcardsTag.desc'))
            .addText(function (text) {
            text
                .setValue(plugin.settings.flashcardsTag)
                .setPlaceholder(t('settings.cardIdentification.flashcardsTag.placeholder'))
                .onChange(function (value) {
                if (value) {
                    plugin.settings.flashcardsTag = value.toLowerCase();
                    plugin.saveData(plugin.settings);
                }
                else {
                    new obsidian.Notice(t('settings.cardIdentification.flashcardsTag.error'));
                }
            });
        });
        new obsidian.Setting(containerEl)
            .setName(t('settings.cardIdentification.inlineSeparator.name'))
            .setDesc(t('settings.cardIdentification.inlineSeparator.desc'))
            .addText(function (text) {
            text
                .setValue(plugin.settings.inlineSeparator)
                .setPlaceholder("::")
                .onChange(function (value) {
                // if the value is empty or is the same like the inlineseparatorreverse then set it to the default, otherwise save it
                if (value.trim().length === 0 || value === plugin.settings.inlineSeparatorReverse) {
                    plugin.settings.inlineSeparator = "::";
                    if (value.trim().length === 0) {
                        new obsidian.Notice(t('settings.cardIdentification.inlineSeparator.lengthError'));
                    }
                    else if (value === plugin.settings.inlineSeparatorReverse) {
                        new obsidian.Notice(t('settings.cardIdentification.inlineSeparator.duplicateError'));
                    }
                }
                else {
                    plugin.settings.inlineSeparator = escapeRegExp(value.trim());
                    new obsidian.Notice(t('settings.cardIdentification.inlineSeparator.changed'));
                }
                plugin.saveData(plugin.settings);
            });
        });
        new obsidian.Setting(containerEl)
            .setName(t('settings.cardIdentification.inlineReverseSeparator.name'))
            .setDesc(t('settings.cardIdentification.inlineReverseSeparator.desc'))
            .addText(function (text) {
            text
                .setValue(plugin.settings.inlineSeparatorReverse)
                .setPlaceholder(":::")
                .onChange(function (value) {
                // if the value is empty or is the same like the inlineseparatorreverse then set it to the default, otherwise save it
                if (value.trim().length === 0 || value === plugin.settings.inlineSeparator) {
                    plugin.settings.inlineSeparatorReverse = ":::";
                    if (value.trim().length === 0) {
                        new obsidian.Notice(t('settings.cardIdentification.inlineReverseSeparator.lengthError'));
                    }
                    else if (value === plugin.settings.inlineSeparator) {
                        new obsidian.Notice(t('settings.cardIdentification.inlineReverseSeparator.duplicateError'));
                    }
                }
                else {
                    plugin.settings.inlineSeparatorReverse = escapeRegExp(value.trim());
                    new obsidian.Notice(t('settings.cardIdentification.inlineReverseSeparator.changed'));
                }
                plugin.saveData(plugin.settings);
            });
        });
        containerEl.createEl("h2", { text: t('settings.ribbonIcon.title') });
        new obsidian.Setting(containerEl)
            .setName(t('settings.ribbonIcon.action.name'))
            .setDesc(t('settings.ribbonIcon.action.desc'))
            .addDropdown(function (dropdown) {
            dropdown
                .addOption("single", t('settings.ribbonIcon.action.single'))
                .addOption("folder", t('settings.ribbonIcon.action.folder'))
                .addOption("all", t('settings.ribbonIcon.action.all'))
                .setValue(plugin.settings.ribbonAction || "single")
                .onChange(function (value) {
                plugin.settings.ribbonAction = value;
                plugin.saveData(plugin.settings);
            });
        });
        containerEl.createEl("h2", { text: t('settings.notifications.title') });
        new obsidian.Setting(containerEl)
            .setName(t('settings.notifications.showNoChanges.name'))
            .setDesc(t('settings.notifications.showNoChanges.desc'))
            .addToggle(function (toggle) {
            return toggle.setValue(plugin.settings.showNoChangesNotice).onChange(function (value) {
                plugin.settings.showNoChangesNotice = value;
                plugin.saveData(plugin.settings);
            });
        });
    };
    return SettingsTab;
}(obsidian.PluginSettingTab));

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, basedir, module) {
	return module = {
		path: basedir,
		exports: {},
		require: function (path, base) {
			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
		}
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var showdown = createCommonjsModule(function (module) {
(function(){
/**
 * Created by Tivie on 13-07-2015.
 */

function getDefaultOpts (simple) {

  var defaultOptions = {
    omitExtraWLInCodeBlocks: {
      defaultValue: false,
      describe: 'Omit the default extra whiteline added to code blocks',
      type: 'boolean'
    },
    noHeaderId: {
      defaultValue: false,
      describe: 'Turn on/off generated header id',
      type: 'boolean'
    },
    prefixHeaderId: {
      defaultValue: false,
      describe: 'Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic \'section-\' prefix',
      type: 'string'
    },
    rawPrefixHeaderId: {
      defaultValue: false,
      describe: 'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)',
      type: 'boolean'
    },
    ghCompatibleHeaderId: {
      defaultValue: false,
      describe: 'Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)',
      type: 'boolean'
    },
    rawHeaderId: {
      defaultValue: false,
      describe: 'Remove only spaces, \' and " from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids',
      type: 'boolean'
    },
    headerLevelStart: {
      defaultValue: false,
      describe: 'The header blocks level start',
      type: 'integer'
    },
    parseImgDimensions: {
      defaultValue: false,
      describe: 'Turn on/off image dimension parsing',
      type: 'boolean'
    },
    simplifiedAutoLink: {
      defaultValue: false,
      describe: 'Turn on/off GFM autolink style',
      type: 'boolean'
    },
    excludeTrailingPunctuationFromURLs: {
      defaultValue: false,
      describe: 'Excludes trailing punctuation from links generated with autoLinking',
      type: 'boolean'
    },
    literalMidWordUnderscores: {
      defaultValue: false,
      describe: 'Parse midword underscores as literal underscores',
      type: 'boolean'
    },
    literalMidWordAsterisks: {
      defaultValue: false,
      describe: 'Parse midword asterisks as literal asterisks',
      type: 'boolean'
    },
    strikethrough: {
      defaultValue: false,
      describe: 'Turn on/off strikethrough support',
      type: 'boolean'
    },
    tables: {
      defaultValue: false,
      describe: 'Turn on/off tables support',
      type: 'boolean'
    },
    tablesHeaderId: {
      defaultValue: false,
      describe: 'Add an id to table headers',
      type: 'boolean'
    },
    ghCodeBlocks: {
      defaultValue: true,
      describe: 'Turn on/off GFM fenced code blocks support',
      type: 'boolean'
    },
    tasklists: {
      defaultValue: false,
      describe: 'Turn on/off GFM tasklist support',
      type: 'boolean'
    },
    smoothLivePreview: {
      defaultValue: false,
      describe: 'Prevents weird effects in live previews due to incomplete input',
      type: 'boolean'
    },
    smartIndentationFix: {
      defaultValue: false,
      description: 'Tries to smartly fix indentation in es6 strings',
      type: 'boolean'
    },
    disableForced4SpacesIndentedSublists: {
      defaultValue: false,
      description: 'Disables the requirement of indenting nested sublists by 4 spaces',
      type: 'boolean'
    },
    simpleLineBreaks: {
      defaultValue: false,
      description: 'Parses simple line breaks as <br> (GFM Style)',
      type: 'boolean'
    },
    requireSpaceBeforeHeadingText: {
      defaultValue: false,
      description: 'Makes adding a space between `#` and the header text mandatory (GFM Style)',
      type: 'boolean'
    },
    ghMentions: {
      defaultValue: false,
      description: 'Enables github @mentions',
      type: 'boolean'
    },
    ghMentionsLink: {
      defaultValue: 'https://github.com/{u}',
      description: 'Changes the link generated by @mentions. Only applies if ghMentions option is enabled.',
      type: 'string'
    },
    encodeEmails: {
      defaultValue: true,
      description: 'Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities',
      type: 'boolean'
    },
    openLinksInNewWindow: {
      defaultValue: false,
      description: 'Open all links in new windows',
      type: 'boolean'
    },
    backslashEscapesHTMLTags: {
      defaultValue: false,
      description: 'Support for HTML Tag escaping. ex: \<div>foo\</div>',
      type: 'boolean'
    },
    emoji: {
      defaultValue: false,
      description: 'Enable emoji support. Ex: `this is a :smile: emoji`',
      type: 'boolean'
    },
    underline: {
      defaultValue: false,
      description: 'Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`',
      type: 'boolean'
    },
    completeHTMLDocument: {
      defaultValue: false,
      description: 'Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags',
      type: 'boolean'
    },
    metadata: {
      defaultValue: false,
      description: 'Enable support for document metadata (defined at the top of the document between `«««` and `»»»` or between `---` and `---`).',
      type: 'boolean'
    },
    splitAdjacentBlockquotes: {
      defaultValue: false,
      description: 'Split adjacent blockquote blocks',
      type: 'boolean'
    }
  };
  if (simple === false) {
    return JSON.parse(JSON.stringify(defaultOptions));
  }
  var ret = {};
  for (var opt in defaultOptions) {
    if (defaultOptions.hasOwnProperty(opt)) {
      ret[opt] = defaultOptions[opt].defaultValue;
    }
  }
  return ret;
}

function allOptionsOn () {
  var options = getDefaultOpts(true),
      ret = {};
  for (var opt in options) {
    if (options.hasOwnProperty(opt)) {
      ret[opt] = true;
    }
  }
  return ret;
}

/**
 * Created by Tivie on 06-01-2015.
 */

// Private properties
var showdown = {},
    parsers = {},
    extensions = {},
    globalOptions = getDefaultOpts(true),
    setFlavor = 'vanilla',
    flavor = {
      github: {
        omitExtraWLInCodeBlocks:              true,
        simplifiedAutoLink:                   true,
        excludeTrailingPunctuationFromURLs:   true,
        literalMidWordUnderscores:            true,
        strikethrough:                        true,
        tables:                               true,
        tablesHeaderId:                       true,
        ghCodeBlocks:                         true,
        tasklists:                            true,
        disableForced4SpacesIndentedSublists: true,
        simpleLineBreaks:                     true,
        requireSpaceBeforeHeadingText:        true,
        ghCompatibleHeaderId:                 true,
        ghMentions:                           true,
        backslashEscapesHTMLTags:             true,
        emoji:                                true,
        splitAdjacentBlockquotes:             true
      },
      original: {
        noHeaderId:                           true,
        ghCodeBlocks:                         false
      },
      ghost: {
        omitExtraWLInCodeBlocks:              true,
        parseImgDimensions:                   true,
        simplifiedAutoLink:                   true,
        excludeTrailingPunctuationFromURLs:   true,
        literalMidWordUnderscores:            true,
        strikethrough:                        true,
        tables:                               true,
        tablesHeaderId:                       true,
        ghCodeBlocks:                         true,
        tasklists:                            true,
        smoothLivePreview:                    true,
        simpleLineBreaks:                     true,
        requireSpaceBeforeHeadingText:        true,
        ghMentions:                           false,
        encodeEmails:                         true
      },
      vanilla: getDefaultOpts(true),
      allOn: allOptionsOn()
    };

/**
 * helper namespace
 * @type {{}}
 */
showdown.helper = {};

/**
 * TODO LEGACY SUPPORT CODE
 * @type {{}}
 */
showdown.extensions = {};

/**
 * Set a global option
 * @static
 * @param {string} key
 * @param {*} value
 * @returns {showdown}
 */
showdown.setOption = function (key, value) {
  globalOptions[key] = value;
  return this;
};

/**
 * Get a global option
 * @static
 * @param {string} key
 * @returns {*}
 */
showdown.getOption = function (key) {
  return globalOptions[key];
};

/**
 * Get the global options
 * @static
 * @returns {{}}
 */
showdown.getOptions = function () {
  return globalOptions;
};

/**
 * Reset global options to the default values
 * @static
 */
showdown.resetOptions = function () {
  globalOptions = getDefaultOpts(true);
};

/**
 * Set the flavor showdown should use as default
 * @param {string} name
 */
showdown.setFlavor = function (name) {
  if (!flavor.hasOwnProperty(name)) {
    throw Error(name + ' flavor was not found');
  }
  showdown.resetOptions();
  var preset = flavor[name];
  setFlavor = name;
  for (var option in preset) {
    if (preset.hasOwnProperty(option)) {
      globalOptions[option] = preset[option];
    }
  }
};

/**
 * Get the currently set flavor
 * @returns {string}
 */
showdown.getFlavor = function () {
  return setFlavor;
};

/**
 * Get the options of a specified flavor. Returns undefined if the flavor was not found
 * @param {string} name Name of the flavor
 * @returns {{}|undefined}
 */
showdown.getFlavorOptions = function (name) {
  if (flavor.hasOwnProperty(name)) {
    return flavor[name];
  }
};

/**
 * Get the default options
 * @static
 * @param {boolean} [simple=true]
 * @returns {{}}
 */
showdown.getDefaultOptions = function (simple) {
  return getDefaultOpts(simple);
};

/**
 * Get or set a subParser
 *
 * subParser(name)       - Get a registered subParser
 * subParser(name, func) - Register a subParser
 * @static
 * @param {string} name
 * @param {function} [func]
 * @returns {*}
 */
showdown.subParser = function (name, func) {
  if (showdown.helper.isString(name)) {
    if (typeof func !== 'undefined') {
      parsers[name] = func;
    } else {
      if (parsers.hasOwnProperty(name)) {
        return parsers[name];
      } else {
        throw Error('SubParser named ' + name + ' not registered!');
      }
    }
  }
};

/**
 * Gets or registers an extension
 * @static
 * @param {string} name
 * @param {object|function=} ext
 * @returns {*}
 */
showdown.extension = function (name, ext) {

  if (!showdown.helper.isString(name)) {
    throw Error('Extension \'name\' must be a string');
  }

  name = showdown.helper.stdExtName(name);

  // Getter
  if (showdown.helper.isUndefined(ext)) {
    if (!extensions.hasOwnProperty(name)) {
      throw Error('Extension named ' + name + ' is not registered!');
    }
    return extensions[name];

    // Setter
  } else {
    // Expand extension if it's wrapped in a function
    if (typeof ext === 'function') {
      ext = ext();
    }

    // Ensure extension is an array
    if (!showdown.helper.isArray(ext)) {
      ext = [ext];
    }

    var validExtension = validate(ext, name);

    if (validExtension.valid) {
      extensions[name] = ext;
    } else {
      throw Error(validExtension.error);
    }
  }
};

/**
 * Gets all extensions registered
 * @returns {{}}
 */
showdown.getAllExtensions = function () {
  return extensions;
};

/**
 * Remove an extension
 * @param {string} name
 */
showdown.removeExtension = function (name) {
  delete extensions[name];
};

/**
 * Removes all extensions
 */
showdown.resetExtensions = function () {
  extensions = {};
};

/**
 * Validate extension
 * @param {array} extension
 * @param {string} name
 * @returns {{valid: boolean, error: string}}
 */
function validate (extension, name) {

  var errMsg = (name) ? 'Error in ' + name + ' extension->' : 'Error in unnamed extension',
      ret = {
        valid: true,
        error: ''
      };

  if (!showdown.helper.isArray(extension)) {
    extension = [extension];
  }

  for (var i = 0; i < extension.length; ++i) {
    var baseMsg = errMsg + ' sub-extension ' + i + ': ',
        ext = extension[i];
    if (typeof ext !== 'object') {
      ret.valid = false;
      ret.error = baseMsg + 'must be an object, but ' + typeof ext + ' given';
      return ret;
    }

    if (!showdown.helper.isString(ext.type)) {
      ret.valid = false;
      ret.error = baseMsg + 'property "type" must be a string, but ' + typeof ext.type + ' given';
      return ret;
    }

    var type = ext.type = ext.type.toLowerCase();

    // normalize extension type
    if (type === 'language') {
      type = ext.type = 'lang';
    }

    if (type === 'html') {
      type = ext.type = 'output';
    }

    if (type !== 'lang' && type !== 'output' && type !== 'listener') {
      ret.valid = false;
      ret.error = baseMsg + 'type ' + type + ' is not recognized. Valid values: "lang/language", "output/html" or "listener"';
      return ret;
    }

    if (type === 'listener') {
      if (showdown.helper.isUndefined(ext.listeners)) {
        ret.valid = false;
        ret.error = baseMsg + '. Extensions of type "listener" must have a property called "listeners"';
        return ret;
      }
    } else {
      if (showdown.helper.isUndefined(ext.filter) && showdown.helper.isUndefined(ext.regex)) {
        ret.valid = false;
        ret.error = baseMsg + type + ' extensions must define either a "regex" property or a "filter" method';
        return ret;
      }
    }

    if (ext.listeners) {
      if (typeof ext.listeners !== 'object') {
        ret.valid = false;
        ret.error = baseMsg + '"listeners" property must be an object but ' + typeof ext.listeners + ' given';
        return ret;
      }
      for (var ln in ext.listeners) {
        if (ext.listeners.hasOwnProperty(ln)) {
          if (typeof ext.listeners[ln] !== 'function') {
            ret.valid = false;
            ret.error = baseMsg + '"listeners" property must be an hash of [event name]: [callback]. listeners.' + ln +
              ' must be a function but ' + typeof ext.listeners[ln] + ' given';
            return ret;
          }
        }
      }
    }

    if (ext.filter) {
      if (typeof ext.filter !== 'function') {
        ret.valid = false;
        ret.error = baseMsg + '"filter" must be a function, but ' + typeof ext.filter + ' given';
        return ret;
      }
    } else if (ext.regex) {
      if (showdown.helper.isString(ext.regex)) {
        ext.regex = new RegExp(ext.regex, 'g');
      }
      if (!(ext.regex instanceof RegExp)) {
        ret.valid = false;
        ret.error = baseMsg + '"regex" property must either be a string or a RegExp object, but ' + typeof ext.regex + ' given';
        return ret;
      }
      if (showdown.helper.isUndefined(ext.replace)) {
        ret.valid = false;
        ret.error = baseMsg + '"regex" extensions must implement a replace string or function';
        return ret;
      }
    }
  }
  return ret;
}

/**
 * Validate extension
 * @param {object} ext
 * @returns {boolean}
 */
showdown.validateExtension = function (ext) {

  var validateExtension = validate(ext, null);
  if (!validateExtension.valid) {
    console.warn(validateExtension.error);
    return false;
  }
  return true;
};

/**
 * showdownjs helper functions
 */

if (!showdown.hasOwnProperty('helper')) {
  showdown.helper = {};
}

/**
 * Check if var is string
 * @static
 * @param {string} a
 * @returns {boolean}
 */
showdown.helper.isString = function (a) {
  return (typeof a === 'string' || a instanceof String);
};

/**
 * Check if var is a function
 * @static
 * @param {*} a
 * @returns {boolean}
 */
showdown.helper.isFunction = function (a) {
  var getType = {};
  return a && getType.toString.call(a) === '[object Function]';
};

/**
 * isArray helper function
 * @static
 * @param {*} a
 * @returns {boolean}
 */
showdown.helper.isArray = function (a) {
  return Array.isArray(a);
};

/**
 * Check if value is undefined
 * @static
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 */
showdown.helper.isUndefined = function (value) {
  return typeof value === 'undefined';
};

/**
 * ForEach helper function
 * Iterates over Arrays and Objects (own properties only)
 * @static
 * @param {*} obj
 * @param {function} callback Accepts 3 params: 1. value, 2. key, 3. the original array/object
 */
showdown.helper.forEach = function (obj, callback) {
  // check if obj is defined
  if (showdown.helper.isUndefined(obj)) {
    throw new Error('obj param is required');
  }

  if (showdown.helper.isUndefined(callback)) {
    throw new Error('callback param is required');
  }

  if (!showdown.helper.isFunction(callback)) {
    throw new Error('callback param must be a function/closure');
  }

  if (typeof obj.forEach === 'function') {
    obj.forEach(callback);
  } else if (showdown.helper.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      callback(obj[i], i, obj);
    }
  } else if (typeof (obj) === 'object') {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop)) {
        callback(obj[prop], prop, obj);
      }
    }
  } else {
    throw new Error('obj does not seem to be an array or an iterable object');
  }
};

/**
 * Standardidize extension name
 * @static
 * @param {string} s extension name
 * @returns {string}
 */
showdown.helper.stdExtName = function (s) {
  return s.replace(/[_?*+\/\\.^-]/g, '').replace(/\s/g, '').toLowerCase();
};

function escapeCharactersCallback (wholeMatch, m1) {
  var charCodeToEscape = m1.charCodeAt(0);
  return '¨E' + charCodeToEscape + 'E';
}

/**
 * Callback used to escape characters when passing through String.replace
 * @static
 * @param {string} wholeMatch
 * @param {string} m1
 * @returns {string}
 */
showdown.helper.escapeCharactersCallback = escapeCharactersCallback;

/**
 * Escape characters in a string
 * @static
 * @param {string} text
 * @param {string} charsToEscape
 * @param {boolean} afterBackslash
 * @returns {XML|string|void|*}
 */
showdown.helper.escapeCharacters = function (text, charsToEscape, afterBackslash) {
  // First we have to escape the escape characters so that
  // we can build a character class out of them
  var regexString = '([' + charsToEscape.replace(/([\[\]\\])/g, '\\$1') + '])';

  if (afterBackslash) {
    regexString = '\\\\' + regexString;
  }

  var regex = new RegExp(regexString, 'g');
  text = text.replace(regex, escapeCharactersCallback);

  return text;
};

/**
 * Unescape HTML entities
 * @param txt
 * @returns {string}
 */
showdown.helper.unescapeHTMLEntities = function (txt) {

  return txt
    .replace(/&quot;/g, '"')
    .replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&amp;/g, '&');
};

var rgxFindMatchPos = function (str, left, right, flags) {
  var f = flags || '',
      g = f.indexOf('g') > -1,
      x = new RegExp(left + '|' + right, 'g' + f.replace(/g/g, '')),
      l = new RegExp(left, f.replace(/g/g, '')),
      pos = [],
      t, s, m, start, end;

  do {
    t = 0;
    while ((m = x.exec(str))) {
      if (l.test(m[0])) {
        if (!(t++)) {
          s = x.lastIndex;
          start = s - m[0].length;
        }
      } else if (t) {
        if (!--t) {
          end = m.index + m[0].length;
          var obj = {
            left: {start: start, end: s},
            match: {start: s, end: m.index},
            right: {start: m.index, end: end},
            wholeMatch: {start: start, end: end}
          };
          pos.push(obj);
          if (!g) {
            return pos;
          }
        }
      }
    }
  } while (t && (x.lastIndex = s));

  return pos;
};

/**
 * matchRecursiveRegExp
 *
 * (c) 2007 Steven Levithan <stevenlevithan.com>
 * MIT License
 *
 * Accepts a string to search, a left and right format delimiter
 * as regex patterns, and optional regex flags. Returns an array
 * of matches, allowing nested instances of left/right delimiters.
 * Use the "g" flag to return all matches, otherwise only the
 * first is returned. Be careful to ensure that the left and
 * right format delimiters produce mutually exclusive matches.
 * Backreferences are not supported within the right delimiter
 * due to how it is internally combined with the left delimiter.
 * When matching strings whose format delimiters are unbalanced
 * to the left or right, the output is intentionally as a
 * conventional regex library with recursion support would
 * produce, e.g. "<<x>" and "<x>>" both produce ["x"] when using
 * "<" and ">" as the delimiters (both strings contain a single,
 * balanced instance of "<x>").
 *
 * examples:
 * matchRecursiveRegExp("test", "\\(", "\\)")
 * returns: []
 * matchRecursiveRegExp("<t<<e>><s>>t<>", "<", ">", "g")
 * returns: ["t<<e>><s>", ""]
 * matchRecursiveRegExp("<div id=\"x\">test</div>", "<div\\b[^>]*>", "</div>", "gi")
 * returns: ["test"]
 */
showdown.helper.matchRecursiveRegExp = function (str, left, right, flags) {

  var matchPos = rgxFindMatchPos (str, left, right, flags),
      results = [];

  for (var i = 0; i < matchPos.length; ++i) {
    results.push([
      str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),
      str.slice(matchPos[i].match.start, matchPos[i].match.end),
      str.slice(matchPos[i].left.start, matchPos[i].left.end),
      str.slice(matchPos[i].right.start, matchPos[i].right.end)
    ]);
  }
  return results;
};

/**
 *
 * @param {string} str
 * @param {string|function} replacement
 * @param {string} left
 * @param {string} right
 * @param {string} flags
 * @returns {string}
 */
showdown.helper.replaceRecursiveRegExp = function (str, replacement, left, right, flags) {

  if (!showdown.helper.isFunction(replacement)) {
    var repStr = replacement;
    replacement = function () {
      return repStr;
    };
  }

  var matchPos = rgxFindMatchPos(str, left, right, flags),
      finalStr = str,
      lng = matchPos.length;

  if (lng > 0) {
    var bits = [];
    if (matchPos[0].wholeMatch.start !== 0) {
      bits.push(str.slice(0, matchPos[0].wholeMatch.start));
    }
    for (var i = 0; i < lng; ++i) {
      bits.push(
        replacement(
          str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),
          str.slice(matchPos[i].match.start, matchPos[i].match.end),
          str.slice(matchPos[i].left.start, matchPos[i].left.end),
          str.slice(matchPos[i].right.start, matchPos[i].right.end)
        )
      );
      if (i < lng - 1) {
        bits.push(str.slice(matchPos[i].wholeMatch.end, matchPos[i + 1].wholeMatch.start));
      }
    }
    if (matchPos[lng - 1].wholeMatch.end < str.length) {
      bits.push(str.slice(matchPos[lng - 1].wholeMatch.end));
    }
    finalStr = bits.join('');
  }
  return finalStr;
};

/**
 * Returns the index within the passed String object of the first occurrence of the specified regex,
 * starting the search at fromIndex. Returns -1 if the value is not found.
 *
 * @param {string} str string to search
 * @param {RegExp} regex Regular expression to search
 * @param {int} [fromIndex = 0] Index to start the search
 * @returns {Number}
 * @throws InvalidArgumentError
 */
showdown.helper.regexIndexOf = function (str, regex, fromIndex) {
  if (!showdown.helper.isString(str)) {
    throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';
  }
  if (regex instanceof RegExp === false) {
    throw 'InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp';
  }
  var indexOf = str.substring(fromIndex || 0).search(regex);
  return (indexOf >= 0) ? (indexOf + (fromIndex || 0)) : indexOf;
};

/**
 * Splits the passed string object at the defined index, and returns an array composed of the two substrings
 * @param {string} str string to split
 * @param {int} index index to split string at
 * @returns {[string,string]}
 * @throws InvalidArgumentError
 */
showdown.helper.splitAtIndex = function (str, index) {
  if (!showdown.helper.isString(str)) {
    throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';
  }
  return [str.substring(0, index), str.substring(index)];
};

/**
 * Obfuscate an e-mail address through the use of Character Entities,
 * transforming ASCII characters into their equivalent decimal or hex entities.
 *
 * Since it has a random component, subsequent calls to this function produce different results
 *
 * @param {string} mail
 * @returns {string}
 */
showdown.helper.encodeEmailAddress = function (mail) {
  var encode = [
    function (ch) {
      return '&#' + ch.charCodeAt(0) + ';';
    },
    function (ch) {
      return '&#x' + ch.charCodeAt(0).toString(16) + ';';
    },
    function (ch) {
      return ch;
    }
  ];

  mail = mail.replace(/./g, function (ch) {
    if (ch === '@') {
      // this *must* be encoded. I insist.
      ch = encode[Math.floor(Math.random() * 2)](ch);
    } else {
      var r = Math.random();
      // roughly 10% raw, 45% hex, 45% dec
      ch = (
        r > 0.9 ? encode[2](ch) : r > 0.45 ? encode[1](ch) : encode[0](ch)
      );
    }
    return ch;
  });

  return mail;
};

/**
 *
 * @param str
 * @param targetLength
 * @param padString
 * @returns {string}
 */
showdown.helper.padEnd = function padEnd (str, targetLength, padString) {
  /*jshint bitwise: false*/
  // eslint-disable-next-line space-infix-ops
  targetLength = targetLength>>0; //floor if number or convert non-number to 0;
  /*jshint bitwise: true*/
  padString = String(padString || ' ');
  if (str.length > targetLength) {
    return String(str);
  } else {
    targetLength = targetLength - str.length;
    if (targetLength > padString.length) {
      padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed
    }
    return String(str) + padString.slice(0,targetLength);
  }
};

/**
 * POLYFILLS
 */
// use this instead of builtin is undefined for IE8 compatibility
if (typeof console === 'undefined') {
  console = {
    warn: function (msg) {
      alert(msg);
    },
    log: function (msg) {
      alert(msg);
    },
    error: function (msg) {
      throw msg;
    }
  };
}

/**
 * Common regexes.
 * We declare some common regexes to improve performance
 */
showdown.helper.regexes = {
  asteriskDashAndColon: /([*_:~])/g
};

/**
 * EMOJIS LIST
 */
showdown.helper.emojis = {
  '+1':'\ud83d\udc4d',
  '-1':'\ud83d\udc4e',
  '100':'\ud83d\udcaf',
  '1234':'\ud83d\udd22',
  '1st_place_medal':'\ud83e\udd47',
  '2nd_place_medal':'\ud83e\udd48',
  '3rd_place_medal':'\ud83e\udd49',
  '8ball':'\ud83c\udfb1',
  'a':'\ud83c\udd70\ufe0f',
  'ab':'\ud83c\udd8e',
  'abc':'\ud83d\udd24',
  'abcd':'\ud83d\udd21',
  'accept':'\ud83c\ude51',
  'aerial_tramway':'\ud83d\udea1',
  'airplane':'\u2708\ufe0f',
  'alarm_clock':'\u23f0',
  'alembic':'\u2697\ufe0f',
  'alien':'\ud83d\udc7d',
  'ambulance':'\ud83d\ude91',
  'amphora':'\ud83c\udffa',
  'anchor':'\u2693\ufe0f',
  'angel':'\ud83d\udc7c',
  'anger':'\ud83d\udca2',
  'angry':'\ud83d\ude20',
  'anguished':'\ud83d\ude27',
  'ant':'\ud83d\udc1c',
  'apple':'\ud83c\udf4e',
  'aquarius':'\u2652\ufe0f',
  'aries':'\u2648\ufe0f',
  'arrow_backward':'\u25c0\ufe0f',
  'arrow_double_down':'\u23ec',
  'arrow_double_up':'\u23eb',
  'arrow_down':'\u2b07\ufe0f',
  'arrow_down_small':'\ud83d\udd3d',
  'arrow_forward':'\u25b6\ufe0f',
  'arrow_heading_down':'\u2935\ufe0f',
  'arrow_heading_up':'\u2934\ufe0f',
  'arrow_left':'\u2b05\ufe0f',
  'arrow_lower_left':'\u2199\ufe0f',
  'arrow_lower_right':'\u2198\ufe0f',
  'arrow_right':'\u27a1\ufe0f',
  'arrow_right_hook':'\u21aa\ufe0f',
  'arrow_up':'\u2b06\ufe0f',
  'arrow_up_down':'\u2195\ufe0f',
  'arrow_up_small':'\ud83d\udd3c',
  'arrow_upper_left':'\u2196\ufe0f',
  'arrow_upper_right':'\u2197\ufe0f',
  'arrows_clockwise':'\ud83d\udd03',
  'arrows_counterclockwise':'\ud83d\udd04',
  'art':'\ud83c\udfa8',
  'articulated_lorry':'\ud83d\ude9b',
  'artificial_satellite':'\ud83d\udef0',
  'astonished':'\ud83d\ude32',
  'athletic_shoe':'\ud83d\udc5f',
  'atm':'\ud83c\udfe7',
  'atom_symbol':'\u269b\ufe0f',
  'avocado':'\ud83e\udd51',
  'b':'\ud83c\udd71\ufe0f',
  'baby':'\ud83d\udc76',
  'baby_bottle':'\ud83c\udf7c',
  'baby_chick':'\ud83d\udc24',
  'baby_symbol':'\ud83d\udebc',
  'back':'\ud83d\udd19',
  'bacon':'\ud83e\udd53',
  'badminton':'\ud83c\udff8',
  'baggage_claim':'\ud83d\udec4',
  'baguette_bread':'\ud83e\udd56',
  'balance_scale':'\u2696\ufe0f',
  'balloon':'\ud83c\udf88',
  'ballot_box':'\ud83d\uddf3',
  'ballot_box_with_check':'\u2611\ufe0f',
  'bamboo':'\ud83c\udf8d',
  'banana':'\ud83c\udf4c',
  'bangbang':'\u203c\ufe0f',
  'bank':'\ud83c\udfe6',
  'bar_chart':'\ud83d\udcca',
  'barber':'\ud83d\udc88',
  'baseball':'\u26be\ufe0f',
  'basketball':'\ud83c\udfc0',
  'basketball_man':'\u26f9\ufe0f',
  'basketball_woman':'\u26f9\ufe0f&zwj;\u2640\ufe0f',
  'bat':'\ud83e\udd87',
  'bath':'\ud83d\udec0',
  'bathtub':'\ud83d\udec1',
  'battery':'\ud83d\udd0b',
  'beach_umbrella':'\ud83c\udfd6',
  'bear':'\ud83d\udc3b',
  'bed':'\ud83d\udecf',
  'bee':'\ud83d\udc1d',
  'beer':'\ud83c\udf7a',
  'beers':'\ud83c\udf7b',
  'beetle':'\ud83d\udc1e',
  'beginner':'\ud83d\udd30',
  'bell':'\ud83d\udd14',
  'bellhop_bell':'\ud83d\udece',
  'bento':'\ud83c\udf71',
  'biking_man':'\ud83d\udeb4',
  'bike':'\ud83d\udeb2',
  'biking_woman':'\ud83d\udeb4&zwj;\u2640\ufe0f',
  'bikini':'\ud83d\udc59',
  'biohazard':'\u2623\ufe0f',
  'bird':'\ud83d\udc26',
  'birthday':'\ud83c\udf82',
  'black_circle':'\u26ab\ufe0f',
  'black_flag':'\ud83c\udff4',
  'black_heart':'\ud83d\udda4',
  'black_joker':'\ud83c\udccf',
  'black_large_square':'\u2b1b\ufe0f',
  'black_medium_small_square':'\u25fe\ufe0f',
  'black_medium_square':'\u25fc\ufe0f',
  'black_nib':'\u2712\ufe0f',
  'black_small_square':'\u25aa\ufe0f',
  'black_square_button':'\ud83d\udd32',
  'blonde_man':'\ud83d\udc71',
  'blonde_woman':'\ud83d\udc71&zwj;\u2640\ufe0f',
  'blossom':'\ud83c\udf3c',
  'blowfish':'\ud83d\udc21',
  'blue_book':'\ud83d\udcd8',
  'blue_car':'\ud83d\ude99',
  'blue_heart':'\ud83d\udc99',
  'blush':'\ud83d\ude0a',
  'boar':'\ud83d\udc17',
  'boat':'\u26f5\ufe0f',
  'bomb':'\ud83d\udca3',
  'book':'\ud83d\udcd6',
  'bookmark':'\ud83d\udd16',
  'bookmark_tabs':'\ud83d\udcd1',
  'books':'\ud83d\udcda',
  'boom':'\ud83d\udca5',
  'boot':'\ud83d\udc62',
  'bouquet':'\ud83d\udc90',
  'bowing_man':'\ud83d\ude47',
  'bow_and_arrow':'\ud83c\udff9',
  'bowing_woman':'\ud83d\ude47&zwj;\u2640\ufe0f',
  'bowling':'\ud83c\udfb3',
  'boxing_glove':'\ud83e\udd4a',
  'boy':'\ud83d\udc66',
  'bread':'\ud83c\udf5e',
  'bride_with_veil':'\ud83d\udc70',
  'bridge_at_night':'\ud83c\udf09',
  'briefcase':'\ud83d\udcbc',
  'broken_heart':'\ud83d\udc94',
  'bug':'\ud83d\udc1b',
  'building_construction':'\ud83c\udfd7',
  'bulb':'\ud83d\udca1',
  'bullettrain_front':'\ud83d\ude85',
  'bullettrain_side':'\ud83d\ude84',
  'burrito':'\ud83c\udf2f',
  'bus':'\ud83d\ude8c',
  'business_suit_levitating':'\ud83d\udd74',
  'busstop':'\ud83d\ude8f',
  'bust_in_silhouette':'\ud83d\udc64',
  'busts_in_silhouette':'\ud83d\udc65',
  'butterfly':'\ud83e\udd8b',
  'cactus':'\ud83c\udf35',
  'cake':'\ud83c\udf70',
  'calendar':'\ud83d\udcc6',
  'call_me_hand':'\ud83e\udd19',
  'calling':'\ud83d\udcf2',
  'camel':'\ud83d\udc2b',
  'camera':'\ud83d\udcf7',
  'camera_flash':'\ud83d\udcf8',
  'camping':'\ud83c\udfd5',
  'cancer':'\u264b\ufe0f',
  'candle':'\ud83d\udd6f',
  'candy':'\ud83c\udf6c',
  'canoe':'\ud83d\udef6',
  'capital_abcd':'\ud83d\udd20',
  'capricorn':'\u2651\ufe0f',
  'car':'\ud83d\ude97',
  'card_file_box':'\ud83d\uddc3',
  'card_index':'\ud83d\udcc7',
  'card_index_dividers':'\ud83d\uddc2',
  'carousel_horse':'\ud83c\udfa0',
  'carrot':'\ud83e\udd55',
  'cat':'\ud83d\udc31',
  'cat2':'\ud83d\udc08',
  'cd':'\ud83d\udcbf',
  'chains':'\u26d3',
  'champagne':'\ud83c\udf7e',
  'chart':'\ud83d\udcb9',
  'chart_with_downwards_trend':'\ud83d\udcc9',
  'chart_with_upwards_trend':'\ud83d\udcc8',
  'checkered_flag':'\ud83c\udfc1',
  'cheese':'\ud83e\uddc0',
  'cherries':'\ud83c\udf52',
  'cherry_blossom':'\ud83c\udf38',
  'chestnut':'\ud83c\udf30',
  'chicken':'\ud83d\udc14',
  'children_crossing':'\ud83d\udeb8',
  'chipmunk':'\ud83d\udc3f',
  'chocolate_bar':'\ud83c\udf6b',
  'christmas_tree':'\ud83c\udf84',
  'church':'\u26ea\ufe0f',
  'cinema':'\ud83c\udfa6',
  'circus_tent':'\ud83c\udfaa',
  'city_sunrise':'\ud83c\udf07',
  'city_sunset':'\ud83c\udf06',
  'cityscape':'\ud83c\udfd9',
  'cl':'\ud83c\udd91',
  'clamp':'\ud83d\udddc',
  'clap':'\ud83d\udc4f',
  'clapper':'\ud83c\udfac',
  'classical_building':'\ud83c\udfdb',
  'clinking_glasses':'\ud83e\udd42',
  'clipboard':'\ud83d\udccb',
  'clock1':'\ud83d\udd50',
  'clock10':'\ud83d\udd59',
  'clock1030':'\ud83d\udd65',
  'clock11':'\ud83d\udd5a',
  'clock1130':'\ud83d\udd66',
  'clock12':'\ud83d\udd5b',
  'clock1230':'\ud83d\udd67',
  'clock130':'\ud83d\udd5c',
  'clock2':'\ud83d\udd51',
  'clock230':'\ud83d\udd5d',
  'clock3':'\ud83d\udd52',
  'clock330':'\ud83d\udd5e',
  'clock4':'\ud83d\udd53',
  'clock430':'\ud83d\udd5f',
  'clock5':'\ud83d\udd54',
  'clock530':'\ud83d\udd60',
  'clock6':'\ud83d\udd55',
  'clock630':'\ud83d\udd61',
  'clock7':'\ud83d\udd56',
  'clock730':'\ud83d\udd62',
  'clock8':'\ud83d\udd57',
  'clock830':'\ud83d\udd63',
  'clock9':'\ud83d\udd58',
  'clock930':'\ud83d\udd64',
  'closed_book':'\ud83d\udcd5',
  'closed_lock_with_key':'\ud83d\udd10',
  'closed_umbrella':'\ud83c\udf02',
  'cloud':'\u2601\ufe0f',
  'cloud_with_lightning':'\ud83c\udf29',
  'cloud_with_lightning_and_rain':'\u26c8',
  'cloud_with_rain':'\ud83c\udf27',
  'cloud_with_snow':'\ud83c\udf28',
  'clown_face':'\ud83e\udd21',
  'clubs':'\u2663\ufe0f',
  'cocktail':'\ud83c\udf78',
  'coffee':'\u2615\ufe0f',
  'coffin':'\u26b0\ufe0f',
  'cold_sweat':'\ud83d\ude30',
  'comet':'\u2604\ufe0f',
  'computer':'\ud83d\udcbb',
  'computer_mouse':'\ud83d\uddb1',
  'confetti_ball':'\ud83c\udf8a',
  'confounded':'\ud83d\ude16',
  'confused':'\ud83d\ude15',
  'congratulations':'\u3297\ufe0f',
  'construction':'\ud83d\udea7',
  'construction_worker_man':'\ud83d\udc77',
  'construction_worker_woman':'\ud83d\udc77&zwj;\u2640\ufe0f',
  'control_knobs':'\ud83c\udf9b',
  'convenience_store':'\ud83c\udfea',
  'cookie':'\ud83c\udf6a',
  'cool':'\ud83c\udd92',
  'policeman':'\ud83d\udc6e',
  'copyright':'\u00a9\ufe0f',
  'corn':'\ud83c\udf3d',
  'couch_and_lamp':'\ud83d\udecb',
  'couple':'\ud83d\udc6b',
  'couple_with_heart_woman_man':'\ud83d\udc91',
  'couple_with_heart_man_man':'\ud83d\udc68&zwj;\u2764\ufe0f&zwj;\ud83d\udc68',
  'couple_with_heart_woman_woman':'\ud83d\udc69&zwj;\u2764\ufe0f&zwj;\ud83d\udc69',
  'couplekiss_man_man':'\ud83d\udc68&zwj;\u2764\ufe0f&zwj;\ud83d\udc8b&zwj;\ud83d\udc68',
  'couplekiss_man_woman':'\ud83d\udc8f',
  'couplekiss_woman_woman':'\ud83d\udc69&zwj;\u2764\ufe0f&zwj;\ud83d\udc8b&zwj;\ud83d\udc69',
  'cow':'\ud83d\udc2e',
  'cow2':'\ud83d\udc04',
  'cowboy_hat_face':'\ud83e\udd20',
  'crab':'\ud83e\udd80',
  'crayon':'\ud83d\udd8d',
  'credit_card':'\ud83d\udcb3',
  'crescent_moon':'\ud83c\udf19',
  'cricket':'\ud83c\udfcf',
  'crocodile':'\ud83d\udc0a',
  'croissant':'\ud83e\udd50',
  'crossed_fingers':'\ud83e\udd1e',
  'crossed_flags':'\ud83c\udf8c',
  'crossed_swords':'\u2694\ufe0f',
  'crown':'\ud83d\udc51',
  'cry':'\ud83d\ude22',
  'crying_cat_face':'\ud83d\ude3f',
  'crystal_ball':'\ud83d\udd2e',
  'cucumber':'\ud83e\udd52',
  'cupid':'\ud83d\udc98',
  'curly_loop':'\u27b0',
  'currency_exchange':'\ud83d\udcb1',
  'curry':'\ud83c\udf5b',
  'custard':'\ud83c\udf6e',
  'customs':'\ud83d\udec3',
  'cyclone':'\ud83c\udf00',
  'dagger':'\ud83d\udde1',
  'dancer':'\ud83d\udc83',
  'dancing_women':'\ud83d\udc6f',
  'dancing_men':'\ud83d\udc6f&zwj;\u2642\ufe0f',
  'dango':'\ud83c\udf61',
  'dark_sunglasses':'\ud83d\udd76',
  'dart':'\ud83c\udfaf',
  'dash':'\ud83d\udca8',
  'date':'\ud83d\udcc5',
  'deciduous_tree':'\ud83c\udf33',
  'deer':'\ud83e\udd8c',
  'department_store':'\ud83c\udfec',
  'derelict_house':'\ud83c\udfda',
  'desert':'\ud83c\udfdc',
  'desert_island':'\ud83c\udfdd',
  'desktop_computer':'\ud83d\udda5',
  'male_detective':'\ud83d\udd75\ufe0f',
  'diamond_shape_with_a_dot_inside':'\ud83d\udca0',
  'diamonds':'\u2666\ufe0f',
  'disappointed':'\ud83d\ude1e',
  'disappointed_relieved':'\ud83d\ude25',
  'dizzy':'\ud83d\udcab',
  'dizzy_face':'\ud83d\ude35',
  'do_not_litter':'\ud83d\udeaf',
  'dog':'\ud83d\udc36',
  'dog2':'\ud83d\udc15',
  'dollar':'\ud83d\udcb5',
  'dolls':'\ud83c\udf8e',
  'dolphin':'\ud83d\udc2c',
  'door':'\ud83d\udeaa',
  'doughnut':'\ud83c\udf69',
  'dove':'\ud83d\udd4a',
  'dragon':'\ud83d\udc09',
  'dragon_face':'\ud83d\udc32',
  'dress':'\ud83d\udc57',
  'dromedary_camel':'\ud83d\udc2a',
  'drooling_face':'\ud83e\udd24',
  'droplet':'\ud83d\udca7',
  'drum':'\ud83e\udd41',
  'duck':'\ud83e\udd86',
  'dvd':'\ud83d\udcc0',
  'e-mail':'\ud83d\udce7',
  'eagle':'\ud83e\udd85',
  'ear':'\ud83d\udc42',
  'ear_of_rice':'\ud83c\udf3e',
  'earth_africa':'\ud83c\udf0d',
  'earth_americas':'\ud83c\udf0e',
  'earth_asia':'\ud83c\udf0f',
  'egg':'\ud83e\udd5a',
  'eggplant':'\ud83c\udf46',
  'eight_pointed_black_star':'\u2734\ufe0f',
  'eight_spoked_asterisk':'\u2733\ufe0f',
  'electric_plug':'\ud83d\udd0c',
  'elephant':'\ud83d\udc18',
  'email':'\u2709\ufe0f',
  'end':'\ud83d\udd1a',
  'envelope_with_arrow':'\ud83d\udce9',
  'euro':'\ud83d\udcb6',
  'european_castle':'\ud83c\udff0',
  'european_post_office':'\ud83c\udfe4',
  'evergreen_tree':'\ud83c\udf32',
  'exclamation':'\u2757\ufe0f',
  'expressionless':'\ud83d\ude11',
  'eye':'\ud83d\udc41',
  'eye_speech_bubble':'\ud83d\udc41&zwj;\ud83d\udde8',
  'eyeglasses':'\ud83d\udc53',
  'eyes':'\ud83d\udc40',
  'face_with_head_bandage':'\ud83e\udd15',
  'face_with_thermometer':'\ud83e\udd12',
  'fist_oncoming':'\ud83d\udc4a',
  'factory':'\ud83c\udfed',
  'fallen_leaf':'\ud83c\udf42',
  'family_man_woman_boy':'\ud83d\udc6a',
  'family_man_boy':'\ud83d\udc68&zwj;\ud83d\udc66',
  'family_man_boy_boy':'\ud83d\udc68&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
  'family_man_girl':'\ud83d\udc68&zwj;\ud83d\udc67',
  'family_man_girl_boy':'\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
  'family_man_girl_girl':'\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
  'family_man_man_boy':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc66',
  'family_man_man_boy_boy':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
  'family_man_man_girl':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc67',
  'family_man_man_girl_boy':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
  'family_man_man_girl_girl':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
  'family_man_woman_boy_boy':'\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
  'family_man_woman_girl':'\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc67',
  'family_man_woman_girl_boy':'\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
  'family_man_woman_girl_girl':'\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
  'family_woman_boy':'\ud83d\udc69&zwj;\ud83d\udc66',
  'family_woman_boy_boy':'\ud83d\udc69&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
  'family_woman_girl':'\ud83d\udc69&zwj;\ud83d\udc67',
  'family_woman_girl_boy':'\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
  'family_woman_girl_girl':'\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
  'family_woman_woman_boy':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc66',
  'family_woman_woman_boy_boy':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
  'family_woman_woman_girl':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc67',
  'family_woman_woman_girl_boy':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
  'family_woman_woman_girl_girl':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
  'fast_forward':'\u23e9',
  'fax':'\ud83d\udce0',
  'fearful':'\ud83d\ude28',
  'feet':'\ud83d\udc3e',
  'female_detective':'\ud83d\udd75\ufe0f&zwj;\u2640\ufe0f',
  'ferris_wheel':'\ud83c\udfa1',
  'ferry':'\u26f4',
  'field_hockey':'\ud83c\udfd1',
  'file_cabinet':'\ud83d\uddc4',
  'file_folder':'\ud83d\udcc1',
  'film_projector':'\ud83d\udcfd',
  'film_strip':'\ud83c\udf9e',
  'fire':'\ud83d\udd25',
  'fire_engine':'\ud83d\ude92',
  'fireworks':'\ud83c\udf86',
  'first_quarter_moon':'\ud83c\udf13',
  'first_quarter_moon_with_face':'\ud83c\udf1b',
  'fish':'\ud83d\udc1f',
  'fish_cake':'\ud83c\udf65',
  'fishing_pole_and_fish':'\ud83c\udfa3',
  'fist_raised':'\u270a',
  'fist_left':'\ud83e\udd1b',
  'fist_right':'\ud83e\udd1c',
  'flags':'\ud83c\udf8f',
  'flashlight':'\ud83d\udd26',
  'fleur_de_lis':'\u269c\ufe0f',
  'flight_arrival':'\ud83d\udeec',
  'flight_departure':'\ud83d\udeeb',
  'floppy_disk':'\ud83d\udcbe',
  'flower_playing_cards':'\ud83c\udfb4',
  'flushed':'\ud83d\ude33',
  'fog':'\ud83c\udf2b',
  'foggy':'\ud83c\udf01',
  'football':'\ud83c\udfc8',
  'footprints':'\ud83d\udc63',
  'fork_and_knife':'\ud83c\udf74',
  'fountain':'\u26f2\ufe0f',
  'fountain_pen':'\ud83d\udd8b',
  'four_leaf_clover':'\ud83c\udf40',
  'fox_face':'\ud83e\udd8a',
  'framed_picture':'\ud83d\uddbc',
  'free':'\ud83c\udd93',
  'fried_egg':'\ud83c\udf73',
  'fried_shrimp':'\ud83c\udf64',
  'fries':'\ud83c\udf5f',
  'frog':'\ud83d\udc38',
  'frowning':'\ud83d\ude26',
  'frowning_face':'\u2639\ufe0f',
  'frowning_man':'\ud83d\ude4d&zwj;\u2642\ufe0f',
  'frowning_woman':'\ud83d\ude4d',
  'middle_finger':'\ud83d\udd95',
  'fuelpump':'\u26fd\ufe0f',
  'full_moon':'\ud83c\udf15',
  'full_moon_with_face':'\ud83c\udf1d',
  'funeral_urn':'\u26b1\ufe0f',
  'game_die':'\ud83c\udfb2',
  'gear':'\u2699\ufe0f',
  'gem':'\ud83d\udc8e',
  'gemini':'\u264a\ufe0f',
  'ghost':'\ud83d\udc7b',
  'gift':'\ud83c\udf81',
  'gift_heart':'\ud83d\udc9d',
  'girl':'\ud83d\udc67',
  'globe_with_meridians':'\ud83c\udf10',
  'goal_net':'\ud83e\udd45',
  'goat':'\ud83d\udc10',
  'golf':'\u26f3\ufe0f',
  'golfing_man':'\ud83c\udfcc\ufe0f',
  'golfing_woman':'\ud83c\udfcc\ufe0f&zwj;\u2640\ufe0f',
  'gorilla':'\ud83e\udd8d',
  'grapes':'\ud83c\udf47',
  'green_apple':'\ud83c\udf4f',
  'green_book':'\ud83d\udcd7',
  'green_heart':'\ud83d\udc9a',
  'green_salad':'\ud83e\udd57',
  'grey_exclamation':'\u2755',
  'grey_question':'\u2754',
  'grimacing':'\ud83d\ude2c',
  'grin':'\ud83d\ude01',
  'grinning':'\ud83d\ude00',
  'guardsman':'\ud83d\udc82',
  'guardswoman':'\ud83d\udc82&zwj;\u2640\ufe0f',
  'guitar':'\ud83c\udfb8',
  'gun':'\ud83d\udd2b',
  'haircut_woman':'\ud83d\udc87',
  'haircut_man':'\ud83d\udc87&zwj;\u2642\ufe0f',
  'hamburger':'\ud83c\udf54',
  'hammer':'\ud83d\udd28',
  'hammer_and_pick':'\u2692',
  'hammer_and_wrench':'\ud83d\udee0',
  'hamster':'\ud83d\udc39',
  'hand':'\u270b',
  'handbag':'\ud83d\udc5c',
  'handshake':'\ud83e\udd1d',
  'hankey':'\ud83d\udca9',
  'hatched_chick':'\ud83d\udc25',
  'hatching_chick':'\ud83d\udc23',
  'headphones':'\ud83c\udfa7',
  'hear_no_evil':'\ud83d\ude49',
  'heart':'\u2764\ufe0f',
  'heart_decoration':'\ud83d\udc9f',
  'heart_eyes':'\ud83d\ude0d',
  'heart_eyes_cat':'\ud83d\ude3b',
  'heartbeat':'\ud83d\udc93',
  'heartpulse':'\ud83d\udc97',
  'hearts':'\u2665\ufe0f',
  'heavy_check_mark':'\u2714\ufe0f',
  'heavy_division_sign':'\u2797',
  'heavy_dollar_sign':'\ud83d\udcb2',
  'heavy_heart_exclamation':'\u2763\ufe0f',
  'heavy_minus_sign':'\u2796',
  'heavy_multiplication_x':'\u2716\ufe0f',
  'heavy_plus_sign':'\u2795',
  'helicopter':'\ud83d\ude81',
  'herb':'\ud83c\udf3f',
  'hibiscus':'\ud83c\udf3a',
  'high_brightness':'\ud83d\udd06',
  'high_heel':'\ud83d\udc60',
  'hocho':'\ud83d\udd2a',
  'hole':'\ud83d\udd73',
  'honey_pot':'\ud83c\udf6f',
  'horse':'\ud83d\udc34',
  'horse_racing':'\ud83c\udfc7',
  'hospital':'\ud83c\udfe5',
  'hot_pepper':'\ud83c\udf36',
  'hotdog':'\ud83c\udf2d',
  'hotel':'\ud83c\udfe8',
  'hotsprings':'\u2668\ufe0f',
  'hourglass':'\u231b\ufe0f',
  'hourglass_flowing_sand':'\u23f3',
  'house':'\ud83c\udfe0',
  'house_with_garden':'\ud83c\udfe1',
  'houses':'\ud83c\udfd8',
  'hugs':'\ud83e\udd17',
  'hushed':'\ud83d\ude2f',
  'ice_cream':'\ud83c\udf68',
  'ice_hockey':'\ud83c\udfd2',
  'ice_skate':'\u26f8',
  'icecream':'\ud83c\udf66',
  'id':'\ud83c\udd94',
  'ideograph_advantage':'\ud83c\ude50',
  'imp':'\ud83d\udc7f',
  'inbox_tray':'\ud83d\udce5',
  'incoming_envelope':'\ud83d\udce8',
  'tipping_hand_woman':'\ud83d\udc81',
  'information_source':'\u2139\ufe0f',
  'innocent':'\ud83d\ude07',
  'interrobang':'\u2049\ufe0f',
  'iphone':'\ud83d\udcf1',
  'izakaya_lantern':'\ud83c\udfee',
  'jack_o_lantern':'\ud83c\udf83',
  'japan':'\ud83d\uddfe',
  'japanese_castle':'\ud83c\udfef',
  'japanese_goblin':'\ud83d\udc7a',
  'japanese_ogre':'\ud83d\udc79',
  'jeans':'\ud83d\udc56',
  'joy':'\ud83d\ude02',
  'joy_cat':'\ud83d\ude39',
  'joystick':'\ud83d\udd79',
  'kaaba':'\ud83d\udd4b',
  'key':'\ud83d\udd11',
  'keyboard':'\u2328\ufe0f',
  'keycap_ten':'\ud83d\udd1f',
  'kick_scooter':'\ud83d\udef4',
  'kimono':'\ud83d\udc58',
  'kiss':'\ud83d\udc8b',
  'kissing':'\ud83d\ude17',
  'kissing_cat':'\ud83d\ude3d',
  'kissing_closed_eyes':'\ud83d\ude1a',
  'kissing_heart':'\ud83d\ude18',
  'kissing_smiling_eyes':'\ud83d\ude19',
  'kiwi_fruit':'\ud83e\udd5d',
  'koala':'\ud83d\udc28',
  'koko':'\ud83c\ude01',
  'label':'\ud83c\udff7',
  'large_blue_circle':'\ud83d\udd35',
  'large_blue_diamond':'\ud83d\udd37',
  'large_orange_diamond':'\ud83d\udd36',
  'last_quarter_moon':'\ud83c\udf17',
  'last_quarter_moon_with_face':'\ud83c\udf1c',
  'latin_cross':'\u271d\ufe0f',
  'laughing':'\ud83d\ude06',
  'leaves':'\ud83c\udf43',
  'ledger':'\ud83d\udcd2',
  'left_luggage':'\ud83d\udec5',
  'left_right_arrow':'\u2194\ufe0f',
  'leftwards_arrow_with_hook':'\u21a9\ufe0f',
  'lemon':'\ud83c\udf4b',
  'leo':'\u264c\ufe0f',
  'leopard':'\ud83d\udc06',
  'level_slider':'\ud83c\udf9a',
  'libra':'\u264e\ufe0f',
  'light_rail':'\ud83d\ude88',
  'link':'\ud83d\udd17',
  'lion':'\ud83e\udd81',
  'lips':'\ud83d\udc44',
  'lipstick':'\ud83d\udc84',
  'lizard':'\ud83e\udd8e',
  'lock':'\ud83d\udd12',
  'lock_with_ink_pen':'\ud83d\udd0f',
  'lollipop':'\ud83c\udf6d',
  'loop':'\u27bf',
  'loud_sound':'\ud83d\udd0a',
  'loudspeaker':'\ud83d\udce2',
  'love_hotel':'\ud83c\udfe9',
  'love_letter':'\ud83d\udc8c',
  'low_brightness':'\ud83d\udd05',
  'lying_face':'\ud83e\udd25',
  'm':'\u24c2\ufe0f',
  'mag':'\ud83d\udd0d',
  'mag_right':'\ud83d\udd0e',
  'mahjong':'\ud83c\udc04\ufe0f',
  'mailbox':'\ud83d\udceb',
  'mailbox_closed':'\ud83d\udcea',
  'mailbox_with_mail':'\ud83d\udcec',
  'mailbox_with_no_mail':'\ud83d\udced',
  'man':'\ud83d\udc68',
  'man_artist':'\ud83d\udc68&zwj;\ud83c\udfa8',
  'man_astronaut':'\ud83d\udc68&zwj;\ud83d\ude80',
  'man_cartwheeling':'\ud83e\udd38&zwj;\u2642\ufe0f',
  'man_cook':'\ud83d\udc68&zwj;\ud83c\udf73',
  'man_dancing':'\ud83d\udd7a',
  'man_facepalming':'\ud83e\udd26&zwj;\u2642\ufe0f',
  'man_factory_worker':'\ud83d\udc68&zwj;\ud83c\udfed',
  'man_farmer':'\ud83d\udc68&zwj;\ud83c\udf3e',
  'man_firefighter':'\ud83d\udc68&zwj;\ud83d\ude92',
  'man_health_worker':'\ud83d\udc68&zwj;\u2695\ufe0f',
  'man_in_tuxedo':'\ud83e\udd35',
  'man_judge':'\ud83d\udc68&zwj;\u2696\ufe0f',
  'man_juggling':'\ud83e\udd39&zwj;\u2642\ufe0f',
  'man_mechanic':'\ud83d\udc68&zwj;\ud83d\udd27',
  'man_office_worker':'\ud83d\udc68&zwj;\ud83d\udcbc',
  'man_pilot':'\ud83d\udc68&zwj;\u2708\ufe0f',
  'man_playing_handball':'\ud83e\udd3e&zwj;\u2642\ufe0f',
  'man_playing_water_polo':'\ud83e\udd3d&zwj;\u2642\ufe0f',
  'man_scientist':'\ud83d\udc68&zwj;\ud83d\udd2c',
  'man_shrugging':'\ud83e\udd37&zwj;\u2642\ufe0f',
  'man_singer':'\ud83d\udc68&zwj;\ud83c\udfa4',
  'man_student':'\ud83d\udc68&zwj;\ud83c\udf93',
  'man_teacher':'\ud83d\udc68&zwj;\ud83c\udfeb',
  'man_technologist':'\ud83d\udc68&zwj;\ud83d\udcbb',
  'man_with_gua_pi_mao':'\ud83d\udc72',
  'man_with_turban':'\ud83d\udc73',
  'tangerine':'\ud83c\udf4a',
  'mans_shoe':'\ud83d\udc5e',
  'mantelpiece_clock':'\ud83d\udd70',
  'maple_leaf':'\ud83c\udf41',
  'martial_arts_uniform':'\ud83e\udd4b',
  'mask':'\ud83d\ude37',
  'massage_woman':'\ud83d\udc86',
  'massage_man':'\ud83d\udc86&zwj;\u2642\ufe0f',
  'meat_on_bone':'\ud83c\udf56',
  'medal_military':'\ud83c\udf96',
  'medal_sports':'\ud83c\udfc5',
  'mega':'\ud83d\udce3',
  'melon':'\ud83c\udf48',
  'memo':'\ud83d\udcdd',
  'men_wrestling':'\ud83e\udd3c&zwj;\u2642\ufe0f',
  'menorah':'\ud83d\udd4e',
  'mens':'\ud83d\udeb9',
  'metal':'\ud83e\udd18',
  'metro':'\ud83d\ude87',
  'microphone':'\ud83c\udfa4',
  'microscope':'\ud83d\udd2c',
  'milk_glass':'\ud83e\udd5b',
  'milky_way':'\ud83c\udf0c',
  'minibus':'\ud83d\ude90',
  'minidisc':'\ud83d\udcbd',
  'mobile_phone_off':'\ud83d\udcf4',
  'money_mouth_face':'\ud83e\udd11',
  'money_with_wings':'\ud83d\udcb8',
  'moneybag':'\ud83d\udcb0',
  'monkey':'\ud83d\udc12',
  'monkey_face':'\ud83d\udc35',
  'monorail':'\ud83d\ude9d',
  'moon':'\ud83c\udf14',
  'mortar_board':'\ud83c\udf93',
  'mosque':'\ud83d\udd4c',
  'motor_boat':'\ud83d\udee5',
  'motor_scooter':'\ud83d\udef5',
  'motorcycle':'\ud83c\udfcd',
  'motorway':'\ud83d\udee3',
  'mount_fuji':'\ud83d\uddfb',
  'mountain':'\u26f0',
  'mountain_biking_man':'\ud83d\udeb5',
  'mountain_biking_woman':'\ud83d\udeb5&zwj;\u2640\ufe0f',
  'mountain_cableway':'\ud83d\udea0',
  'mountain_railway':'\ud83d\ude9e',
  'mountain_snow':'\ud83c\udfd4',
  'mouse':'\ud83d\udc2d',
  'mouse2':'\ud83d\udc01',
  'movie_camera':'\ud83c\udfa5',
  'moyai':'\ud83d\uddff',
  'mrs_claus':'\ud83e\udd36',
  'muscle':'\ud83d\udcaa',
  'mushroom':'\ud83c\udf44',
  'musical_keyboard':'\ud83c\udfb9',
  'musical_note':'\ud83c\udfb5',
  'musical_score':'\ud83c\udfbc',
  'mute':'\ud83d\udd07',
  'nail_care':'\ud83d\udc85',
  'name_badge':'\ud83d\udcdb',
  'national_park':'\ud83c\udfde',
  'nauseated_face':'\ud83e\udd22',
  'necktie':'\ud83d\udc54',
  'negative_squared_cross_mark':'\u274e',
  'nerd_face':'\ud83e\udd13',
  'neutral_face':'\ud83d\ude10',
  'new':'\ud83c\udd95',
  'new_moon':'\ud83c\udf11',
  'new_moon_with_face':'\ud83c\udf1a',
  'newspaper':'\ud83d\udcf0',
  'newspaper_roll':'\ud83d\uddde',
  'next_track_button':'\u23ed',
  'ng':'\ud83c\udd96',
  'no_good_man':'\ud83d\ude45&zwj;\u2642\ufe0f',
  'no_good_woman':'\ud83d\ude45',
  'night_with_stars':'\ud83c\udf03',
  'no_bell':'\ud83d\udd15',
  'no_bicycles':'\ud83d\udeb3',
  'no_entry':'\u26d4\ufe0f',
  'no_entry_sign':'\ud83d\udeab',
  'no_mobile_phones':'\ud83d\udcf5',
  'no_mouth':'\ud83d\ude36',
  'no_pedestrians':'\ud83d\udeb7',
  'no_smoking':'\ud83d\udead',
  'non-potable_water':'\ud83d\udeb1',
  'nose':'\ud83d\udc43',
  'notebook':'\ud83d\udcd3',
  'notebook_with_decorative_cover':'\ud83d\udcd4',
  'notes':'\ud83c\udfb6',
  'nut_and_bolt':'\ud83d\udd29',
  'o':'\u2b55\ufe0f',
  'o2':'\ud83c\udd7e\ufe0f',
  'ocean':'\ud83c\udf0a',
  'octopus':'\ud83d\udc19',
  'oden':'\ud83c\udf62',
  'office':'\ud83c\udfe2',
  'oil_drum':'\ud83d\udee2',
  'ok':'\ud83c\udd97',
  'ok_hand':'\ud83d\udc4c',
  'ok_man':'\ud83d\ude46&zwj;\u2642\ufe0f',
  'ok_woman':'\ud83d\ude46',
  'old_key':'\ud83d\udddd',
  'older_man':'\ud83d\udc74',
  'older_woman':'\ud83d\udc75',
  'om':'\ud83d\udd49',
  'on':'\ud83d\udd1b',
  'oncoming_automobile':'\ud83d\ude98',
  'oncoming_bus':'\ud83d\ude8d',
  'oncoming_police_car':'\ud83d\ude94',
  'oncoming_taxi':'\ud83d\ude96',
  'open_file_folder':'\ud83d\udcc2',
  'open_hands':'\ud83d\udc50',
  'open_mouth':'\ud83d\ude2e',
  'open_umbrella':'\u2602\ufe0f',
  'ophiuchus':'\u26ce',
  'orange_book':'\ud83d\udcd9',
  'orthodox_cross':'\u2626\ufe0f',
  'outbox_tray':'\ud83d\udce4',
  'owl':'\ud83e\udd89',
  'ox':'\ud83d\udc02',
  'package':'\ud83d\udce6',
  'page_facing_up':'\ud83d\udcc4',
  'page_with_curl':'\ud83d\udcc3',
  'pager':'\ud83d\udcdf',
  'paintbrush':'\ud83d\udd8c',
  'palm_tree':'\ud83c\udf34',
  'pancakes':'\ud83e\udd5e',
  'panda_face':'\ud83d\udc3c',
  'paperclip':'\ud83d\udcce',
  'paperclips':'\ud83d\udd87',
  'parasol_on_ground':'\u26f1',
  'parking':'\ud83c\udd7f\ufe0f',
  'part_alternation_mark':'\u303d\ufe0f',
  'partly_sunny':'\u26c5\ufe0f',
  'passenger_ship':'\ud83d\udef3',
  'passport_control':'\ud83d\udec2',
  'pause_button':'\u23f8',
  'peace_symbol':'\u262e\ufe0f',
  'peach':'\ud83c\udf51',
  'peanuts':'\ud83e\udd5c',
  'pear':'\ud83c\udf50',
  'pen':'\ud83d\udd8a',
  'pencil2':'\u270f\ufe0f',
  'penguin':'\ud83d\udc27',
  'pensive':'\ud83d\ude14',
  'performing_arts':'\ud83c\udfad',
  'persevere':'\ud83d\ude23',
  'person_fencing':'\ud83e\udd3a',
  'pouting_woman':'\ud83d\ude4e',
  'phone':'\u260e\ufe0f',
  'pick':'\u26cf',
  'pig':'\ud83d\udc37',
  'pig2':'\ud83d\udc16',
  'pig_nose':'\ud83d\udc3d',
  'pill':'\ud83d\udc8a',
  'pineapple':'\ud83c\udf4d',
  'ping_pong':'\ud83c\udfd3',
  'pisces':'\u2653\ufe0f',
  'pizza':'\ud83c\udf55',
  'place_of_worship':'\ud83d\uded0',
  'plate_with_cutlery':'\ud83c\udf7d',
  'play_or_pause_button':'\u23ef',
  'point_down':'\ud83d\udc47',
  'point_left':'\ud83d\udc48',
  'point_right':'\ud83d\udc49',
  'point_up':'\u261d\ufe0f',
  'point_up_2':'\ud83d\udc46',
  'police_car':'\ud83d\ude93',
  'policewoman':'\ud83d\udc6e&zwj;\u2640\ufe0f',
  'poodle':'\ud83d\udc29',
  'popcorn':'\ud83c\udf7f',
  'post_office':'\ud83c\udfe3',
  'postal_horn':'\ud83d\udcef',
  'postbox':'\ud83d\udcee',
  'potable_water':'\ud83d\udeb0',
  'potato':'\ud83e\udd54',
  'pouch':'\ud83d\udc5d',
  'poultry_leg':'\ud83c\udf57',
  'pound':'\ud83d\udcb7',
  'rage':'\ud83d\ude21',
  'pouting_cat':'\ud83d\ude3e',
  'pouting_man':'\ud83d\ude4e&zwj;\u2642\ufe0f',
  'pray':'\ud83d\ude4f',
  'prayer_beads':'\ud83d\udcff',
  'pregnant_woman':'\ud83e\udd30',
  'previous_track_button':'\u23ee',
  'prince':'\ud83e\udd34',
  'princess':'\ud83d\udc78',
  'printer':'\ud83d\udda8',
  'purple_heart':'\ud83d\udc9c',
  'purse':'\ud83d\udc5b',
  'pushpin':'\ud83d\udccc',
  'put_litter_in_its_place':'\ud83d\udeae',
  'question':'\u2753',
  'rabbit':'\ud83d\udc30',
  'rabbit2':'\ud83d\udc07',
  'racehorse':'\ud83d\udc0e',
  'racing_car':'\ud83c\udfce',
  'radio':'\ud83d\udcfb',
  'radio_button':'\ud83d\udd18',
  'radioactive':'\u2622\ufe0f',
  'railway_car':'\ud83d\ude83',
  'railway_track':'\ud83d\udee4',
  'rainbow':'\ud83c\udf08',
  'rainbow_flag':'\ud83c\udff3\ufe0f&zwj;\ud83c\udf08',
  'raised_back_of_hand':'\ud83e\udd1a',
  'raised_hand_with_fingers_splayed':'\ud83d\udd90',
  'raised_hands':'\ud83d\ude4c',
  'raising_hand_woman':'\ud83d\ude4b',
  'raising_hand_man':'\ud83d\ude4b&zwj;\u2642\ufe0f',
  'ram':'\ud83d\udc0f',
  'ramen':'\ud83c\udf5c',
  'rat':'\ud83d\udc00',
  'record_button':'\u23fa',
  'recycle':'\u267b\ufe0f',
  'red_circle':'\ud83d\udd34',
  'registered':'\u00ae\ufe0f',
  'relaxed':'\u263a\ufe0f',
  'relieved':'\ud83d\ude0c',
  'reminder_ribbon':'\ud83c\udf97',
  'repeat':'\ud83d\udd01',
  'repeat_one':'\ud83d\udd02',
  'rescue_worker_helmet':'\u26d1',
  'restroom':'\ud83d\udebb',
  'revolving_hearts':'\ud83d\udc9e',
  'rewind':'\u23ea',
  'rhinoceros':'\ud83e\udd8f',
  'ribbon':'\ud83c\udf80',
  'rice':'\ud83c\udf5a',
  'rice_ball':'\ud83c\udf59',
  'rice_cracker':'\ud83c\udf58',
  'rice_scene':'\ud83c\udf91',
  'right_anger_bubble':'\ud83d\uddef',
  'ring':'\ud83d\udc8d',
  'robot':'\ud83e\udd16',
  'rocket':'\ud83d\ude80',
  'rofl':'\ud83e\udd23',
  'roll_eyes':'\ud83d\ude44',
  'roller_coaster':'\ud83c\udfa2',
  'rooster':'\ud83d\udc13',
  'rose':'\ud83c\udf39',
  'rosette':'\ud83c\udff5',
  'rotating_light':'\ud83d\udea8',
  'round_pushpin':'\ud83d\udccd',
  'rowing_man':'\ud83d\udea3',
  'rowing_woman':'\ud83d\udea3&zwj;\u2640\ufe0f',
  'rugby_football':'\ud83c\udfc9',
  'running_man':'\ud83c\udfc3',
  'running_shirt_with_sash':'\ud83c\udfbd',
  'running_woman':'\ud83c\udfc3&zwj;\u2640\ufe0f',
  'sa':'\ud83c\ude02\ufe0f',
  'sagittarius':'\u2650\ufe0f',
  'sake':'\ud83c\udf76',
  'sandal':'\ud83d\udc61',
  'santa':'\ud83c\udf85',
  'satellite':'\ud83d\udce1',
  'saxophone':'\ud83c\udfb7',
  'school':'\ud83c\udfeb',
  'school_satchel':'\ud83c\udf92',
  'scissors':'\u2702\ufe0f',
  'scorpion':'\ud83e\udd82',
  'scorpius':'\u264f\ufe0f',
  'scream':'\ud83d\ude31',
  'scream_cat':'\ud83d\ude40',
  'scroll':'\ud83d\udcdc',
  'seat':'\ud83d\udcba',
  'secret':'\u3299\ufe0f',
  'see_no_evil':'\ud83d\ude48',
  'seedling':'\ud83c\udf31',
  'selfie':'\ud83e\udd33',
  'shallow_pan_of_food':'\ud83e\udd58',
  'shamrock':'\u2618\ufe0f',
  'shark':'\ud83e\udd88',
  'shaved_ice':'\ud83c\udf67',
  'sheep':'\ud83d\udc11',
  'shell':'\ud83d\udc1a',
  'shield':'\ud83d\udee1',
  'shinto_shrine':'\u26e9',
  'ship':'\ud83d\udea2',
  'shirt':'\ud83d\udc55',
  'shopping':'\ud83d\udecd',
  'shopping_cart':'\ud83d\uded2',
  'shower':'\ud83d\udebf',
  'shrimp':'\ud83e\udd90',
  'signal_strength':'\ud83d\udcf6',
  'six_pointed_star':'\ud83d\udd2f',
  'ski':'\ud83c\udfbf',
  'skier':'\u26f7',
  'skull':'\ud83d\udc80',
  'skull_and_crossbones':'\u2620\ufe0f',
  'sleeping':'\ud83d\ude34',
  'sleeping_bed':'\ud83d\udecc',
  'sleepy':'\ud83d\ude2a',
  'slightly_frowning_face':'\ud83d\ude41',
  'slightly_smiling_face':'\ud83d\ude42',
  'slot_machine':'\ud83c\udfb0',
  'small_airplane':'\ud83d\udee9',
  'small_blue_diamond':'\ud83d\udd39',
  'small_orange_diamond':'\ud83d\udd38',
  'small_red_triangle':'\ud83d\udd3a',
  'small_red_triangle_down':'\ud83d\udd3b',
  'smile':'\ud83d\ude04',
  'smile_cat':'\ud83d\ude38',
  'smiley':'\ud83d\ude03',
  'smiley_cat':'\ud83d\ude3a',
  'smiling_imp':'\ud83d\ude08',
  'smirk':'\ud83d\ude0f',
  'smirk_cat':'\ud83d\ude3c',
  'smoking':'\ud83d\udeac',
  'snail':'\ud83d\udc0c',
  'snake':'\ud83d\udc0d',
  'sneezing_face':'\ud83e\udd27',
  'snowboarder':'\ud83c\udfc2',
  'snowflake':'\u2744\ufe0f',
  'snowman':'\u26c4\ufe0f',
  'snowman_with_snow':'\u2603\ufe0f',
  'sob':'\ud83d\ude2d',
  'soccer':'\u26bd\ufe0f',
  'soon':'\ud83d\udd1c',
  'sos':'\ud83c\udd98',
  'sound':'\ud83d\udd09',
  'space_invader':'\ud83d\udc7e',
  'spades':'\u2660\ufe0f',
  'spaghetti':'\ud83c\udf5d',
  'sparkle':'\u2747\ufe0f',
  'sparkler':'\ud83c\udf87',
  'sparkles':'\u2728',
  'sparkling_heart':'\ud83d\udc96',
  'speak_no_evil':'\ud83d\ude4a',
  'speaker':'\ud83d\udd08',
  'speaking_head':'\ud83d\udde3',
  'speech_balloon':'\ud83d\udcac',
  'speedboat':'\ud83d\udea4',
  'spider':'\ud83d\udd77',
  'spider_web':'\ud83d\udd78',
  'spiral_calendar':'\ud83d\uddd3',
  'spiral_notepad':'\ud83d\uddd2',
  'spoon':'\ud83e\udd44',
  'squid':'\ud83e\udd91',
  'stadium':'\ud83c\udfdf',
  'star':'\u2b50\ufe0f',
  'star2':'\ud83c\udf1f',
  'star_and_crescent':'\u262a\ufe0f',
  'star_of_david':'\u2721\ufe0f',
  'stars':'\ud83c\udf20',
  'station':'\ud83d\ude89',
  'statue_of_liberty':'\ud83d\uddfd',
  'steam_locomotive':'\ud83d\ude82',
  'stew':'\ud83c\udf72',
  'stop_button':'\u23f9',
  'stop_sign':'\ud83d\uded1',
  'stopwatch':'\u23f1',
  'straight_ruler':'\ud83d\udccf',
  'strawberry':'\ud83c\udf53',
  'stuck_out_tongue':'\ud83d\ude1b',
  'stuck_out_tongue_closed_eyes':'\ud83d\ude1d',
  'stuck_out_tongue_winking_eye':'\ud83d\ude1c',
  'studio_microphone':'\ud83c\udf99',
  'stuffed_flatbread':'\ud83e\udd59',
  'sun_behind_large_cloud':'\ud83c\udf25',
  'sun_behind_rain_cloud':'\ud83c\udf26',
  'sun_behind_small_cloud':'\ud83c\udf24',
  'sun_with_face':'\ud83c\udf1e',
  'sunflower':'\ud83c\udf3b',
  'sunglasses':'\ud83d\ude0e',
  'sunny':'\u2600\ufe0f',
  'sunrise':'\ud83c\udf05',
  'sunrise_over_mountains':'\ud83c\udf04',
  'surfing_man':'\ud83c\udfc4',
  'surfing_woman':'\ud83c\udfc4&zwj;\u2640\ufe0f',
  'sushi':'\ud83c\udf63',
  'suspension_railway':'\ud83d\ude9f',
  'sweat':'\ud83d\ude13',
  'sweat_drops':'\ud83d\udca6',
  'sweat_smile':'\ud83d\ude05',
  'sweet_potato':'\ud83c\udf60',
  'swimming_man':'\ud83c\udfca',
  'swimming_woman':'\ud83c\udfca&zwj;\u2640\ufe0f',
  'symbols':'\ud83d\udd23',
  'synagogue':'\ud83d\udd4d',
  'syringe':'\ud83d\udc89',
  'taco':'\ud83c\udf2e',
  'tada':'\ud83c\udf89',
  'tanabata_tree':'\ud83c\udf8b',
  'taurus':'\u2649\ufe0f',
  'taxi':'\ud83d\ude95',
  'tea':'\ud83c\udf75',
  'telephone_receiver':'\ud83d\udcde',
  'telescope':'\ud83d\udd2d',
  'tennis':'\ud83c\udfbe',
  'tent':'\u26fa\ufe0f',
  'thermometer':'\ud83c\udf21',
  'thinking':'\ud83e\udd14',
  'thought_balloon':'\ud83d\udcad',
  'ticket':'\ud83c\udfab',
  'tickets':'\ud83c\udf9f',
  'tiger':'\ud83d\udc2f',
  'tiger2':'\ud83d\udc05',
  'timer_clock':'\u23f2',
  'tipping_hand_man':'\ud83d\udc81&zwj;\u2642\ufe0f',
  'tired_face':'\ud83d\ude2b',
  'tm':'\u2122\ufe0f',
  'toilet':'\ud83d\udebd',
  'tokyo_tower':'\ud83d\uddfc',
  'tomato':'\ud83c\udf45',
  'tongue':'\ud83d\udc45',
  'top':'\ud83d\udd1d',
  'tophat':'\ud83c\udfa9',
  'tornado':'\ud83c\udf2a',
  'trackball':'\ud83d\uddb2',
  'tractor':'\ud83d\ude9c',
  'traffic_light':'\ud83d\udea5',
  'train':'\ud83d\ude8b',
  'train2':'\ud83d\ude86',
  'tram':'\ud83d\ude8a',
  'triangular_flag_on_post':'\ud83d\udea9',
  'triangular_ruler':'\ud83d\udcd0',
  'trident':'\ud83d\udd31',
  'triumph':'\ud83d\ude24',
  'trolleybus':'\ud83d\ude8e',
  'trophy':'\ud83c\udfc6',
  'tropical_drink':'\ud83c\udf79',
  'tropical_fish':'\ud83d\udc20',
  'truck':'\ud83d\ude9a',
  'trumpet':'\ud83c\udfba',
  'tulip':'\ud83c\udf37',
  'tumbler_glass':'\ud83e\udd43',
  'turkey':'\ud83e\udd83',
  'turtle':'\ud83d\udc22',
  'tv':'\ud83d\udcfa',
  'twisted_rightwards_arrows':'\ud83d\udd00',
  'two_hearts':'\ud83d\udc95',
  'two_men_holding_hands':'\ud83d\udc6c',
  'two_women_holding_hands':'\ud83d\udc6d',
  'u5272':'\ud83c\ude39',
  'u5408':'\ud83c\ude34',
  'u55b6':'\ud83c\ude3a',
  'u6307':'\ud83c\ude2f\ufe0f',
  'u6708':'\ud83c\ude37\ufe0f',
  'u6709':'\ud83c\ude36',
  'u6e80':'\ud83c\ude35',
  'u7121':'\ud83c\ude1a\ufe0f',
  'u7533':'\ud83c\ude38',
  'u7981':'\ud83c\ude32',
  'u7a7a':'\ud83c\ude33',
  'umbrella':'\u2614\ufe0f',
  'unamused':'\ud83d\ude12',
  'underage':'\ud83d\udd1e',
  'unicorn':'\ud83e\udd84',
  'unlock':'\ud83d\udd13',
  'up':'\ud83c\udd99',
  'upside_down_face':'\ud83d\ude43',
  'v':'\u270c\ufe0f',
  'vertical_traffic_light':'\ud83d\udea6',
  'vhs':'\ud83d\udcfc',
  'vibration_mode':'\ud83d\udcf3',
  'video_camera':'\ud83d\udcf9',
  'video_game':'\ud83c\udfae',
  'violin':'\ud83c\udfbb',
  'virgo':'\u264d\ufe0f',
  'volcano':'\ud83c\udf0b',
  'volleyball':'\ud83c\udfd0',
  'vs':'\ud83c\udd9a',
  'vulcan_salute':'\ud83d\udd96',
  'walking_man':'\ud83d\udeb6',
  'walking_woman':'\ud83d\udeb6&zwj;\u2640\ufe0f',
  'waning_crescent_moon':'\ud83c\udf18',
  'waning_gibbous_moon':'\ud83c\udf16',
  'warning':'\u26a0\ufe0f',
  'wastebasket':'\ud83d\uddd1',
  'watch':'\u231a\ufe0f',
  'water_buffalo':'\ud83d\udc03',
  'watermelon':'\ud83c\udf49',
  'wave':'\ud83d\udc4b',
  'wavy_dash':'\u3030\ufe0f',
  'waxing_crescent_moon':'\ud83c\udf12',
  'wc':'\ud83d\udebe',
  'weary':'\ud83d\ude29',
  'wedding':'\ud83d\udc92',
  'weight_lifting_man':'\ud83c\udfcb\ufe0f',
  'weight_lifting_woman':'\ud83c\udfcb\ufe0f&zwj;\u2640\ufe0f',
  'whale':'\ud83d\udc33',
  'whale2':'\ud83d\udc0b',
  'wheel_of_dharma':'\u2638\ufe0f',
  'wheelchair':'\u267f\ufe0f',
  'white_check_mark':'\u2705',
  'white_circle':'\u26aa\ufe0f',
  'white_flag':'\ud83c\udff3\ufe0f',
  'white_flower':'\ud83d\udcae',
  'white_large_square':'\u2b1c\ufe0f',
  'white_medium_small_square':'\u25fd\ufe0f',
  'white_medium_square':'\u25fb\ufe0f',
  'white_small_square':'\u25ab\ufe0f',
  'white_square_button':'\ud83d\udd33',
  'wilted_flower':'\ud83e\udd40',
  'wind_chime':'\ud83c\udf90',
  'wind_face':'\ud83c\udf2c',
  'wine_glass':'\ud83c\udf77',
  'wink':'\ud83d\ude09',
  'wolf':'\ud83d\udc3a',
  'woman':'\ud83d\udc69',
  'woman_artist':'\ud83d\udc69&zwj;\ud83c\udfa8',
  'woman_astronaut':'\ud83d\udc69&zwj;\ud83d\ude80',
  'woman_cartwheeling':'\ud83e\udd38&zwj;\u2640\ufe0f',
  'woman_cook':'\ud83d\udc69&zwj;\ud83c\udf73',
  'woman_facepalming':'\ud83e\udd26&zwj;\u2640\ufe0f',
  'woman_factory_worker':'\ud83d\udc69&zwj;\ud83c\udfed',
  'woman_farmer':'\ud83d\udc69&zwj;\ud83c\udf3e',
  'woman_firefighter':'\ud83d\udc69&zwj;\ud83d\ude92',
  'woman_health_worker':'\ud83d\udc69&zwj;\u2695\ufe0f',
  'woman_judge':'\ud83d\udc69&zwj;\u2696\ufe0f',
  'woman_juggling':'\ud83e\udd39&zwj;\u2640\ufe0f',
  'woman_mechanic':'\ud83d\udc69&zwj;\ud83d\udd27',
  'woman_office_worker':'\ud83d\udc69&zwj;\ud83d\udcbc',
  'woman_pilot':'\ud83d\udc69&zwj;\u2708\ufe0f',
  'woman_playing_handball':'\ud83e\udd3e&zwj;\u2640\ufe0f',
  'woman_playing_water_polo':'\ud83e\udd3d&zwj;\u2640\ufe0f',
  'woman_scientist':'\ud83d\udc69&zwj;\ud83d\udd2c',
  'woman_shrugging':'\ud83e\udd37&zwj;\u2640\ufe0f',
  'woman_singer':'\ud83d\udc69&zwj;\ud83c\udfa4',
  'woman_student':'\ud83d\udc69&zwj;\ud83c\udf93',
  'woman_teacher':'\ud83d\udc69&zwj;\ud83c\udfeb',
  'woman_technologist':'\ud83d\udc69&zwj;\ud83d\udcbb',
  'woman_with_turban':'\ud83d\udc73&zwj;\u2640\ufe0f',
  'womans_clothes':'\ud83d\udc5a',
  'womans_hat':'\ud83d\udc52',
  'women_wrestling':'\ud83e\udd3c&zwj;\u2640\ufe0f',
  'womens':'\ud83d\udeba',
  'world_map':'\ud83d\uddfa',
  'worried':'\ud83d\ude1f',
  'wrench':'\ud83d\udd27',
  'writing_hand':'\u270d\ufe0f',
  'x':'\u274c',
  'yellow_heart':'\ud83d\udc9b',
  'yen':'\ud83d\udcb4',
  'yin_yang':'\u262f\ufe0f',
  'yum':'\ud83d\ude0b',
  'zap':'\u26a1\ufe0f',
  'zipper_mouth_face':'\ud83e\udd10',
  'zzz':'\ud83d\udca4',

  /* special emojis :P */
  'octocat':  '<img alt=":octocat:" height="20" width="20" align="absmiddle" src="https://assets-cdn.github.com/images/icons/emoji/octocat.png">',
  'showdown': '<span style="font-family: \'Anonymous Pro\', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;">S</span>'
};

/**
 * Created by Estevao on 31-05-2015.
 */

/**
 * Showdown Converter class
 * @class
 * @param {object} [converterOptions]
 * @returns {Converter}
 */
showdown.Converter = function (converterOptions) {

  var
      /**
       * Options used by this converter
       * @private
       * @type {{}}
       */
      options = {},

      /**
       * Language extensions used by this converter
       * @private
       * @type {Array}
       */
      langExtensions = [],

      /**
       * Output modifiers extensions used by this converter
       * @private
       * @type {Array}
       */
      outputModifiers = [],

      /**
       * Event listeners
       * @private
       * @type {{}}
       */
      listeners = {},

      /**
       * The flavor set in this converter
       */
      setConvFlavor = setFlavor,

      /**
       * Metadata of the document
       * @type {{parsed: {}, raw: string, format: string}}
       */
      metadata = {
        parsed: {},
        raw: '',
        format: ''
      };

  _constructor();

  /**
   * Converter constructor
   * @private
   */
  function _constructor () {
    converterOptions = converterOptions || {};

    for (var gOpt in globalOptions) {
      if (globalOptions.hasOwnProperty(gOpt)) {
        options[gOpt] = globalOptions[gOpt];
      }
    }

    // Merge options
    if (typeof converterOptions === 'object') {
      for (var opt in converterOptions) {
        if (converterOptions.hasOwnProperty(opt)) {
          options[opt] = converterOptions[opt];
        }
      }
    } else {
      throw Error('Converter expects the passed parameter to be an object, but ' + typeof converterOptions +
      ' was passed instead.');
    }

    if (options.extensions) {
      showdown.helper.forEach(options.extensions, _parseExtension);
    }
  }

  /**
   * Parse extension
   * @param {*} ext
   * @param {string} [name='']
   * @private
   */
  function _parseExtension (ext, name) {

    name = name || null;
    // If it's a string, the extension was previously loaded
    if (showdown.helper.isString(ext)) {
      ext = showdown.helper.stdExtName(ext);
      name = ext;

      // LEGACY_SUPPORT CODE
      if (showdown.extensions[ext]) {
        console.warn('DEPRECATION WARNING: ' + ext + ' is an old extension that uses a deprecated loading method.' +
          'Please inform the developer that the extension should be updated!');
        legacyExtensionLoading(showdown.extensions[ext], ext);
        return;
        // END LEGACY SUPPORT CODE

      } else if (!showdown.helper.isUndefined(extensions[ext])) {
        ext = extensions[ext];

      } else {
        throw Error('Extension "' + ext + '" could not be loaded. It was either not found or is not a valid extension.');
      }
    }

    if (typeof ext === 'function') {
      ext = ext();
    }

    if (!showdown.helper.isArray(ext)) {
      ext = [ext];
    }

    var validExt = validate(ext, name);
    if (!validExt.valid) {
      throw Error(validExt.error);
    }

    for (var i = 0; i < ext.length; ++i) {
      switch (ext[i].type) {

        case 'lang':
          langExtensions.push(ext[i]);
          break;

        case 'output':
          outputModifiers.push(ext[i]);
          break;
      }
      if (ext[i].hasOwnProperty('listeners')) {
        for (var ln in ext[i].listeners) {
          if (ext[i].listeners.hasOwnProperty(ln)) {
            listen(ln, ext[i].listeners[ln]);
          }
        }
      }
    }

  }

  /**
   * LEGACY_SUPPORT
   * @param {*} ext
   * @param {string} name
   */
  function legacyExtensionLoading (ext, name) {
    if (typeof ext === 'function') {
      ext = ext(new showdown.Converter());
    }
    if (!showdown.helper.isArray(ext)) {
      ext = [ext];
    }
    var valid = validate(ext, name);

    if (!valid.valid) {
      throw Error(valid.error);
    }

    for (var i = 0; i < ext.length; ++i) {
      switch (ext[i].type) {
        case 'lang':
          langExtensions.push(ext[i]);
          break;
        case 'output':
          outputModifiers.push(ext[i]);
          break;
        default:// should never reach here
          throw Error('Extension loader error: Type unrecognized!!!');
      }
    }
  }

  /**
   * Listen to an event
   * @param {string} name
   * @param {function} callback
   */
  function listen (name, callback) {
    if (!showdown.helper.isString(name)) {
      throw Error('Invalid argument in converter.listen() method: name must be a string, but ' + typeof name + ' given');
    }

    if (typeof callback !== 'function') {
      throw Error('Invalid argument in converter.listen() method: callback must be a function, but ' + typeof callback + ' given');
    }

    if (!listeners.hasOwnProperty(name)) {
      listeners[name] = [];
    }
    listeners[name].push(callback);
  }

  function rTrimInputText (text) {
    var rsp = text.match(/^\s*/)[0].length,
        rgx = new RegExp('^\\s{0,' + rsp + '}', 'gm');
    return text.replace(rgx, '');
  }

  /**
   * Dispatch an event
   * @private
   * @param {string} evtName Event name
   * @param {string} text Text
   * @param {{}} options Converter Options
   * @param {{}} globals
   * @returns {string}
   */
  this._dispatch = function dispatch (evtName, text, options, globals) {
    if (listeners.hasOwnProperty(evtName)) {
      for (var ei = 0; ei < listeners[evtName].length; ++ei) {
        var nText = listeners[evtName][ei](evtName, text, this, options, globals);
        if (nText && typeof nText !== 'undefined') {
          text = nText;
        }
      }
    }
    return text;
  };

  /**
   * Listen to an event
   * @param {string} name
   * @param {function} callback
   * @returns {showdown.Converter}
   */
  this.listen = function (name, callback) {
    listen(name, callback);
    return this;
  };

  /**
   * Converts a markdown string into HTML
   * @param {string} text
   * @returns {*}
   */
  this.makeHtml = function (text) {
    //check if text is not falsy
    if (!text) {
      return text;
    }

    var globals = {
      gHtmlBlocks:     [],
      gHtmlMdBlocks:   [],
      gHtmlSpans:      [],
      gUrls:           {},
      gTitles:         {},
      gDimensions:     {},
      gListLevel:      0,
      hashLinkCounts:  {},
      langExtensions:  langExtensions,
      outputModifiers: outputModifiers,
      converter:       this,
      ghCodeBlocks:    [],
      metadata: {
        parsed: {},
        raw: '',
        format: ''
      }
    };

    // This lets us use ¨ trema as an escape char to avoid md5 hashes
    // The choice of character is arbitrary; anything that isn't
    // magic in Markdown will work.
    text = text.replace(/¨/g, '¨T');

    // Replace $ with ¨D
    // RegExp interprets $ as a special character
    // when it's in a replacement string
    text = text.replace(/\$/g, '¨D');

    // Standardize line endings
    text = text.replace(/\r\n/g, '\n'); // DOS to Unix
    text = text.replace(/\r/g, '\n'); // Mac to Unix

    // Stardardize line spaces
    text = text.replace(/\u00A0/g, '&nbsp;');

    if (options.smartIndentationFix) {
      text = rTrimInputText(text);
    }

    // Make sure text begins and ends with a couple of newlines:
    text = '\n\n' + text + '\n\n';

    // detab
    text = showdown.subParser('detab')(text, options, globals);

    /**
     * Strip any lines consisting only of spaces and tabs.
     * This makes subsequent regexs easier to write, because we can
     * match consecutive blank lines with /\n+/ instead of something
     * contorted like /[ \t]*\n+/
     */
    text = text.replace(/^[ \t]+$/mg, '');

    //run languageExtensions
    showdown.helper.forEach(langExtensions, function (ext) {
      text = showdown.subParser('runExtension')(ext, text, options, globals);
    });

    // run the sub parsers
    text = showdown.subParser('metadata')(text, options, globals);
    text = showdown.subParser('hashPreCodeTags')(text, options, globals);
    text = showdown.subParser('githubCodeBlocks')(text, options, globals);
    text = showdown.subParser('hashHTMLBlocks')(text, options, globals);
    text = showdown.subParser('hashCodeTags')(text, options, globals);
    text = showdown.subParser('stripLinkDefinitions')(text, options, globals);
    text = showdown.subParser('blockGamut')(text, options, globals);
    text = showdown.subParser('unhashHTMLSpans')(text, options, globals);
    text = showdown.subParser('unescapeSpecialChars')(text, options, globals);

    // attacklab: Restore dollar signs
    text = text.replace(/¨D/g, '$$');

    // attacklab: Restore tremas
    text = text.replace(/¨T/g, '¨');

    // render a complete html document instead of a partial if the option is enabled
    text = showdown.subParser('completeHTMLDocument')(text, options, globals);

    // Run output modifiers
    showdown.helper.forEach(outputModifiers, function (ext) {
      text = showdown.subParser('runExtension')(ext, text, options, globals);
    });

    // update metadata
    metadata = globals.metadata;
    return text;
  };

  /**
   * Converts an HTML string into a markdown string
   * @param src
   * @param [HTMLParser] A WHATWG DOM and HTML parser, such as JSDOM. If none is supplied, window.document will be used.
   * @returns {string}
   */
  this.makeMarkdown = this.makeMd = function (src, HTMLParser) {

    // replace \r\n with \n
    src = src.replace(/\r\n/g, '\n');
    src = src.replace(/\r/g, '\n'); // old macs

    // due to an edge case, we need to find this: > <
    // to prevent removing of non silent white spaces
    // ex: <em>this is</em> <strong>sparta</strong>
    src = src.replace(/>[ \t]+</, '>¨NBSP;<');

    if (!HTMLParser) {
      if (window && window.document) {
        HTMLParser = window.document;
      } else {
        throw new Error('HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM');
      }
    }

    var doc = HTMLParser.createElement('div');
    doc.innerHTML = src;

    var globals = {
      preList: substitutePreCodeTags(doc)
    };

    // remove all newlines and collapse spaces
    clean(doc);

    // some stuff, like accidental reference links must now be escaped
    // TODO
    // doc.innerHTML = doc.innerHTML.replace(/\[[\S\t ]]/);

    var nodes = doc.childNodes,
        mdDoc = '';

    for (var i = 0; i < nodes.length; i++) {
      mdDoc += showdown.subParser('makeMarkdown.node')(nodes[i], globals);
    }

    function clean (node) {
      for (var n = 0; n < node.childNodes.length; ++n) {
        var child = node.childNodes[n];
        if (child.nodeType === 3) {
          if (!/\S/.test(child.nodeValue)) {
            node.removeChild(child);
            --n;
          } else {
            child.nodeValue = child.nodeValue.split('\n').join(' ');
            child.nodeValue = child.nodeValue.replace(/(\s)+/g, '$1');
          }
        } else if (child.nodeType === 1) {
          clean(child);
        }
      }
    }

    // find all pre tags and replace contents with placeholder
    // we need this so that we can remove all indentation from html
    // to ease up parsing
    function substitutePreCodeTags (doc) {

      var pres = doc.querySelectorAll('pre'),
          presPH = [];

      for (var i = 0; i < pres.length; ++i) {

        if (pres[i].childElementCount === 1 && pres[i].firstChild.tagName.toLowerCase() === 'code') {
          var content = pres[i].firstChild.innerHTML.trim(),
              language = pres[i].firstChild.getAttribute('data-language') || '';

          // if data-language attribute is not defined, then we look for class language-*
          if (language === '') {
            var classes = pres[i].firstChild.className.split(' ');
            for (var c = 0; c < classes.length; ++c) {
              var matches = classes[c].match(/^language-(.+)$/);
              if (matches !== null) {
                language = matches[1];
                break;
              }
            }
          }

          // unescape html entities in content
          content = showdown.helper.unescapeHTMLEntities(content);

          presPH.push(content);
          pres[i].outerHTML = '<precode language="' + language + '" precodenum="' + i.toString() + '"></precode>';
        } else {
          presPH.push(pres[i].innerHTML);
          pres[i].innerHTML = '';
          pres[i].setAttribute('prenum', i.toString());
        }
      }
      return presPH;
    }

    return mdDoc;
  };

  /**
   * Set an option of this Converter instance
   * @param {string} key
   * @param {*} value
   */
  this.setOption = function (key, value) {
    options[key] = value;
  };

  /**
   * Get the option of this Converter instance
   * @param {string} key
   * @returns {*}
   */
  this.getOption = function (key) {
    return options[key];
  };

  /**
   * Get the options of this Converter instance
   * @returns {{}}
   */
  this.getOptions = function () {
    return options;
  };

  /**
   * Add extension to THIS converter
   * @param {{}} extension
   * @param {string} [name=null]
   */
  this.addExtension = function (extension, name) {
    name = name || null;
    _parseExtension(extension, name);
  };

  /**
   * Use a global registered extension with THIS converter
   * @param {string} extensionName Name of the previously registered extension
   */
  this.useExtension = function (extensionName) {
    _parseExtension(extensionName);
  };

  /**
   * Set the flavor THIS converter should use
   * @param {string} name
   */
  this.setFlavor = function (name) {
    if (!flavor.hasOwnProperty(name)) {
      throw Error(name + ' flavor was not found');
    }
    var preset = flavor[name];
    setConvFlavor = name;
    for (var option in preset) {
      if (preset.hasOwnProperty(option)) {
        options[option] = preset[option];
      }
    }
  };

  /**
   * Get the currently set flavor of this converter
   * @returns {string}
   */
  this.getFlavor = function () {
    return setConvFlavor;
  };

  /**
   * Remove an extension from THIS converter.
   * Note: This is a costly operation. It's better to initialize a new converter
   * and specify the extensions you wish to use
   * @param {Array} extension
   */
  this.removeExtension = function (extension) {
    if (!showdown.helper.isArray(extension)) {
      extension = [extension];
    }
    for (var a = 0; a < extension.length; ++a) {
      var ext = extension[a];
      for (var i = 0; i < langExtensions.length; ++i) {
        if (langExtensions[i] === ext) {
          langExtensions[i].splice(i, 1);
        }
      }
      for (var ii = 0; ii < outputModifiers.length; ++i) {
        if (outputModifiers[ii] === ext) {
          outputModifiers[ii].splice(i, 1);
        }
      }
    }
  };

  /**
   * Get all extension of THIS converter
   * @returns {{language: Array, output: Array}}
   */
  this.getAllExtensions = function () {
    return {
      language: langExtensions,
      output: outputModifiers
    };
  };

  /**
   * Get the metadata of the previously parsed document
   * @param raw
   * @returns {string|{}}
   */
  this.getMetadata = function (raw) {
    if (raw) {
      return metadata.raw;
    } else {
      return metadata.parsed;
    }
  };

  /**
   * Get the metadata format of the previously parsed document
   * @returns {string}
   */
  this.getMetadataFormat = function () {
    return metadata.format;
  };

  /**
   * Private: set a single key, value metadata pair
   * @param {string} key
   * @param {string} value
   */
  this._setMetadataPair = function (key, value) {
    metadata.parsed[key] = value;
  };

  /**
   * Private: set metadata format
   * @param {string} format
   */
  this._setMetadataFormat = function (format) {
    metadata.format = format;
  };

  /**
   * Private: set metadata raw text
   * @param {string} raw
   */
  this._setMetadataRaw = function (raw) {
    metadata.raw = raw;
  };
};

/**
 * Turn Markdown link shortcuts into XHTML <a> tags.
 */
showdown.subParser('anchors', function (text, options, globals) {

  text = globals.converter._dispatch('anchors.before', text, options, globals);

  var writeAnchorTag = function (wholeMatch, linkText, linkId, url, m5, m6, title) {
    if (showdown.helper.isUndefined(title)) {
      title = '';
    }
    linkId = linkId.toLowerCase();

    // Special case for explicit empty url
    if (wholeMatch.search(/\(<?\s*>? ?(['"].*['"])?\)$/m) > -1) {
      url = '';
    } else if (!url) {
      if (!linkId) {
        // lower-case and turn embedded newlines into spaces
        linkId = linkText.toLowerCase().replace(/ ?\n/g, ' ');
      }
      url = '#' + linkId;

      if (!showdown.helper.isUndefined(globals.gUrls[linkId])) {
        url = globals.gUrls[linkId];
        if (!showdown.helper.isUndefined(globals.gTitles[linkId])) {
          title = globals.gTitles[linkId];
        }
      } else {
        return wholeMatch;
      }
    }

    //url = showdown.helper.escapeCharacters(url, '*_', false); // replaced line to improve performance
    url = url.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);

    var result = '<a href="' + url + '"';

    if (title !== '' && title !== null) {
      title = title.replace(/"/g, '&quot;');
      //title = showdown.helper.escapeCharacters(title, '*_', false); // replaced line to improve performance
      title = title.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
      result += ' title="' + title + '"';
    }

    // optionLinksInNewWindow only applies
    // to external links. Hash links (#) open in same page
    if (options.openLinksInNewWindow && !/^#/.test(url)) {
      // escaped _
      result += ' rel="noopener noreferrer" target="¨E95Eblank"';
    }

    result += '>' + linkText + '</a>';

    return result;
  };

  // First, handle reference-style links: [link text] [id]
  text = text.replace(/\[((?:\[[^\]]*]|[^\[\]])*)] ?(?:\n *)?\[(.*?)]()()()()/g, writeAnchorTag);

  // Next, inline-style links: [link text](url "optional title")
  // cases with crazy urls like ./image/cat1).png
  text = text.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<([^>]*)>(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,
    writeAnchorTag);

  // normal cases
  text = text.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,
    writeAnchorTag);

  // handle reference-style shortcuts: [link text]
  // These must come last in case you've also got [link test][1]
  // or [link test](/foo)
  text = text.replace(/\[([^\[\]]+)]()()()()()/g, writeAnchorTag);

  // Lastly handle GithubMentions if option is enabled
  if (options.ghMentions) {
    text = text.replace(/(^|\s)(\\)?(@([a-z\d]+(?:[a-z\d.-]+?[a-z\d]+)*))/gmi, function (wm, st, escape, mentions, username) {
      if (escape === '\\') {
        return st + mentions;
      }

      //check if options.ghMentionsLink is a string
      if (!showdown.helper.isString(options.ghMentionsLink)) {
        throw new Error('ghMentionsLink option must be a string');
      }
      var lnk = options.ghMentionsLink.replace(/\{u}/g, username),
          target = '';
      if (options.openLinksInNewWindow) {
        target = ' rel="noopener noreferrer" target="¨E95Eblank"';
      }
      return st + '<a href="' + lnk + '"' + target + '>' + mentions + '</a>';
    });
  }

  text = globals.converter._dispatch('anchors.after', text, options, globals);
  return text;
});

// url allowed chars [a-z\d_.~:/?#[]@!$&'()*+,;=-]

var simpleURLRegex  = /([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+?\.[^'">\s]+?)()(\1)?(?=\s|$)(?!["<>])/gi,
    simpleURLRegex2 = /([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s]+?)([.!?,()\[\]])?(\1)?(?=\s|$)(?!["<>])/gi,
    delimUrlRegex   = /()<(((https?|ftp|dict):\/\/|www\.)[^'">\s]+)()>()/gi,
    simpleMailRegex = /(^|\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(?=$|\s)/gmi,
    delimMailRegex  = /<()(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi,

    replaceLink = function (options) {
      return function (wm, leadingMagicChars, link, m2, m3, trailingPunctuation, trailingMagicChars) {
        link = link.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
        var lnkTxt = link,
            append = '',
            target = '',
            lmc    = leadingMagicChars || '',
            tmc    = trailingMagicChars || '';
        if (/^www\./i.test(link)) {
          link = link.replace(/^www\./i, 'http://www.');
        }
        if (options.excludeTrailingPunctuationFromURLs && trailingPunctuation) {
          append = trailingPunctuation;
        }
        if (options.openLinksInNewWindow) {
          target = ' rel="noopener noreferrer" target="¨E95Eblank"';
        }
        return lmc + '<a href="' + link + '"' + target + '>' + lnkTxt + '</a>' + append + tmc;
      };
    },

    replaceMail = function (options, globals) {
      return function (wholeMatch, b, mail) {
        var href = 'mailto:';
        b = b || '';
        mail = showdown.subParser('unescapeSpecialChars')(mail, options, globals);
        if (options.encodeEmails) {
          href = showdown.helper.encodeEmailAddress(href + mail);
          mail = showdown.helper.encodeEmailAddress(mail);
        } else {
          href = href + mail;
        }
        return b + '<a href="' + href + '">' + mail + '</a>';
      };
    };

showdown.subParser('autoLinks', function (text, options, globals) {

  text = globals.converter._dispatch('autoLinks.before', text, options, globals);

  text = text.replace(delimUrlRegex, replaceLink(options));
  text = text.replace(delimMailRegex, replaceMail(options, globals));

  text = globals.converter._dispatch('autoLinks.after', text, options, globals);

  return text;
});

showdown.subParser('simplifiedAutoLinks', function (text, options, globals) {

  if (!options.simplifiedAutoLink) {
    return text;
  }

  text = globals.converter._dispatch('simplifiedAutoLinks.before', text, options, globals);

  if (options.excludeTrailingPunctuationFromURLs) {
    text = text.replace(simpleURLRegex2, replaceLink(options));
  } else {
    text = text.replace(simpleURLRegex, replaceLink(options));
  }
  text = text.replace(simpleMailRegex, replaceMail(options, globals));

  text = globals.converter._dispatch('simplifiedAutoLinks.after', text, options, globals);

  return text;
});

/**
 * These are all the transformations that form block-level
 * tags like paragraphs, headers, and list items.
 */
showdown.subParser('blockGamut', function (text, options, globals) {

  text = globals.converter._dispatch('blockGamut.before', text, options, globals);

  // we parse blockquotes first so that we can have headings and hrs
  // inside blockquotes
  text = showdown.subParser('blockQuotes')(text, options, globals);
  text = showdown.subParser('headers')(text, options, globals);

  // Do Horizontal Rules:
  text = showdown.subParser('horizontalRule')(text, options, globals);

  text = showdown.subParser('lists')(text, options, globals);
  text = showdown.subParser('codeBlocks')(text, options, globals);
  text = showdown.subParser('tables')(text, options, globals);

  // We already ran _HashHTMLBlocks() before, in Markdown(), but that
  // was to escape raw HTML in the original Markdown source. This time,
  // we're escaping the markup we've just created, so that we don't wrap
  // <p> tags around block-level tags.
  text = showdown.subParser('hashHTMLBlocks')(text, options, globals);
  text = showdown.subParser('paragraphs')(text, options, globals);

  text = globals.converter._dispatch('blockGamut.after', text, options, globals);

  return text;
});

showdown.subParser('blockQuotes', function (text, options, globals) {

  text = globals.converter._dispatch('blockQuotes.before', text, options, globals);

  // add a couple extra lines after the text and endtext mark
  text = text + '\n\n';

  var rgx = /(^ {0,3}>[ \t]?.+\n(.+\n)*\n*)+/gm;

  if (options.splitAdjacentBlockquotes) {
    rgx = /^ {0,3}>[\s\S]*?(?:\n\n)/gm;
  }

  text = text.replace(rgx, function (bq) {
    // attacklab: hack around Konqueror 3.5.4 bug:
    // "----------bug".replace(/^-/g,"") == "bug"
    bq = bq.replace(/^[ \t]*>[ \t]?/gm, ''); // trim one level of quoting

    // attacklab: clean up hack
    bq = bq.replace(/¨0/g, '');

    bq = bq.replace(/^[ \t]+$/gm, ''); // trim whitespace-only lines
    bq = showdown.subParser('githubCodeBlocks')(bq, options, globals);
    bq = showdown.subParser('blockGamut')(bq, options, globals); // recurse

    bq = bq.replace(/(^|\n)/g, '$1  ');
    // These leading spaces screw with <pre> content, so we need to fix that:
    bq = bq.replace(/(\s*<pre>[^\r]+?<\/pre>)/gm, function (wholeMatch, m1) {
      var pre = m1;
      // attacklab: hack around Konqueror 3.5.4 bug:
      pre = pre.replace(/^  /mg, '¨0');
      pre = pre.replace(/¨0/g, '');
      return pre;
    });

    return showdown.subParser('hashBlock')('<blockquote>\n' + bq + '\n</blockquote>', options, globals);
  });

  text = globals.converter._dispatch('blockQuotes.after', text, options, globals);
  return text;
});

/**
 * Process Markdown `<pre><code>` blocks.
 */
showdown.subParser('codeBlocks', function (text, options, globals) {

  text = globals.converter._dispatch('codeBlocks.before', text, options, globals);

  // sentinel workarounds for lack of \A and \Z, safari\khtml bug
  text += '¨0';

  var pattern = /(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=¨0))/g;
  text = text.replace(pattern, function (wholeMatch, m1, m2) {
    var codeblock = m1,
        nextChar = m2,
        end = '\n';

    codeblock = showdown.subParser('outdent')(codeblock, options, globals);
    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);
    codeblock = showdown.subParser('detab')(codeblock, options, globals);
    codeblock = codeblock.replace(/^\n+/g, ''); // trim leading newlines
    codeblock = codeblock.replace(/\n+$/g, ''); // trim trailing newlines

    if (options.omitExtraWLInCodeBlocks) {
      end = '';
    }

    codeblock = '<pre><code>' + codeblock + end + '</code></pre>';

    return showdown.subParser('hashBlock')(codeblock, options, globals) + nextChar;
  });

  // strip sentinel
  text = text.replace(/¨0/, '');

  text = globals.converter._dispatch('codeBlocks.after', text, options, globals);
  return text;
});

/**
 *
 *   *  Backtick quotes are used for <code></code> spans.
 *
 *   *  You can use multiple backticks as the delimiters if you want to
 *     include literal backticks in the code span. So, this input:
 *
 *         Just type ``foo `bar` baz`` at the prompt.
 *
 *       Will translate to:
 *
 *         <p>Just type <code>foo `bar` baz</code> at the prompt.</p>
 *
 *    There's no arbitrary limit to the number of backticks you
 *    can use as delimters. If you need three consecutive backticks
 *    in your code, use four for delimiters, etc.
 *
 *  *  You can use spaces to get literal backticks at the edges:
 *
 *         ... type `` `bar` `` ...
 *
 *       Turns to:
 *
 *         ... type <code>`bar`</code> ...
 */
showdown.subParser('codeSpans', function (text, options, globals) {

  text = globals.converter._dispatch('codeSpans.before', text, options, globals);

  if (typeof text === 'undefined') {
    text = '';
  }
  text = text.replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm,
    function (wholeMatch, m1, m2, m3) {
      var c = m3;
      c = c.replace(/^([ \t]*)/g, '');	// leading whitespace
      c = c.replace(/[ \t]*$/g, '');	// trailing whitespace
      c = showdown.subParser('encodeCode')(c, options, globals);
      c = m1 + '<code>' + c + '</code>';
      c = showdown.subParser('hashHTMLSpans')(c, options, globals);
      return c;
    }
  );

  text = globals.converter._dispatch('codeSpans.after', text, options, globals);
  return text;
});

/**
 * Create a full HTML document from the processed markdown
 */
showdown.subParser('completeHTMLDocument', function (text, options, globals) {

  if (!options.completeHTMLDocument) {
    return text;
  }

  text = globals.converter._dispatch('completeHTMLDocument.before', text, options, globals);

  var doctype = 'html',
      doctypeParsed = '<!DOCTYPE HTML>\n',
      title = '',
      charset = '<meta charset="utf-8">\n',
      lang = '',
      metadata = '';

  if (typeof globals.metadata.parsed.doctype !== 'undefined') {
    doctypeParsed = '<!DOCTYPE ' +  globals.metadata.parsed.doctype + '>\n';
    doctype = globals.metadata.parsed.doctype.toString().toLowerCase();
    if (doctype === 'html' || doctype === 'html5') {
      charset = '<meta charset="utf-8">';
    }
  }

  for (var meta in globals.metadata.parsed) {
    if (globals.metadata.parsed.hasOwnProperty(meta)) {
      switch (meta.toLowerCase()) {
        case 'doctype':
          break;

        case 'title':
          title = '<title>' +  globals.metadata.parsed.title + '</title>\n';
          break;

        case 'charset':
          if (doctype === 'html' || doctype === 'html5') {
            charset = '<meta charset="' + globals.metadata.parsed.charset + '">\n';
          } else {
            charset = '<meta name="charset" content="' + globals.metadata.parsed.charset + '">\n';
          }
          break;

        case 'language':
        case 'lang':
          lang = ' lang="' + globals.metadata.parsed[meta] + '"';
          metadata += '<meta name="' + meta + '" content="' + globals.metadata.parsed[meta] + '">\n';
          break;

        default:
          metadata += '<meta name="' + meta + '" content="' + globals.metadata.parsed[meta] + '">\n';
      }
    }
  }

  text = doctypeParsed + '<html' + lang + '>\n<head>\n' + title + charset + metadata + '</head>\n<body>\n' + text.trim() + '\n</body>\n</html>';

  text = globals.converter._dispatch('completeHTMLDocument.after', text, options, globals);
  return text;
});

/**
 * Convert all tabs to spaces
 */
showdown.subParser('detab', function (text, options, globals) {
  text = globals.converter._dispatch('detab.before', text, options, globals);

  // expand first n-1 tabs
  text = text.replace(/\t(?=\t)/g, '    '); // g_tab_width

  // replace the nth with two sentinels
  text = text.replace(/\t/g, '¨A¨B');

  // use the sentinel to anchor our regex so it doesn't explode
  text = text.replace(/¨B(.+?)¨A/g, function (wholeMatch, m1) {
    var leadingText = m1,
        numSpaces = 4 - leadingText.length % 4;  // g_tab_width

    // there *must* be a better way to do this:
    for (var i = 0; i < numSpaces; i++) {
      leadingText += ' ';
    }

    return leadingText;
  });

  // clean up sentinels
  text = text.replace(/¨A/g, '    ');  // g_tab_width
  text = text.replace(/¨B/g, '');

  text = globals.converter._dispatch('detab.after', text, options, globals);
  return text;
});

showdown.subParser('ellipsis', function (text, options, globals) {

  text = globals.converter._dispatch('ellipsis.before', text, options, globals);

  text = text.replace(/\.\.\./g, '…');

  text = globals.converter._dispatch('ellipsis.after', text, options, globals);

  return text;
});

/**
 * Turn emoji codes into emojis
 *
 * List of supported emojis: https://github.com/showdownjs/showdown/wiki/Emojis
 */
showdown.subParser('emoji', function (text, options, globals) {

  if (!options.emoji) {
    return text;
  }

  text = globals.converter._dispatch('emoji.before', text, options, globals);

  var emojiRgx = /:([\S]+?):/g;

  text = text.replace(emojiRgx, function (wm, emojiCode) {
    if (showdown.helper.emojis.hasOwnProperty(emojiCode)) {
      return showdown.helper.emojis[emojiCode];
    }
    return wm;
  });

  text = globals.converter._dispatch('emoji.after', text, options, globals);

  return text;
});

/**
 * Smart processing for ampersands and angle brackets that need to be encoded.
 */
showdown.subParser('encodeAmpsAndAngles', function (text, options, globals) {
  text = globals.converter._dispatch('encodeAmpsAndAngles.before', text, options, globals);

  // Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:
  // http://bumppo.net/projects/amputator/
  text = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g, '&amp;');

  // Encode naked <'s
  text = text.replace(/<(?![a-z\/?$!])/gi, '&lt;');

  // Encode <
  text = text.replace(/</g, '&lt;');

  // Encode >
  text = text.replace(/>/g, '&gt;');

  text = globals.converter._dispatch('encodeAmpsAndAngles.after', text, options, globals);
  return text;
});

/**
 * Returns the string, with after processing the following backslash escape sequences.
 *
 * attacklab: The polite way to do this is with the new escapeCharacters() function:
 *
 *    text = escapeCharacters(text,"\\",true);
 *    text = escapeCharacters(text,"`*_{}[]()>#+-.!",true);
 *
 * ...but we're sidestepping its use of the (slow) RegExp constructor
 * as an optimization for Firefox.  This function gets called a LOT.
 */
showdown.subParser('encodeBackslashEscapes', function (text, options, globals) {
  text = globals.converter._dispatch('encodeBackslashEscapes.before', text, options, globals);

  text = text.replace(/\\(\\)/g, showdown.helper.escapeCharactersCallback);
  text = text.replace(/\\([`*_{}\[\]()>#+.!~=|-])/g, showdown.helper.escapeCharactersCallback);

  text = globals.converter._dispatch('encodeBackslashEscapes.after', text, options, globals);
  return text;
});

/**
 * Encode/escape certain characters inside Markdown code runs.
 * The point is that in code, these characters are literals,
 * and lose their special Markdown meanings.
 */
showdown.subParser('encodeCode', function (text, options, globals) {

  text = globals.converter._dispatch('encodeCode.before', text, options, globals);

  // Encode all ampersands; HTML entities are not
  // entities within a Markdown code span.
  text = text
    .replace(/&/g, '&amp;')
  // Do the angle bracket song and dance:
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
  // Now, escape characters that are magic in Markdown:
    .replace(/([*_{}\[\]\\=~-])/g, showdown.helper.escapeCharactersCallback);

  text = globals.converter._dispatch('encodeCode.after', text, options, globals);
  return text;
});

/**
 * Within tags -- meaning between < and > -- encode [\ ` * _ ~ =] so they
 * don't conflict with their use in Markdown for code, italics and strong.
 */
showdown.subParser('escapeSpecialCharsWithinTagAttributes', function (text, options, globals) {
  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.before', text, options, globals);

  // Build a regex to find HTML tags.
  var tags     = /<\/?[a-z\d_:-]+(?:[\s]+[\s\S]+?)?>/gi,
      comments = /<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi;

  text = text.replace(tags, function (wholeMatch) {
    return wholeMatch
      .replace(/(.)<\/?code>(?=.)/g, '$1`')
      .replace(/([\\`*_~=|])/g, showdown.helper.escapeCharactersCallback);
  });

  text = text.replace(comments, function (wholeMatch) {
    return wholeMatch
      .replace(/([\\`*_~=|])/g, showdown.helper.escapeCharactersCallback);
  });

  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.after', text, options, globals);
  return text;
});

/**
 * Handle github codeblocks prior to running HashHTML so that
 * HTML contained within the codeblock gets escaped properly
 * Example:
 * ```ruby
 *     def hello_world(x)
 *       puts "Hello, #{x}"
 *     end
 * ```
 */
showdown.subParser('githubCodeBlocks', function (text, options, globals) {

  // early exit if option is not enabled
  if (!options.ghCodeBlocks) {
    return text;
  }

  text = globals.converter._dispatch('githubCodeBlocks.before', text, options, globals);

  text += '¨0';

  text = text.replace(/(?:^|\n)(?: {0,3})(```+|~~~+)(?: *)([^\s`~]*)\n([\s\S]*?)\n(?: {0,3})\1/g, function (wholeMatch, delim, language, codeblock) {
    var end = (options.omitExtraWLInCodeBlocks) ? '' : '\n';

    // First parse the github code block
    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);
    codeblock = showdown.subParser('detab')(codeblock, options, globals);
    codeblock = codeblock.replace(/^\n+/g, ''); // trim leading newlines
    codeblock = codeblock.replace(/\n+$/g, ''); // trim trailing whitespace

    codeblock = '<pre><code' + (language ? ' class="' + language + ' language-' + language + '"' : '') + '>' + codeblock + end + '</code></pre>';

    codeblock = showdown.subParser('hashBlock')(codeblock, options, globals);

    // Since GHCodeblocks can be false positives, we need to
    // store the primitive text and the parsed text in a global var,
    // and then return a token
    return '\n\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\n\n';
  });

  // attacklab: strip sentinel
  text = text.replace(/¨0/, '');

  return globals.converter._dispatch('githubCodeBlocks.after', text, options, globals);
});

showdown.subParser('hashBlock', function (text, options, globals) {
  text = globals.converter._dispatch('hashBlock.before', text, options, globals);
  text = text.replace(/(^\n+|\n+$)/g, '');
  text = '\n\n¨K' + (globals.gHtmlBlocks.push(text) - 1) + 'K\n\n';
  text = globals.converter._dispatch('hashBlock.after', text, options, globals);
  return text;
});

/**
 * Hash and escape <code> elements that should not be parsed as markdown
 */
showdown.subParser('hashCodeTags', function (text, options, globals) {
  text = globals.converter._dispatch('hashCodeTags.before', text, options, globals);

  var repFunc = function (wholeMatch, match, left, right) {
    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;
    return '¨C' + (globals.gHtmlSpans.push(codeblock) - 1) + 'C';
  };

  // Hash naked <code>
  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '<code\\b[^>]*>', '</code>', 'gim');

  text = globals.converter._dispatch('hashCodeTags.after', text, options, globals);
  return text;
});

showdown.subParser('hashElement', function (text, options, globals) {

  return function (wholeMatch, m1) {
    var blockText = m1;

    // Undo double lines
    blockText = blockText.replace(/\n\n/g, '\n');
    blockText = blockText.replace(/^\n/, '');

    // strip trailing blank lines
    blockText = blockText.replace(/\n+$/g, '');

    // Replace the element text with a marker ("¨KxK" where x is its key)
    blockText = '\n\n¨K' + (globals.gHtmlBlocks.push(blockText) - 1) + 'K\n\n';

    return blockText;
  };
});

showdown.subParser('hashHTMLBlocks', function (text, options, globals) {
  text = globals.converter._dispatch('hashHTMLBlocks.before', text, options, globals);

  var blockTags = [
        'pre',
        'div',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'blockquote',
        'table',
        'dl',
        'ol',
        'ul',
        'script',
        'noscript',
        'form',
        'fieldset',
        'iframe',
        'math',
        'style',
        'section',
        'header',
        'footer',
        'nav',
        'article',
        'aside',
        'address',
        'audio',
        'canvas',
        'figure',
        'hgroup',
        'output',
        'video',
        'p'
      ],
      repFunc = function (wholeMatch, match, left, right) {
        var txt = wholeMatch;
        // check if this html element is marked as markdown
        // if so, it's contents should be parsed as markdown
        if (left.search(/\bmarkdown\b/) !== -1) {
          txt = left + globals.converter.makeHtml(match) + right;
        }
        return '\n\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\n\n';
      };

  if (options.backslashEscapesHTMLTags) {
    // encode backslash escaped HTML tags
    text = text.replace(/\\<(\/?[^>]+?)>/g, function (wm, inside) {
      return '&lt;' + inside + '&gt;';
    });
  }

  // hash HTML Blocks
  for (var i = 0; i < blockTags.length; ++i) {

    var opTagPos,
        rgx1     = new RegExp('^ {0,3}(<' + blockTags[i] + '\\b[^>]*>)', 'im'),
        patLeft  = '<' + blockTags[i] + '\\b[^>]*>',
        patRight = '</' + blockTags[i] + '>';
    // 1. Look for the first position of the first opening HTML tag in the text
    while ((opTagPos = showdown.helper.regexIndexOf(text, rgx1)) !== -1) {

      // if the HTML tag is \ escaped, we need to escape it and break


      //2. Split the text in that position
      var subTexts = showdown.helper.splitAtIndex(text, opTagPos),
          //3. Match recursively
          newSubText1 = showdown.helper.replaceRecursiveRegExp(subTexts[1], repFunc, patLeft, patRight, 'im');

      // prevent an infinite loop
      if (newSubText1 === subTexts[1]) {
        break;
      }
      text = subTexts[0].concat(newSubText1);
    }
  }
  // HR SPECIAL CASE
  text = text.replace(/(\n {0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g,
    showdown.subParser('hashElement')(text, options, globals));

  // Special case for standalone HTML comments
  text = showdown.helper.replaceRecursiveRegExp(text, function (txt) {
    return '\n\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\n\n';
  }, '^ {0,3}<!--', '-->', 'gm');

  // PHP and ASP-style processor instructions (<?...?> and <%...%>)
  text = text.replace(/(?:\n\n)( {0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g,
    showdown.subParser('hashElement')(text, options, globals));

  text = globals.converter._dispatch('hashHTMLBlocks.after', text, options, globals);
  return text;
});

/**
 * Hash span elements that should not be parsed as markdown
 */
showdown.subParser('hashHTMLSpans', function (text, options, globals) {
  text = globals.converter._dispatch('hashHTMLSpans.before', text, options, globals);

  function hashHTMLSpan (html) {
    return '¨C' + (globals.gHtmlSpans.push(html) - 1) + 'C';
  }

  // Hash Self Closing tags
  text = text.replace(/<[^>]+?\/>/gi, function (wm) {
    return hashHTMLSpan(wm);
  });

  // Hash tags without properties
  text = text.replace(/<([^>]+?)>[\s\S]*?<\/\1>/g, function (wm) {
    return hashHTMLSpan(wm);
  });

  // Hash tags with properties
  text = text.replace(/<([^>]+?)\s[^>]+?>[\s\S]*?<\/\1>/g, function (wm) {
    return hashHTMLSpan(wm);
  });

  // Hash self closing tags without />
  text = text.replace(/<[^>]+?>/gi, function (wm) {
    return hashHTMLSpan(wm);
  });

  /*showdown.helper.matchRecursiveRegExp(text, '<code\\b[^>]*>', '</code>', 'gi');*/

  text = globals.converter._dispatch('hashHTMLSpans.after', text, options, globals);
  return text;
});

/**
 * Unhash HTML spans
 */
showdown.subParser('unhashHTMLSpans', function (text, options, globals) {
  text = globals.converter._dispatch('unhashHTMLSpans.before', text, options, globals);

  for (var i = 0; i < globals.gHtmlSpans.length; ++i) {
    var repText = globals.gHtmlSpans[i],
        // limiter to prevent infinite loop (assume 10 as limit for recurse)
        limit = 0;

    while (/¨C(\d+)C/.test(repText)) {
      var num = RegExp.$1;
      repText = repText.replace('¨C' + num + 'C', globals.gHtmlSpans[num]);
      if (limit === 10) {
        console.error('maximum nesting of 10 spans reached!!!');
        break;
      }
      ++limit;
    }
    text = text.replace('¨C' + i + 'C', repText);
  }

  text = globals.converter._dispatch('unhashHTMLSpans.after', text, options, globals);
  return text;
});

/**
 * Hash and escape <pre><code> elements that should not be parsed as markdown
 */
showdown.subParser('hashPreCodeTags', function (text, options, globals) {
  text = globals.converter._dispatch('hashPreCodeTags.before', text, options, globals);

  var repFunc = function (wholeMatch, match, left, right) {
    // encode html entities
    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;
    return '\n\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\n\n';
  };

  // Hash <pre><code>
  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '^ {0,3}<pre\\b[^>]*>\\s*<code\\b[^>]*>', '^ {0,3}</code>\\s*</pre>', 'gim');

  text = globals.converter._dispatch('hashPreCodeTags.after', text, options, globals);
  return text;
});

showdown.subParser('headers', function (text, options, globals) {

  text = globals.converter._dispatch('headers.before', text, options, globals);

  var headerLevelStart = (isNaN(parseInt(options.headerLevelStart))) ? 1 : parseInt(options.headerLevelStart),

      // Set text-style headers:
      //	Header 1
      //	========
      //
      //	Header 2
      //	--------
      //
      setextRegexH1 = (options.smoothLivePreview) ? /^(.+)[ \t]*\n={2,}[ \t]*\n+/gm : /^(.+)[ \t]*\n=+[ \t]*\n+/gm,
      setextRegexH2 = (options.smoothLivePreview) ? /^(.+)[ \t]*\n-{2,}[ \t]*\n+/gm : /^(.+)[ \t]*\n-+[ \t]*\n+/gm;

  text = text.replace(setextRegexH1, function (wholeMatch, m1) {

    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),
        hID = (options.noHeaderId) ? '' : ' id="' + headerId(m1) + '"',
        hLevel = headerLevelStart,
        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';
    return showdown.subParser('hashBlock')(hashBlock, options, globals);
  });

  text = text.replace(setextRegexH2, function (matchFound, m1) {
    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),
        hID = (options.noHeaderId) ? '' : ' id="' + headerId(m1) + '"',
        hLevel = headerLevelStart + 1,
        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';
    return showdown.subParser('hashBlock')(hashBlock, options, globals);
  });

  // atx-style headers:
  //  # Header 1
  //  ## Header 2
  //  ## Header 2 with closing hashes ##
  //  ...
  //  ###### Header 6
  //
  var atxStyle = (options.requireSpaceBeforeHeadingText) ? /^(#{1,6})[ \t]+(.+?)[ \t]*#*\n+/gm : /^(#{1,6})[ \t]*(.+?)[ \t]*#*\n+/gm;

  text = text.replace(atxStyle, function (wholeMatch, m1, m2) {
    var hText = m2;
    if (options.customizedHeaderId) {
      hText = m2.replace(/\s?\{([^{]+?)}\s*$/, '');
    }

    var span = showdown.subParser('spanGamut')(hText, options, globals),
        hID = (options.noHeaderId) ? '' : ' id="' + headerId(m2) + '"',
        hLevel = headerLevelStart - 1 + m1.length,
        header = '<h' + hLevel + hID + '>' + span + '</h' + hLevel + '>';

    return showdown.subParser('hashBlock')(header, options, globals);
  });

  function headerId (m) {
    var title,
        prefix;

    // It is separate from other options to allow combining prefix and customized
    if (options.customizedHeaderId) {
      var match = m.match(/\{([^{]+?)}\s*$/);
      if (match && match[1]) {
        m = match[1];
      }
    }

    title = m;

    // Prefix id to prevent causing inadvertent pre-existing style matches.
    if (showdown.helper.isString(options.prefixHeaderId)) {
      prefix = options.prefixHeaderId;
    } else if (options.prefixHeaderId === true) {
      prefix = 'section-';
    } else {
      prefix = '';
    }

    if (!options.rawPrefixHeaderId) {
      title = prefix + title;
    }

    if (options.ghCompatibleHeaderId) {
      title = title
        .replace(/ /g, '-')
        // replace previously escaped chars (&, ¨ and $)
        .replace(/&amp;/g, '')
        .replace(/¨T/g, '')
        .replace(/¨D/g, '')
        // replace rest of the chars (&~$ are repeated as they might have been escaped)
        // borrowed from github's redcarpet (some they should produce similar results)
        .replace(/[&+$,\/:;=?@"#{}|^¨~\[\]`\\*)(%.!'<>]/g, '')
        .toLowerCase();
    } else if (options.rawHeaderId) {
      title = title
        .replace(/ /g, '-')
        // replace previously escaped chars (&, ¨ and $)
        .replace(/&amp;/g, '&')
        .replace(/¨T/g, '¨')
        .replace(/¨D/g, '$')
        // replace " and '
        .replace(/["']/g, '-')
        .toLowerCase();
    } else {
      title = title
        .replace(/[^\w]/g, '')
        .toLowerCase();
    }

    if (options.rawPrefixHeaderId) {
      title = prefix + title;
    }

    if (globals.hashLinkCounts[title]) {
      title = title + '-' + (globals.hashLinkCounts[title]++);
    } else {
      globals.hashLinkCounts[title] = 1;
    }
    return title;
  }

  text = globals.converter._dispatch('headers.after', text, options, globals);
  return text;
});

/**
 * Turn Markdown link shortcuts into XHTML <a> tags.
 */
showdown.subParser('horizontalRule', function (text, options, globals) {
  text = globals.converter._dispatch('horizontalRule.before', text, options, globals);

  var key = showdown.subParser('hashBlock')('<hr />', options, globals);
  text = text.replace(/^ {0,2}( ?-){3,}[ \t]*$/gm, key);
  text = text.replace(/^ {0,2}( ?\*){3,}[ \t]*$/gm, key);
  text = text.replace(/^ {0,2}( ?_){3,}[ \t]*$/gm, key);

  text = globals.converter._dispatch('horizontalRule.after', text, options, globals);
  return text;
});

/**
 * Turn Markdown image shortcuts into <img> tags.
 */
showdown.subParser('images', function (text, options, globals) {

  text = globals.converter._dispatch('images.before', text, options, globals);

  var inlineRegExp      = /!\[([^\]]*?)][ \t]*()\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,
      crazyRegExp       = /!\[([^\]]*?)][ \t]*()\([ \t]?<([^>]*)>(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(?:(["'])([^"]*?)\6))?[ \t]?\)/g,
      base64RegExp      = /!\[([^\]]*?)][ \t]*()\([ \t]?<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,
      referenceRegExp   = /!\[([^\]]*?)] ?(?:\n *)?\[([\s\S]*?)]()()()()()/g,
      refShortcutRegExp = /!\[([^\[\]]+)]()()()()()/g;

  function writeImageTagBase64 (wholeMatch, altText, linkId, url, width, height, m5, title) {
    url = url.replace(/\s/g, '');
    return writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title);
  }

  function writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title) {

    var gUrls   = globals.gUrls,
        gTitles = globals.gTitles,
        gDims   = globals.gDimensions;

    linkId = linkId.toLowerCase();

    if (!title) {
      title = '';
    }
    // Special case for explicit empty url
    if (wholeMatch.search(/\(<?\s*>? ?(['"].*['"])?\)$/m) > -1) {
      url = '';

    } else if (url === '' || url === null) {
      if (linkId === '' || linkId === null) {
        // lower-case and turn embedded newlines into spaces
        linkId = altText.toLowerCase().replace(/ ?\n/g, ' ');
      }
      url = '#' + linkId;

      if (!showdown.helper.isUndefined(gUrls[linkId])) {
        url = gUrls[linkId];
        if (!showdown.helper.isUndefined(gTitles[linkId])) {
          title = gTitles[linkId];
        }
        if (!showdown.helper.isUndefined(gDims[linkId])) {
          width = gDims[linkId].width;
          height = gDims[linkId].height;
        }
      } else {
        return wholeMatch;
      }
    }

    altText = altText
      .replace(/"/g, '&quot;')
    //altText = showdown.helper.escapeCharacters(altText, '*_', false);
      .replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
    //url = showdown.helper.escapeCharacters(url, '*_', false);
    url = url.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
    var result = '<img src="' + url + '" alt="' + altText + '"';

    if (title && showdown.helper.isString(title)) {
      title = title
        .replace(/"/g, '&quot;')
      //title = showdown.helper.escapeCharacters(title, '*_', false);
        .replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
      result += ' title="' + title + '"';
    }

    if (width && height) {
      width  = (width === '*') ? 'auto' : width;
      height = (height === '*') ? 'auto' : height;

      result += ' width="' + width + '"';
      result += ' height="' + height + '"';
    }

    result += ' />';

    return result;
  }

  // First, handle reference-style labeled images: ![alt text][id]
  text = text.replace(referenceRegExp, writeImageTag);

  // Next, handle inline images:  ![alt text](url =<width>x<height> "optional title")

  // base64 encoded images
  text = text.replace(base64RegExp, writeImageTagBase64);

  // cases with crazy urls like ./image/cat1).png
  text = text.replace(crazyRegExp, writeImageTag);

  // normal cases
  text = text.replace(inlineRegExp, writeImageTag);

  // handle reference-style shortcuts: ![img text]
  text = text.replace(refShortcutRegExp, writeImageTag);

  text = globals.converter._dispatch('images.after', text, options, globals);
  return text;
});

showdown.subParser('italicsAndBold', function (text, options, globals) {

  text = globals.converter._dispatch('italicsAndBold.before', text, options, globals);

  // it's faster to have 3 separate regexes for each case than have just one
  // because of backtracing, in some cases, it could lead to an exponential effect
  // called "catastrophic backtrace". Ominous!

  function parseInside (txt, left, right) {
    /*
    if (options.simplifiedAutoLink) {
      txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);
    }
    */
    return left + txt + right;
  }

  // Parse underscores
  if (options.literalMidWordUnderscores) {
    text = text.replace(/\b___(\S[\s\S]*?)___\b/g, function (wm, txt) {
      return parseInside (txt, '<strong><em>', '</em></strong>');
    });
    text = text.replace(/\b__(\S[\s\S]*?)__\b/g, function (wm, txt) {
      return parseInside (txt, '<strong>', '</strong>');
    });
    text = text.replace(/\b_(\S[\s\S]*?)_\b/g, function (wm, txt) {
      return parseInside (txt, '<em>', '</em>');
    });
  } else {
    text = text.replace(/___(\S[\s\S]*?)___/g, function (wm, m) {
      return (/\S$/.test(m)) ? parseInside (m, '<strong><em>', '</em></strong>') : wm;
    });
    text = text.replace(/__(\S[\s\S]*?)__/g, function (wm, m) {
      return (/\S$/.test(m)) ? parseInside (m, '<strong>', '</strong>') : wm;
    });
    text = text.replace(/_([^\s_][\s\S]*?)_/g, function (wm, m) {
      // !/^_[^_]/.test(m) - test if it doesn't start with __ (since it seems redundant, we removed it)
      return (/\S$/.test(m)) ? parseInside (m, '<em>', '</em>') : wm;
    });
  }

  // Now parse asterisks
  if (options.literalMidWordAsterisks) {
    text = text.replace(/([^*]|^)\B\*\*\*(\S[\s\S]*?)\*\*\*\B(?!\*)/g, function (wm, lead, txt) {
      return parseInside (txt, lead + '<strong><em>', '</em></strong>');
    });
    text = text.replace(/([^*]|^)\B\*\*(\S[\s\S]*?)\*\*\B(?!\*)/g, function (wm, lead, txt) {
      return parseInside (txt, lead + '<strong>', '</strong>');
    });
    text = text.replace(/([^*]|^)\B\*(\S[\s\S]*?)\*\B(?!\*)/g, function (wm, lead, txt) {
      return parseInside (txt, lead + '<em>', '</em>');
    });
  } else {
    text = text.replace(/\*\*\*(\S[\s\S]*?)\*\*\*/g, function (wm, m) {
      return (/\S$/.test(m)) ? parseInside (m, '<strong><em>', '</em></strong>') : wm;
    });
    text = text.replace(/\*\*(\S[\s\S]*?)\*\*/g, function (wm, m) {
      return (/\S$/.test(m)) ? parseInside (m, '<strong>', '</strong>') : wm;
    });
    text = text.replace(/\*([^\s*][\s\S]*?)\*/g, function (wm, m) {
      // !/^\*[^*]/.test(m) - test if it doesn't start with ** (since it seems redundant, we removed it)
      return (/\S$/.test(m)) ? parseInside (m, '<em>', '</em>') : wm;
    });
  }


  text = globals.converter._dispatch('italicsAndBold.after', text, options, globals);
  return text;
});

/**
 * Form HTML ordered (numbered) and unordered (bulleted) lists.
 */
showdown.subParser('lists', function (text, options, globals) {

  /**
   * Process the contents of a single ordered or unordered list, splitting it
   * into individual list items.
   * @param {string} listStr
   * @param {boolean} trimTrailing
   * @returns {string}
   */
  function processListItems (listStr, trimTrailing) {
    // The $g_list_level global keeps track of when we're inside a list.
    // Each time we enter a list, we increment it; when we leave a list,
    // we decrement. If it's zero, we're not in a list anymore.
    //
    // We do this because when we're not inside a list, we want to treat
    // something like this:
    //
    //    I recommend upgrading to version
    //    8. Oops, now this line is treated
    //    as a sub-list.
    //
    // As a single paragraph, despite the fact that the second line starts
    // with a digit-period-space sequence.
    //
    // Whereas when we're inside a list (or sub-list), that line will be
    // treated as the start of a sub-list. What a kludge, huh? This is
    // an aspect of Markdown's syntax that's hard to parse perfectly
    // without resorting to mind-reading. Perhaps the solution is to
    // change the syntax rules such that sub-lists must start with a
    // starting cardinal number; e.g. "1." or "a.".
    globals.gListLevel++;

    // trim trailing blank lines:
    listStr = listStr.replace(/\n{2,}$/, '\n');

    // attacklab: add sentinel to emulate \z
    listStr += '¨0';

    var rgx = /(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0| {0,3}([*+-]|\d+[.])[ \t]+))/gm,
        isParagraphed = (/\n[ \t]*\n(?!¨0)/.test(listStr));

    // Since version 1.5, nesting sublists requires 4 spaces (or 1 tab) indentation,
    // which is a syntax breaking change
    // activating this option reverts to old behavior
    if (options.disableForced4SpacesIndentedSublists) {
      rgx = /(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0|\2([*+-]|\d+[.])[ \t]+))/gm;
    }

    listStr = listStr.replace(rgx, function (wholeMatch, m1, m2, m3, m4, taskbtn, checked) {
      checked = (checked && checked.trim() !== '');

      var item = showdown.subParser('outdent')(m4, options, globals),
          bulletStyle = '';

      // Support for github tasklists
      if (taskbtn && options.tasklists) {
        bulletStyle = ' class="task-list-item" style="list-style-type: none;"';
        item = item.replace(/^[ \t]*\[(x|X| )?]/m, function () {
          var otp = '<input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"';
          if (checked) {
            otp += ' checked';
          }
          otp += '>';
          return otp;
        });
      }

      // ISSUE #312
      // This input: - - - a
      // causes trouble to the parser, since it interprets it as:
      // <ul><li><li><li>a</li></li></li></ul>
      // instead of:
      // <ul><li>- - a</li></ul>
      // So, to prevent it, we will put a marker (¨A)in the beginning of the line
      // Kind of hackish/monkey patching, but seems more effective than overcomplicating the list parser
      item = item.replace(/^([-*+]|\d\.)[ \t]+[\S\n ]*/g, function (wm2) {
        return '¨A' + wm2;
      });

      // m1 - Leading line or
      // Has a double return (multi paragraph) or
      // Has sublist
      if (m1 || (item.search(/\n{2,}/) > -1)) {
        item = showdown.subParser('githubCodeBlocks')(item, options, globals);
        item = showdown.subParser('blockGamut')(item, options, globals);
      } else {
        // Recursion for sub-lists:
        item = showdown.subParser('lists')(item, options, globals);
        item = item.replace(/\n$/, ''); // chomp(item)
        item = showdown.subParser('hashHTMLBlocks')(item, options, globals);

        // Colapse double linebreaks
        item = item.replace(/\n\n+/g, '\n\n');
        if (isParagraphed) {
          item = showdown.subParser('paragraphs')(item, options, globals);
        } else {
          item = showdown.subParser('spanGamut')(item, options, globals);
        }
      }

      // now we need to remove the marker (¨A)
      item = item.replace('¨A', '');
      // we can finally wrap the line in list item tags
      item =  '<li' + bulletStyle + '>' + item + '</li>\n';

      return item;
    });

    // attacklab: strip sentinel
    listStr = listStr.replace(/¨0/g, '');

    globals.gListLevel--;

    if (trimTrailing) {
      listStr = listStr.replace(/\s+$/, '');
    }

    return listStr;
  }

  function styleStartNumber (list, listType) {
    // check if ol and starts by a number different than 1
    if (listType === 'ol') {
      var res = list.match(/^ *(\d+)\./);
      if (res && res[1] !== '1') {
        return ' start="' + res[1] + '"';
      }
    }
    return '';
  }

  /**
   * Check and parse consecutive lists (better fix for issue #142)
   * @param {string} list
   * @param {string} listType
   * @param {boolean} trimTrailing
   * @returns {string}
   */
  function parseConsecutiveLists (list, listType, trimTrailing) {
    // check if we caught 2 or more consecutive lists by mistake
    // we use the counterRgx, meaning if listType is UL we look for OL and vice versa
    var olRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?\d+\.[ \t]/gm : /^ {0,3}\d+\.[ \t]/gm,
        ulRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?[*+-][ \t]/gm : /^ {0,3}[*+-][ \t]/gm,
        counterRxg = (listType === 'ul') ? olRgx : ulRgx,
        result = '';

    if (list.search(counterRxg) !== -1) {
      (function parseCL (txt) {
        var pos = txt.search(counterRxg),
            style = styleStartNumber(list, listType);
        if (pos !== -1) {
          // slice
          result += '\n\n<' + listType + style + '>\n' + processListItems(txt.slice(0, pos), !!trimTrailing) + '</' + listType + '>\n';

          // invert counterType and listType
          listType = (listType === 'ul') ? 'ol' : 'ul';
          counterRxg = (listType === 'ul') ? olRgx : ulRgx;

          //recurse
          parseCL(txt.slice(pos));
        } else {
          result += '\n\n<' + listType + style + '>\n' + processListItems(txt, !!trimTrailing) + '</' + listType + '>\n';
        }
      })(list);
    } else {
      var style = styleStartNumber(list, listType);
      result = '\n\n<' + listType + style + '>\n' + processListItems(list, !!trimTrailing) + '</' + listType + '>\n';
    }

    return result;
  }

  /** Start of list parsing **/
  text = globals.converter._dispatch('lists.before', text, options, globals);
  // add sentinel to hack around khtml/safari bug:
  // http://bugs.webkit.org/show_bug.cgi?id=11231
  text += '¨0';

  if (globals.gListLevel) {
    text = text.replace(/^(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,
      function (wholeMatch, list, m2) {
        var listType = (m2.search(/[*+-]/g) > -1) ? 'ul' : 'ol';
        return parseConsecutiveLists(list, listType, true);
      }
    );
  } else {
    text = text.replace(/(\n\n|^\n?)(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,
      function (wholeMatch, m1, list, m3) {
        var listType = (m3.search(/[*+-]/g) > -1) ? 'ul' : 'ol';
        return parseConsecutiveLists(list, listType, false);
      }
    );
  }

  // strip sentinel
  text = text.replace(/¨0/, '');
  text = globals.converter._dispatch('lists.after', text, options, globals);
  return text;
});

/**
 * Parse metadata at the top of the document
 */
showdown.subParser('metadata', function (text, options, globals) {

  if (!options.metadata) {
    return text;
  }

  text = globals.converter._dispatch('metadata.before', text, options, globals);

  function parseMetadataContents (content) {
    // raw is raw so it's not changed in any way
    globals.metadata.raw = content;

    // escape chars forbidden in html attributes
    // double quotes
    content = content
      // ampersand first
      .replace(/&/g, '&amp;')
      // double quotes
      .replace(/"/g, '&quot;');

    content = content.replace(/\n {4}/g, ' ');
    content.replace(/^([\S ]+): +([\s\S]+?)$/gm, function (wm, key, value) {
      globals.metadata.parsed[key] = value;
      return '';
    });
  }

  text = text.replace(/^\s*«««+(\S*?)\n([\s\S]+?)\n»»»+\n/, function (wholematch, format, content) {
    parseMetadataContents(content);
    return '¨M';
  });

  text = text.replace(/^\s*---+(\S*?)\n([\s\S]+?)\n---+\n/, function (wholematch, format, content) {
    if (format) {
      globals.metadata.format = format;
    }
    parseMetadataContents(content);
    return '¨M';
  });

  text = text.replace(/¨M/g, '');

  text = globals.converter._dispatch('metadata.after', text, options, globals);
  return text;
});

/**
 * Remove one level of line-leading tabs or spaces
 */
showdown.subParser('outdent', function (text, options, globals) {
  text = globals.converter._dispatch('outdent.before', text, options, globals);

  // attacklab: hack around Konqueror 3.5.4 bug:
  // "----------bug".replace(/^-/g,"") == "bug"
  text = text.replace(/^(\t|[ ]{1,4})/gm, '¨0'); // attacklab: g_tab_width

  // attacklab: clean up hack
  text = text.replace(/¨0/g, '');

  text = globals.converter._dispatch('outdent.after', text, options, globals);
  return text;
});

/**
 *
 */
showdown.subParser('paragraphs', function (text, options, globals) {

  text = globals.converter._dispatch('paragraphs.before', text, options, globals);
  // Strip leading and trailing lines:
  text = text.replace(/^\n+/g, '');
  text = text.replace(/\n+$/g, '');

  var grafs = text.split(/\n{2,}/g),
      grafsOut = [],
      end = grafs.length; // Wrap <p> tags

  for (var i = 0; i < end; i++) {
    var str = grafs[i];
    // if this is an HTML marker, copy it
    if (str.search(/¨(K|G)(\d+)\1/g) >= 0) {
      grafsOut.push(str);

    // test for presence of characters to prevent empty lines being parsed
    // as paragraphs (resulting in undesired extra empty paragraphs)
    } else if (str.search(/\S/) >= 0) {
      str = showdown.subParser('spanGamut')(str, options, globals);
      str = str.replace(/^([ \t]*)/g, '<p>');
      str += '</p>';
      grafsOut.push(str);
    }
  }

  /** Unhashify HTML blocks */
  end = grafsOut.length;
  for (i = 0; i < end; i++) {
    var blockText = '',
        grafsOutIt = grafsOut[i],
        codeFlag = false;
    // if this is a marker for an html block...
    // use RegExp.test instead of string.search because of QML bug
    while (/¨(K|G)(\d+)\1/.test(grafsOutIt)) {
      var delim = RegExp.$1,
          num   = RegExp.$2;

      if (delim === 'K') {
        blockText = globals.gHtmlBlocks[num];
      } else {
        // we need to check if ghBlock is a false positive
        if (codeFlag) {
          // use encoded version of all text
          blockText = showdown.subParser('encodeCode')(globals.ghCodeBlocks[num].text, options, globals);
        } else {
          blockText = globals.ghCodeBlocks[num].codeblock;
        }
      }
      blockText = blockText.replace(/\$/g, '$$$$'); // Escape any dollar signs

      grafsOutIt = grafsOutIt.replace(/(\n\n)?¨(K|G)\d+\2(\n\n)?/, blockText);
      // Check if grafsOutIt is a pre->code
      if (/^<pre\b[^>]*>\s*<code\b[^>]*>/.test(grafsOutIt)) {
        codeFlag = true;
      }
    }
    grafsOut[i] = grafsOutIt;
  }
  text = grafsOut.join('\n');
  // Strip leading and trailing lines:
  text = text.replace(/^\n+/g, '');
  text = text.replace(/\n+$/g, '');
  return globals.converter._dispatch('paragraphs.after', text, options, globals);
});

/**
 * Run extension
 */
showdown.subParser('runExtension', function (ext, text, options, globals) {

  if (ext.filter) {
    text = ext.filter(text, globals.converter, options);

  } else if (ext.regex) {
    // TODO remove this when old extension loading mechanism is deprecated
    var re = ext.regex;
    if (!(re instanceof RegExp)) {
      re = new RegExp(re, 'g');
    }
    text = text.replace(re, ext.replace);
  }

  return text;
});

/**
 * These are all the transformations that occur *within* block-level
 * tags like paragraphs, headers, and list items.
 */
showdown.subParser('spanGamut', function (text, options, globals) {

  text = globals.converter._dispatch('spanGamut.before', text, options, globals);
  text = showdown.subParser('codeSpans')(text, options, globals);
  text = showdown.subParser('escapeSpecialCharsWithinTagAttributes')(text, options, globals);
  text = showdown.subParser('encodeBackslashEscapes')(text, options, globals);

  // Process anchor and image tags. Images must come first,
  // because ![foo][f] looks like an anchor.
  text = showdown.subParser('images')(text, options, globals);
  text = showdown.subParser('anchors')(text, options, globals);

  // Make links out of things like `<http://example.com/>`
  // Must come after anchors, because you can use < and >
  // delimiters in inline links like [this](<url>).
  text = showdown.subParser('autoLinks')(text, options, globals);
  text = showdown.subParser('simplifiedAutoLinks')(text, options, globals);
  text = showdown.subParser('emoji')(text, options, globals);
  text = showdown.subParser('underline')(text, options, globals);
  text = showdown.subParser('italicsAndBold')(text, options, globals);
  text = showdown.subParser('strikethrough')(text, options, globals);
  text = showdown.subParser('ellipsis')(text, options, globals);

  // we need to hash HTML tags inside spans
  text = showdown.subParser('hashHTMLSpans')(text, options, globals);

  // now we encode amps and angles
  text = showdown.subParser('encodeAmpsAndAngles')(text, options, globals);

  // Do hard breaks
  if (options.simpleLineBreaks) {
    // GFM style hard breaks
    // only add line breaks if the text does not contain a block (special case for lists)
    if (!/\n\n¨K/.test(text)) {
      text = text.replace(/\n+/g, '<br />\n');
    }
  } else {
    // Vanilla hard breaks
    text = text.replace(/  +\n/g, '<br />\n');
  }

  text = globals.converter._dispatch('spanGamut.after', text, options, globals);
  return text;
});

showdown.subParser('strikethrough', function (text, options, globals) {

  function parseInside (txt) {
    if (options.simplifiedAutoLink) {
      txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);
    }
    return '<del>' + txt + '</del>';
  }

  if (options.strikethrough) {
    text = globals.converter._dispatch('strikethrough.before', text, options, globals);
    text = text.replace(/(?:~){2}([\s\S]+?)(?:~){2}/g, function (wm, txt) { return parseInside(txt); });
    text = globals.converter._dispatch('strikethrough.after', text, options, globals);
  }

  return text;
});

/**
 * Strips link definitions from text, stores the URLs and titles in
 * hash references.
 * Link defs are in the form: ^[id]: url "optional title"
 */
showdown.subParser('stripLinkDefinitions', function (text, options, globals) {

  var regex       = /^ {0,3}\[(.+)]:[ \t]*\n?[ \t]*<?([^>\s]+)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n+|(?=¨0))/gm,
      base64Regex = /^ {0,3}\[(.+)]:[ \t]*\n?[ \t]*<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n\n|(?=¨0)|(?=\n\[))/gm;

  // attacklab: sentinel workarounds for lack of \A and \Z, safari\khtml bug
  text += '¨0';

  var replaceFunc = function (wholeMatch, linkId, url, width, height, blankLines, title) {
    linkId = linkId.toLowerCase();
    if (url.match(/^data:.+?\/.+?;base64,/)) {
      // remove newlines
      globals.gUrls[linkId] = url.replace(/\s/g, '');
    } else {
      globals.gUrls[linkId] = showdown.subParser('encodeAmpsAndAngles')(url, options, globals);  // Link IDs are case-insensitive
    }

    if (blankLines) {
      // Oops, found blank lines, so it's not a title.
      // Put back the parenthetical statement we stole.
      return blankLines + title;

    } else {
      if (title) {
        globals.gTitles[linkId] = title.replace(/"|'/g, '&quot;');
      }
      if (options.parseImgDimensions && width && height) {
        globals.gDimensions[linkId] = {
          width:  width,
          height: height
        };
      }
    }
    // Completely remove the definition from the text
    return '';
  };

  // first we try to find base64 link references
  text = text.replace(base64Regex, replaceFunc);

  text = text.replace(regex, replaceFunc);

  // attacklab: strip sentinel
  text = text.replace(/¨0/, '');

  return text;
});

showdown.subParser('tables', function (text, options, globals) {

  if (!options.tables) {
    return text;
  }

  var tableRgx       = /^ {0,3}\|?.+\|.+\n {0,3}\|?[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*:?[ \t]*(?:[-=]){2,}[\s\S]+?(?:\n\n|¨0)/gm,
      //singeColTblRgx = /^ {0,3}\|.+\|\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n(?: {0,3}\|.+\|\n)+(?:\n\n|¨0)/gm;
      singeColTblRgx = /^ {0,3}\|.+\|[ \t]*\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n( {0,3}\|.+\|[ \t]*\n)*(?:\n|¨0)/gm;

  function parseStyles (sLine) {
    if (/^:[ \t]*--*$/.test(sLine)) {
      return ' style="text-align:left;"';
    } else if (/^--*[ \t]*:[ \t]*$/.test(sLine)) {
      return ' style="text-align:right;"';
    } else if (/^:[ \t]*--*[ \t]*:$/.test(sLine)) {
      return ' style="text-align:center;"';
    } else {
      return '';
    }
  }

  function parseHeaders (header, style) {
    var id = '';
    header = header.trim();
    // support both tablesHeaderId and tableHeaderId due to error in documentation so we don't break backwards compatibility
    if (options.tablesHeaderId || options.tableHeaderId) {
      id = ' id="' + header.replace(/ /g, '_').toLowerCase() + '"';
    }
    header = showdown.subParser('spanGamut')(header, options, globals);

    return '<th' + id + style + '>' + header + '</th>\n';
  }

  function parseCells (cell, style) {
    var subText = showdown.subParser('spanGamut')(cell, options, globals);
    return '<td' + style + '>' + subText + '</td>\n';
  }

  function buildTable (headers, cells) {
    var tb = '<table>\n<thead>\n<tr>\n',
        tblLgn = headers.length;

    for (var i = 0; i < tblLgn; ++i) {
      tb += headers[i];
    }
    tb += '</tr>\n</thead>\n<tbody>\n';

    for (i = 0; i < cells.length; ++i) {
      tb += '<tr>\n';
      for (var ii = 0; ii < tblLgn; ++ii) {
        tb += cells[i][ii];
      }
      tb += '</tr>\n';
    }
    tb += '</tbody>\n</table>\n';
    return tb;
  }

  function parseTable (rawTable) {
    var i, tableLines = rawTable.split('\n');

    for (i = 0; i < tableLines.length; ++i) {
      // strip wrong first and last column if wrapped tables are used
      if (/^ {0,3}\|/.test(tableLines[i])) {
        tableLines[i] = tableLines[i].replace(/^ {0,3}\|/, '');
      }
      if (/\|[ \t]*$/.test(tableLines[i])) {
        tableLines[i] = tableLines[i].replace(/\|[ \t]*$/, '');
      }
      // parse code spans first, but we only support one line code spans
      tableLines[i] = showdown.subParser('codeSpans')(tableLines[i], options, globals);
    }

    var rawHeaders = tableLines[0].split('|').map(function (s) { return s.trim();}),
        rawStyles = tableLines[1].split('|').map(function (s) { return s.trim();}),
        rawCells = [],
        headers = [],
        styles = [],
        cells = [];

    tableLines.shift();
    tableLines.shift();

    for (i = 0; i < tableLines.length; ++i) {
      if (tableLines[i].trim() === '') {
        continue;
      }
      rawCells.push(
        tableLines[i]
          .split('|')
          .map(function (s) {
            return s.trim();
          })
      );
    }

    if (rawHeaders.length < rawStyles.length) {
      return rawTable;
    }

    for (i = 0; i < rawStyles.length; ++i) {
      styles.push(parseStyles(rawStyles[i]));
    }

    for (i = 0; i < rawHeaders.length; ++i) {
      if (showdown.helper.isUndefined(styles[i])) {
        styles[i] = '';
      }
      headers.push(parseHeaders(rawHeaders[i], styles[i]));
    }

    for (i = 0; i < rawCells.length; ++i) {
      var row = [];
      for (var ii = 0; ii < headers.length; ++ii) {
        if (showdown.helper.isUndefined(rawCells[i][ii])) ;
        row.push(parseCells(rawCells[i][ii], styles[ii]));
      }
      cells.push(row);
    }

    return buildTable(headers, cells);
  }

  text = globals.converter._dispatch('tables.before', text, options, globals);

  // find escaped pipe characters
  text = text.replace(/\\(\|)/g, showdown.helper.escapeCharactersCallback);

  // parse multi column tables
  text = text.replace(tableRgx, parseTable);

  // parse one column tables
  text = text.replace(singeColTblRgx, parseTable);

  text = globals.converter._dispatch('tables.after', text, options, globals);

  return text;
});

showdown.subParser('underline', function (text, options, globals) {

  if (!options.underline) {
    return text;
  }

  text = globals.converter._dispatch('underline.before', text, options, globals);

  if (options.literalMidWordUnderscores) {
    text = text.replace(/\b___(\S[\s\S]*?)___\b/g, function (wm, txt) {
      return '<u>' + txt + '</u>';
    });
    text = text.replace(/\b__(\S[\s\S]*?)__\b/g, function (wm, txt) {
      return '<u>' + txt + '</u>';
    });
  } else {
    text = text.replace(/___(\S[\s\S]*?)___/g, function (wm, m) {
      return (/\S$/.test(m)) ? '<u>' + m + '</u>' : wm;
    });
    text = text.replace(/__(\S[\s\S]*?)__/g, function (wm, m) {
      return (/\S$/.test(m)) ? '<u>' + m + '</u>' : wm;
    });
  }

  // escape remaining underscores to prevent them being parsed by italic and bold
  text = text.replace(/(_)/g, showdown.helper.escapeCharactersCallback);

  text = globals.converter._dispatch('underline.after', text, options, globals);

  return text;
});

/**
 * Swap back in all the special characters we've hidden.
 */
showdown.subParser('unescapeSpecialChars', function (text, options, globals) {
  text = globals.converter._dispatch('unescapeSpecialChars.before', text, options, globals);

  text = text.replace(/¨E(\d+)E/g, function (wholeMatch, m1) {
    var charCodeToReplace = parseInt(m1);
    return String.fromCharCode(charCodeToReplace);
  });

  text = globals.converter._dispatch('unescapeSpecialChars.after', text, options, globals);
  return text;
});

showdown.subParser('makeMarkdown.blockquote', function (node, globals) {

  var txt = '';
  if (node.hasChildNodes()) {
    var children = node.childNodes,
        childrenLength = children.length;

    for (var i = 0; i < childrenLength; ++i) {
      var innerTxt = showdown.subParser('makeMarkdown.node')(children[i], globals);

      if (innerTxt === '') {
        continue;
      }
      txt += innerTxt;
    }
  }
  // cleanup
  txt = txt.trim();
  txt = '> ' + txt.split('\n').join('\n> ');
  return txt;
});

showdown.subParser('makeMarkdown.codeBlock', function (node, globals) {

  var lang = node.getAttribute('language'),
      num  = node.getAttribute('precodenum');
  return '```' + lang + '\n' + globals.preList[num] + '\n```';
});

showdown.subParser('makeMarkdown.codeSpan', function (node) {

  return '`' + node.innerHTML + '`';
});

showdown.subParser('makeMarkdown.emphasis', function (node, globals) {

  var txt = '';
  if (node.hasChildNodes()) {
    txt += '*';
    var children = node.childNodes,
        childrenLength = children.length;
    for (var i = 0; i < childrenLength; ++i) {
      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    }
    txt += '*';
  }
  return txt;
});

showdown.subParser('makeMarkdown.header', function (node, globals, headerLevel) {

  var headerMark = new Array(headerLevel + 1).join('#'),
      txt = '';

  if (node.hasChildNodes()) {
    txt = headerMark + ' ';
    var children = node.childNodes,
        childrenLength = children.length;

    for (var i = 0; i < childrenLength; ++i) {
      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    }
  }
  return txt;
});

showdown.subParser('makeMarkdown.hr', function () {

  return '---';
});

showdown.subParser('makeMarkdown.image', function (node) {

  var txt = '';
  if (node.hasAttribute('src')) {
    txt += '![' + node.getAttribute('alt') + '](';
    txt += '<' + node.getAttribute('src') + '>';
    if (node.hasAttribute('width') && node.hasAttribute('height')) {
      txt += ' =' + node.getAttribute('width') + 'x' + node.getAttribute('height');
    }

    if (node.hasAttribute('title')) {
      txt += ' "' + node.getAttribute('title') + '"';
    }
    txt += ')';
  }
  return txt;
});

showdown.subParser('makeMarkdown.links', function (node, globals) {

  var txt = '';
  if (node.hasChildNodes() && node.hasAttribute('href')) {
    var children = node.childNodes,
        childrenLength = children.length;
    txt = '[';
    for (var i = 0; i < childrenLength; ++i) {
      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    }
    txt += '](';
    txt += '<' + node.getAttribute('href') + '>';
    if (node.hasAttribute('title')) {
      txt += ' "' + node.getAttribute('title') + '"';
    }
    txt += ')';
  }
  return txt;
});

showdown.subParser('makeMarkdown.list', function (node, globals, type) {

  var txt = '';
  if (!node.hasChildNodes()) {
    return '';
  }
  var listItems       = node.childNodes,
      listItemsLenght = listItems.length,
      listNum = node.getAttribute('start') || 1;

  for (var i = 0; i < listItemsLenght; ++i) {
    if (typeof listItems[i].tagName === 'undefined' || listItems[i].tagName.toLowerCase() !== 'li') {
      continue;
    }

    // define the bullet to use in list
    var bullet = '';
    if (type === 'ol') {
      bullet = listNum.toString() + '. ';
    } else {
      bullet = '- ';
    }

    // parse list item
    txt += bullet + showdown.subParser('makeMarkdown.listItem')(listItems[i], globals);
    ++listNum;
  }

  // add comment at the end to prevent consecutive lists to be parsed as one
  txt += '\n<!-- -->\n';
  return txt.trim();
});

showdown.subParser('makeMarkdown.listItem', function (node, globals) {

  var listItemTxt = '';

  var children = node.childNodes,
      childrenLenght = children.length;

  for (var i = 0; i < childrenLenght; ++i) {
    listItemTxt += showdown.subParser('makeMarkdown.node')(children[i], globals);
  }
  // if it's only one liner, we need to add a newline at the end
  if (!/\n$/.test(listItemTxt)) {
    listItemTxt += '\n';
  } else {
    // it's multiparagraph, so we need to indent
    listItemTxt = listItemTxt
      .split('\n')
      .join('\n    ')
      .replace(/^ {4}$/gm, '')
      .replace(/\n\n+/g, '\n\n');
  }

  return listItemTxt;
});



showdown.subParser('makeMarkdown.node', function (node, globals, spansOnly) {

  spansOnly = spansOnly || false;

  var txt = '';

  // edge case of text without wrapper paragraph
  if (node.nodeType === 3) {
    return showdown.subParser('makeMarkdown.txt')(node, globals);
  }

  // HTML comment
  if (node.nodeType === 8) {
    return '<!--' + node.data + '-->\n\n';
  }

  // process only node elements
  if (node.nodeType !== 1) {
    return '';
  }

  var tagName = node.tagName.toLowerCase();

  switch (tagName) {

    //
    // BLOCKS
    //
    case 'h1':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 1) + '\n\n'; }
      break;
    case 'h2':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 2) + '\n\n'; }
      break;
    case 'h3':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 3) + '\n\n'; }
      break;
    case 'h4':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 4) + '\n\n'; }
      break;
    case 'h5':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 5) + '\n\n'; }
      break;
    case 'h6':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 6) + '\n\n'; }
      break;

    case 'p':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.paragraph')(node, globals) + '\n\n'; }
      break;

    case 'blockquote':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.blockquote')(node, globals) + '\n\n'; }
      break;

    case 'hr':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.hr')(node, globals) + '\n\n'; }
      break;

    case 'ol':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.list')(node, globals, 'ol') + '\n\n'; }
      break;

    case 'ul':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.list')(node, globals, 'ul') + '\n\n'; }
      break;

    case 'precode':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.codeBlock')(node, globals) + '\n\n'; }
      break;

    case 'pre':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.pre')(node, globals) + '\n\n'; }
      break;

    case 'table':
      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.table')(node, globals) + '\n\n'; }
      break;

    //
    // SPANS
    //
    case 'code':
      txt = showdown.subParser('makeMarkdown.codeSpan')(node, globals);
      break;

    case 'em':
    case 'i':
      txt = showdown.subParser('makeMarkdown.emphasis')(node, globals);
      break;

    case 'strong':
    case 'b':
      txt = showdown.subParser('makeMarkdown.strong')(node, globals);
      break;

    case 'del':
      txt = showdown.subParser('makeMarkdown.strikethrough')(node, globals);
      break;

    case 'a':
      txt = showdown.subParser('makeMarkdown.links')(node, globals);
      break;

    case 'img':
      txt = showdown.subParser('makeMarkdown.image')(node, globals);
      break;

    default:
      txt = node.outerHTML + '\n\n';
  }

  // common normalization
  // TODO eventually

  return txt;
});

showdown.subParser('makeMarkdown.paragraph', function (node, globals) {

  var txt = '';
  if (node.hasChildNodes()) {
    var children = node.childNodes,
        childrenLength = children.length;
    for (var i = 0; i < childrenLength; ++i) {
      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    }
  }

  // some text normalization
  txt = txt.trim();

  return txt;
});

showdown.subParser('makeMarkdown.pre', function (node, globals) {

  var num  = node.getAttribute('prenum');
  return '<pre>' + globals.preList[num] + '</pre>';
});

showdown.subParser('makeMarkdown.strikethrough', function (node, globals) {

  var txt = '';
  if (node.hasChildNodes()) {
    txt += '~~';
    var children = node.childNodes,
        childrenLength = children.length;
    for (var i = 0; i < childrenLength; ++i) {
      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    }
    txt += '~~';
  }
  return txt;
});

showdown.subParser('makeMarkdown.strong', function (node, globals) {

  var txt = '';
  if (node.hasChildNodes()) {
    txt += '**';
    var children = node.childNodes,
        childrenLength = children.length;
    for (var i = 0; i < childrenLength; ++i) {
      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
    }
    txt += '**';
  }
  return txt;
});

showdown.subParser('makeMarkdown.table', function (node, globals) {

  var txt = '',
      tableArray = [[], []],
      headings   = node.querySelectorAll('thead>tr>th'),
      rows       = node.querySelectorAll('tbody>tr'),
      i, ii;
  for (i = 0; i < headings.length; ++i) {
    var headContent = showdown.subParser('makeMarkdown.tableCell')(headings[i], globals),
        allign = '---';

    if (headings[i].hasAttribute('style')) {
      var style = headings[i].getAttribute('style').toLowerCase().replace(/\s/g, '');
      switch (style) {
        case 'text-align:left;':
          allign = ':---';
          break;
        case 'text-align:right;':
          allign = '---:';
          break;
        case 'text-align:center;':
          allign = ':---:';
          break;
      }
    }
    tableArray[0][i] = headContent.trim();
    tableArray[1][i] = allign;
  }

  for (i = 0; i < rows.length; ++i) {
    var r = tableArray.push([]) - 1,
        cols = rows[i].getElementsByTagName('td');

    for (ii = 0; ii < headings.length; ++ii) {
      var cellContent = ' ';
      if (typeof cols[ii] !== 'undefined') {
        cellContent = showdown.subParser('makeMarkdown.tableCell')(cols[ii], globals);
      }
      tableArray[r].push(cellContent);
    }
  }

  var cellSpacesCount = 3;
  for (i = 0; i < tableArray.length; ++i) {
    for (ii = 0; ii < tableArray[i].length; ++ii) {
      var strLen = tableArray[i][ii].length;
      if (strLen > cellSpacesCount) {
        cellSpacesCount = strLen;
      }
    }
  }

  for (i = 0; i < tableArray.length; ++i) {
    for (ii = 0; ii < tableArray[i].length; ++ii) {
      if (i === 1) {
        if (tableArray[i][ii].slice(-1) === ':') {
          tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii].slice(-1), cellSpacesCount - 1, '-') + ':';
        } else {
          tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount, '-');
        }
      } else {
        tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount);
      }
    }
    txt += '| ' + tableArray[i].join(' | ') + ' |\n';
  }

  return txt.trim();
});

showdown.subParser('makeMarkdown.tableCell', function (node, globals) {

  var txt = '';
  if (!node.hasChildNodes()) {
    return '';
  }
  var children = node.childNodes,
      childrenLength = children.length;

  for (var i = 0; i < childrenLength; ++i) {
    txt += showdown.subParser('makeMarkdown.node')(children[i], globals, true);
  }
  return txt.trim();
});

showdown.subParser('makeMarkdown.txt', function (node) {

  var txt = node.nodeValue;

  // multiple spaces are collapsed
  txt = txt.replace(/ +/g, ' ');

  // replace the custom ¨NBSP; with a space
  txt = txt.replace(/¨NBSP;/g, ' ');

  // ", <, > and & should replace escaped html entities
  txt = showdown.helper.unescapeHTMLEntities(txt);

  // escape markdown magic characters
  // emphasis, strong and strikethrough - can appear everywhere
  // we also escape pipe (|) because of tables
  // and escape ` because of code blocks and spans
  txt = txt.replace(/([*_~|`])/g, '\\$1');

  // escape > because of blockquotes
  txt = txt.replace(/^(\s*)>/g, '\\$1>');

  // hash character, only troublesome at the beginning of a line because of headers
  txt = txt.replace(/^#/gm, '\\#');

  // horizontal rules
  txt = txt.replace(/^(\s*)([-=]{3,})(\s*)$/, '$1\\$2$3');

  // dot, because of ordered lists, only troublesome at the beginning of a line when preceded by an integer
  txt = txt.replace(/^( {0,3}\d+)\./gm, '$1\\.');

  // +, * and -, at the beginning of a line becomes a list, so we need to escape them also (asterisk was already escaped)
  txt = txt.replace(/^( {0,3})([+-])/gm, '$1\\$2');

  // images and links, ] followed by ( is problematic, so we escape it
  txt = txt.replace(/]([\s]*)\(/g, '\\]$1\\(');

  // reference URIs must also be escaped
  txt = txt.replace(/^ {0,3}\[([\S \t]*?)]:/gm, '\\[$1]:');

  return txt;
});

var root = this;

// AMD Loader
if (module.exports) {
  module.exports = showdown;

// Regular Browser loader
} else {
  root.showdown = showdown;
}
}).call(commonjsGlobal);


});

var Card = /** @class */ (function () {
    function Card(id, deckName, initialContent, fields, reversed, initialOffset, endOffset, tags, inserted, mediaNames) {
        this.id = id;
        this.deckName = deckName;
        this.initialContent = initialContent;
        this.fields = fields;
        this.reversed = reversed;
        this.initialOffset = initialOffset;
        this.endOffset = endOffset;
        this.tags = tags;
        this.inserted = inserted;
        this.mediaNames = mediaNames;
        this.mediaBase64Encoded = [];
        this.oldTags = [];
        this.modelName = "";
    }
    Card.prototype.match = function (card) {
        // TODO not supported currently
        // if (this.modelName !== card.modelName) {
        //     return false
        // }
        var e_1, _a;
        var fields = Object.entries(card.fields);
        // This is the case of a switch from a model to another one. It cannot be handeled
        if (fields.length !== Object.entries(this.fields).length) {
            return true;
        }
        try {
            for (var fields_1 = __values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                var field = fields_1_1.value;
                var fieldName = field[0];
                if (field[1].value !== this.fields[fieldName]) {
                    return false;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return)) _a.call(fields_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return arraysEqual(card.tags, this.tags);
    };
    Card.prototype.getCodeDeckNameExtension = function () {
        return "";
    };
    return Card;
}());

var Flashcard = /** @class */ (function (_super) {
    __extends(Flashcard, _super);
    function Flashcard(id, deckName, initialContent, fields, reversed, initialOffset, endOffset, tags, inserted, mediaNames) {
        if (id === void 0) { id = -1; }
        if (tags === void 0) { tags = []; }
        if (inserted === void 0) { inserted = false; }
        var _this = _super.call(this, id, deckName, initialContent, fields, reversed, initialOffset, endOffset, tags, inserted, mediaNames) || this;
        _this.toString = function () {
            return "Q: ".concat(_this.fields[0], "\nA: ").concat(_this.fields[1]);
        };
        _this.modelName = _this.reversed
            ? "Obsidian-basic-reversed"
            : "Obsidian-basic";
        if (fields["Source"]) {
            _this.modelName += sourceDeckExtension;
        }
        return _this;
    }
    Flashcard.prototype.getCard = function (update) {
        if (update === void 0) { update = false; }
        var card = {
            deckName: this.deckName,
            modelName: this.modelName,
            fields: this.fields,
            tags: this.tags,
        };
        if (update) {
            card["id"] = this.id;
        }
        return card;
    };
    Flashcard.prototype.getMedias = function () {
        var _this = this;
        var medias = [];
        this.mediaBase64Encoded.forEach(function (data, index) {
            medias.push({
                filename: _this.mediaNames[index],
                data: data,
            });
        });
        return medias;
    };
    Flashcard.prototype.getIdFormat = function () {
        return "^" + this.id.toString() + "\n";
    };
    return Flashcard;
}(Card));

var Inlinecard = /** @class */ (function (_super) {
    __extends(Inlinecard, _super);
    function Inlinecard(id, deckName, initialContent, fields, reversed, initialOffset, endOffset, tags, inserted, mediaNames) {
        if (id === void 0) { id = -1; }
        if (tags === void 0) { tags = []; }
        if (inserted === void 0) { inserted = false; }
        var _this = _super.call(this, id, deckName, initialContent, fields, reversed, initialOffset, endOffset, tags, inserted, mediaNames) || this;
        _this.toString = function () {
            return "Q: ".concat(_this.fields[0], " \nA: ").concat(_this.fields[1], " ");
        };
        _this.modelName = _this.reversed
            ? "Obsidian-basic-reversed"
            : "Obsidian-basic";
        if (fields["Source"]) {
            _this.modelName += sourceDeckExtension;
        }
        return _this;
    }
    Inlinecard.prototype.getCard = function (update) {
        if (update === void 0) { update = false; }
        var card = {
            deckName: this.deckName,
            modelName: this.modelName,
            fields: this.fields,
            tags: this.tags,
        };
        if (update) {
            card["id"] = this.id;
        }
        return card;
    };
    Inlinecard.prototype.getMedias = function () {
        var _this = this;
        var medias = [];
        this.mediaBase64Encoded.forEach(function (data, index) {
            medias.push({
                filename: _this.mediaNames[index],
                data: data,
            });
        });
        return medias;
    };
    Inlinecard.prototype.getIdFormat = function () {
        return "^" + this.id.toString();
    };
    return Inlinecard;
}(Card));

var Spacedcard = /** @class */ (function (_super) {
    __extends(Spacedcard, _super);
    function Spacedcard(id, deckName, initialContent, fields, reversed, initialOffset, endOffset, tags, inserted, mediaNames) {
        if (id === void 0) { id = -1; }
        if (tags === void 0) { tags = []; }
        if (inserted === void 0) { inserted = false; }
        var _this = _super.call(this, id, deckName, initialContent, fields, reversed, initialOffset, endOffset, tags, inserted, mediaNames) || this;
        _this.toString = function () {
            return "Prompt: ".concat(_this.fields[0]);
        };
        _this.modelName = "Obsidian-spaced";
        if (fields["Source"]) {
            _this.modelName += sourceDeckExtension;
        }
        return _this;
    }
    Spacedcard.prototype.getCard = function (update) {
        if (update === void 0) { update = false; }
        var card = {
            deckName: this.deckName,
            modelName: this.modelName,
            fields: this.fields,
            tags: this.tags,
        };
        if (update) {
            card["id"] = this.id;
        }
        return card;
    };
    Spacedcard.prototype.getMedias = function () {
        var _this = this;
        var medias = [];
        this.mediaBase64Encoded.forEach(function (data, index) {
            medias.push({
                filename: _this.mediaNames[index],
                data: data,
            });
        });
        return medias;
    };
    Spacedcard.prototype.getIdFormat = function () {
        return "^" + this.id.toString() + "\n";
    };
    return Spacedcard;
}(Card));

var Clozecard = /** @class */ (function (_super) {
    __extends(Clozecard, _super);
    function Clozecard(id, deckName, initialContent, fields, reversed, initialOffset, endOffset, tags, inserted, mediaNames) {
        if (id === void 0) { id = -1; }
        if (tags === void 0) { tags = []; }
        if (inserted === void 0) { inserted = false; }
        var _this = _super.call(this, id, deckName, initialContent, fields, reversed, initialOffset, endOffset, tags, inserted, mediaNames) || this;
        _this.toString = function () {
            return "Cloze: ".concat(_this.fields[0]);
        };
        _this.modelName = "Obsidian-cloze";
        if (fields["Source"]) {
            _this.modelName += sourceDeckExtension;
        }
        return _this;
    }
    Clozecard.prototype.getCard = function (update) {
        if (update === void 0) { update = false; }
        var card = {
            deckName: this.deckName,
            modelName: this.modelName,
            fields: this.fields,
            tags: this.tags,
        };
        if (update) {
            card["id"] = this.id;
        }
        return card;
    };
    Clozecard.prototype.getMedias = function () {
        var _this = this;
        var medias = [];
        this.mediaBase64Encoded.forEach(function (data, index) {
            medias.push({
                filename: _this.mediaNames[index],
                data: data,
            });
        });
        return medias;
    };
    Clozecard.prototype.getIdFormat = function () {
        return "\n^" + this.id.toString();
    };
    return Clozecard;
}(Card));

var Parser = /** @class */ (function () {
    function Parser(regex, settings) {
        this.regex = regex;
        this.settings = settings;
        this.htmlConverter = new showdown.Converter();
        this.htmlConverter.setOption("simplifiedAutoLink", true);
        this.htmlConverter.setOption("tables", true);
        this.htmlConverter.setOption("tasks", true);
        this.htmlConverter.setOption("strikethrough", true);
        this.htmlConverter.setOption("ghCodeBlocks", true);
        this.htmlConverter.setOption("requireSpaceBeforeHeadingText", true);
        this.htmlConverter.setOption("simpleLineBreaks", true);
    }
    /**
     * 提取文件中已存在的卡片ID及其位置信息
     * @param file 原始文件内容
     * @returns ID映射表：{ 位置范围: ID值 }
     */
    Parser.prototype.extractExistingIds = function (file) {
        var idMap = new Map();
        var idRegex = /\^\d{13}/g;
        var match;
        while ((match = idRegex.exec(file)) !== null) {
            var id = parseInt(match[0].substring(1)); // 移除^符号
            var position = match.index;
            // 使用位置作为键，方便后续查找
            idMap.set("pos_".concat(position), id);
        }
        return idMap;
    };
    /**
     * 清理文件中已存在的卡片ID，避免正则表达式匹配时答案被截断
     * 改进：保留ID信息用于重用
     * @param file 原始文件内容
     * @returns 包含清理后内容、位置映射和ID映射的对象
     */
    Parser.prototype.cleanExistingIds = function (file) {
        // 先提取已存在的ID信息
        var existingIds = this.extractExistingIds(file);
        // 匹配并移除所有卡片ID（格式：^数字13位）
        // 同时创建位置映射，用于将清理后的位置转换回原始位置
        var cleanFile = '';
        var offsetMap = []; // offsetMap[cleanIndex] = originalIndex
        var originalIndex = 0;
        var cleanIndex = 0;
        var idRegex = /\^\d{13}/g;
        var match;
        var lastIndex = 0;
        while ((match = idRegex.exec(file)) !== null) {
            // 添加ID之前的内容
            var beforeId = file.substring(lastIndex, match.index);
            cleanFile += beforeId;
            // 为每个字符创建映射
            for (var i = 0; i < beforeId.length; i++) {
                offsetMap[cleanIndex++] = originalIndex++;
            }
            // 跳过ID部分（不添加到cleanFile中）
            originalIndex += match[0].length;
            lastIndex = match.index + match[0].length;
        }
        // 添加最后剩余的内容
        var remaining = file.substring(lastIndex);
        cleanFile += remaining;
        for (var i = 0; i < remaining.length; i++) {
            offsetMap[cleanIndex++] = originalIndex++;
        }
        return { cleanFile: cleanFile, offsetMap: offsetMap, existingIds: existingIds };
    };
    /**
     * 智能ID重用：为没有ID的卡片尝试重用附近的已存在ID
     * @param cards 卡片数组
     * @param existingIds 已存在的ID映射
     * @param offsetMap 位置映射
     */
    Parser.prototype.reuseExistingIds = function (cards, existingIds, offsetMap) {
        var e_1, _a, e_2, _b;
        try {
            for (var cards_1 = __values(cards), cards_1_1 = cards_1.next(); !cards_1_1.done; cards_1_1 = cards_1.next()) {
                var card = cards_1_1.value;
                // 只处理没有ID的新卡片
                if (card.id === -1 && !card.inserted) {
                    // 查找卡片结束位置附近的已存在ID
                    var cardEndOriginal = offsetMap[card.endOffset] || card.endOffset;
                    var searchRange = 100; // 在前后100个字符范围内搜索
                    var foundId = null;
                    var minDistance = Infinity;
                    try {
                        // 遍历所有已存在的ID，找到距离最近的
                        for (var _c = (e_2 = void 0, __values(existingIds.entries())), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var _e = __read(_d.value, 2), posKey = _e[0], id = _e[1];
                            var position = parseInt(posKey.replace('pos_', ''));
                            var distance = Math.abs(position - cardEndOriginal);
                            // 如果在搜索范围内且距离更近
                            if (distance <= searchRange && distance < minDistance) {
                                foundId = id;
                                minDistance = distance;
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    // 如果找到了合适的ID，重用它
                    if (foundId !== null) {
                        card.id = foundId;
                        card.inserted = true; // 标记为已插入，避免重复写入
                        console.log("\u91CD\u7528\u5DF2\u5B58\u5728ID: \u5361\u7247\u5728\u4F4D\u7F6E ".concat(cardEndOriginal, " \u91CD\u7528ID ").concat(foundId));
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (cards_1_1 && !cards_1_1.done && (_a = cards_1.return)) _a.call(cards_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    Parser.prototype.generateFlashcards = function (file, deck, vault, note, globalTags) {
        var e_3, _a;
        if (globalTags === void 0) { globalTags = []; }
        var contextAware = this.settings.contextAwareMode;
        var cards = [];
        var headings = [];
        // 在解析卡片之前，先清理文件中已存在的ID，避免正则表达式匹配问题
        // 这样可以确保正则表达式能正确匹配到完整的答案内容
        // 改进：同时保留已存在的ID信息用于重用
        var _b = this.cleanExistingIds(file), cleanFile = _b.cleanFile, offsetMap = _b.offsetMap, existingIds = _b.existingIds;
        if (contextAware) {
            // https://regex101.com/r/agSp9X/4
            headings = __spreadArray([], __read(cleanFile.matchAll(this.regex.headingsRegex)), false);
        }
        note = this.substituteObsidianLinks("[[".concat(note, "]]"), vault);
        cards = cards.concat(this.generateCardsWithTag(cleanFile, headings, deck, vault, note, globalTags, offsetMap));
        cards = cards.concat(this.generateInlineCards(cleanFile, headings, deck, vault, note, globalTags, offsetMap));
        cards = cards.concat(this.generateSpacedCards(cleanFile, headings, deck, vault, note, globalTags, offsetMap));
        cards = cards.concat(this.generateClozeCards(cleanFile, headings, deck, vault, note, globalTags, offsetMap));
        // Filter out cards that are fully inside a code block, a math block or a math inline block
        var codeBlocks = __spreadArray([], __read(file.matchAll(this.regex.obsidianCodeBlock)), false);
        var mathBlocks = __spreadArray([], __read(file.matchAll(this.regex.mathBlock)), false);
        var mathInline = __spreadArray([], __read(file.matchAll(this.regex.mathInline)), false);
        var blocksToFilter = __spreadArray(__spreadArray(__spreadArray([], __read(codeBlocks), false), __read(mathBlocks), false), __read(mathInline), false);
        var rangesToDiscard = blocksToFilter.map(function (x) { return ([x.index, x.index + x[0].length]); });
        cards = cards.filter(function (card) {
            var cardRange = [card.initialOffset, card.endOffset];
            var isInRangeToDiscard = rangesToDiscard.some(function (range) {
                return (cardRange[0] >= range[0] && cardRange[1] <= range[1]);
            });
            return !isInRangeToDiscard;
        });
        cards.sort(function (a, b) { return a.endOffset - b.endOffset; });
        // 智能ID重用：为没有ID的卡片尝试重用附近的已存在ID
        this.reuseExistingIds(cards, existingIds, offsetMap);
        var defaultAnkiTag = this.settings.defaultAnkiTag;
        if (defaultAnkiTag) {
            try {
                for (var cards_2 = __values(cards), cards_2_1 = cards_2.next(); !cards_2_1.done; cards_2_1 = cards_2.next()) {
                    var card = cards_2_1.value;
                    card.tags.push(defaultAnkiTag);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (cards_2_1 && !cards_2_1.done && (_a = cards_2.return)) _a.call(cards_2);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        return cards;
    };
    /**
     * Gives back the ancestor headings of a line.
     * @param headings The list of all the headings available in a file.
     * @param line The line whose ancestors need to be calculated.
     * @param headingLevel The level of the first ancestor heading, i.e. the number of #.
     */
    Parser.prototype.getContext = function (headings, index, headingLevel) {
        var context = [];
        var currentIndex = index;
        var goalLevel = 6;
        var i = headings.length - 1;
        // Get the level of the first heading before the index (i.e. above the current line)
        if (headingLevel !== -1) {
            // This is the case of a #flashcard in a heading
            goalLevel = headingLevel - 1;
        }
        else {
            // Find first heading and its level
            // This is the case of a #flashcard in a paragraph
            for (i; i >= 0; i--) {
                if (headings[i].index < currentIndex) {
                    currentIndex = headings[i].index;
                    goalLevel = headings[i][1].length - 1;
                    context.unshift(headings[i][2].trim());
                    break;
                }
            }
        }
        // Search for the other headings
        for (i; i >= 0; i--) {
            var currentLevel = headings[i][1].length;
            if (currentLevel == goalLevel && headings[i].index < currentIndex) {
                currentIndex = headings[i].index;
                goalLevel = currentLevel - 1;
                context.unshift(headings[i][2].trim());
            }
        }
        return context;
    };
    Parser.prototype.generateSpacedCards = function (file, headings, deck, vault, note, globalTags, offsetMap) {
        var e_4, _a;
        if (globalTags === void 0) { globalTags = []; }
        var contextAware = this.settings.contextAwareMode;
        var cards = [];
        var matches = __spreadArray([], __read(file.matchAll(this.regex.cardsSpacedStyle)), false);
        try {
            for (var matches_1 = __values(matches), matches_1_1 = matches_1.next(); !matches_1_1.done; matches_1_1 = matches_1.next()) {
                var match = matches_1_1.value;
                var reversed = false;
                var headingLevel = -1;
                if (match[1]) {
                    headingLevel =
                        match[1].trim().length !== 0 ? match[1].trim().length : -1;
                }
                // Match.index - 1 because otherwise in the context there will be even match[1], i.e. the question itself
                var context = contextAware
                    ? this.getContext(headings, match.index - 1, headingLevel)
                    : "";
                var originalPrompt = match[2].trim();
                var prompt_1 = contextAware
                    ? __spreadArray(__spreadArray([], __read(context), false), [match[2].trim()], false).join("".concat(this.settings.contextSeparator))
                    : match[2].trim();
                var medias = this.getImageLinks(prompt_1);
                medias = medias.concat(this.getAudioLinks(prompt_1));
                prompt_1 = this.parseLine(prompt_1, vault);
                var initialOffset = offsetMap ? offsetMap[match.index] || match.index : match.index;
                var endingLine = offsetMap ? offsetMap[match.index + match[0].length - 1] || (match.index + match[0].length) : (match.index + match[0].length);
                var tags = this.parseTags(match[4], globalTags);
                var id = match[5] ? Number(match[5]) : -1;
                var inserted = match[5] ? true : false;
                var fields = { Prompt: prompt_1 };
                if (this.settings.sourceSupport) {
                    fields["Source"] = note;
                }
                var card = new Spacedcard(id, deck, originalPrompt, fields, reversed, initialOffset, endingLine, tags, inserted, medias);
                cards.push(card);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (matches_1_1 && !matches_1_1.done && (_a = matches_1.return)) _a.call(matches_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return cards;
    };
    Parser.prototype.generateClozeCards = function (file, headings, deck, vault, note, globalTags, offsetMap) {
        var e_5, _a;
        if (globalTags === void 0) { globalTags = []; }
        var contextAware = this.settings.contextAwareMode;
        var cards = [];
        var matches = __spreadArray([], __read(file.matchAll(this.regex.cardsClozeWholeLine)), false);
        var mathBlocks = __spreadArray([], __read(file.matchAll(this.regex.mathBlock)), false);
        var mathInline = __spreadArray([], __read(file.matchAll(this.regex.mathInline)), false);
        var blocksToFilter = __spreadArray(__spreadArray([], __read(mathBlocks), false), __read(mathInline), false);
        var rangesToDiscard = blocksToFilter.map(function (x) { return ([x.index, x.index + x[0].length]); });
        var _loop_1 = function (match) {
            var reversed = false;
            var headingLevel = -1;
            if (match[1]) {
                headingLevel =
                    match[1].trim().length !== 0 ? match[1].trim().length : -1;
            }
            // Match.index - 1 because otherwise in the context there will be even match[1], i.e. the question itself
            var context = contextAware
                ? this_1.getContext(headings, match.index - 1, headingLevel)
                : "";
            // If all the curly clozes are inside a math block, then do not create the card
            match[2].matchAll(this_1.regex.singleClozeCurly);
            var matchIndex = match.index;
            // Identify curly clozes, drop all the ones that are in math blocks i.e. ($\frac{1}{12}$) and substitute the others with Anki syntax
            var clozeText = match[2].replace(this_1.regex.singleClozeCurly, function (match, g1, g2, g3, offset) {
                var globalOffset = matchIndex + offset;
                var isInMathBlock = rangesToDiscard.some(function (x) { return (globalOffset >= x[0] && globalOffset + match[0].length <= x[1]); });
                if (isInMathBlock) {
                    return match;
                }
                else {
                    if (g2) {
                        return "{{c".concat(g2, "::").concat(g3, "}}");
                    }
                    else {
                        return "{{c1::".concat(g3, "}}");
                    }
                }
            });
            // Replace the highlight clozes in the line with Anki syntax
            clozeText = clozeText.replace(this_1.regex.singleClozeHighlight, "{{c1::$2}}");
            if (clozeText === match[2]) {
                return "continue";
            }
            var originalLine = match[2].trim();
            // Add context
            clozeText = contextAware
                ? __spreadArray(__spreadArray([], __read(context), false), [clozeText.trim()], false).join("".concat(this_1.settings.contextSeparator))
                : clozeText.trim();
            var medias = this_1.getImageLinks(clozeText);
            medias = medias.concat(this_1.getAudioLinks(clozeText));
            clozeText = this_1.parseLine(clozeText, vault);
            // 计算答案在匹配中的实际位置
            var fullMatchBeforeAnswer = match[0].substring(0, match[0].indexOf(match[5]));
            var answerStartInMatch = fullMatchBeforeAnswer.length;
            var answerEndInMatch = answerStartInMatch + match[5].length;
            var initialOffset = offsetMap ? offsetMap[match.index] || match.index : match.index;
            var cleanAnswerEndOffset = match.index + answerEndInMatch;
            var endingLine = offsetMap ? offsetMap[cleanAnswerEndOffset] || cleanAnswerEndOffset : cleanAnswerEndOffset;
            var tags = this_1.parseTags(match[4], globalTags);
            var id = match[5] ? Number(match[5]) : -1;
            var inserted = match[5] ? true : false;
            var fields = { Text: clozeText, Extra: "" };
            if (this_1.settings.sourceSupport) {
                fields["Source"] = note;
            }
            var card = new Clozecard(id, deck, originalLine, fields, reversed, initialOffset, endingLine, tags, inserted, medias);
            cards.push(card);
        };
        var this_1 = this;
        try {
            for (var matches_2 = __values(matches), matches_2_1 = matches_2.next(); !matches_2_1.done; matches_2_1 = matches_2.next()) {
                var match = matches_2_1.value;
                _loop_1(match);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (matches_2_1 && !matches_2_1.done && (_a = matches_2.return)) _a.call(matches_2);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return cards;
    };
    Parser.prototype.generateInlineCards = function (file, headings, deck, vault, note, globalTags, offsetMap) {
        var e_6, _a;
        if (globalTags === void 0) { globalTags = []; }
        var contextAware = this.settings.contextAwareMode;
        var cards = [];
        var matches = __spreadArray([], __read(file.matchAll(this.regex.cardsInlineStyle)), false);
        try {
            for (var matches_3 = __values(matches), matches_3_1 = matches_3.next(); !matches_3_1.done; matches_3_1 = matches_3.next()) {
                var match = matches_3_1.value;
                if (match[2].toLowerCase().startsWith("cards-deck") ||
                    match[2].toLowerCase().startsWith("tags")) {
                    continue;
                }
                var reversed = match[3] === this.settings.inlineSeparatorReverse;
                var headingLevel = -1;
                if (match[1]) {
                    headingLevel =
                        match[1].trim().length !== 0 ? match[1].trim().length : -1;
                }
                // Match.index - 1 because otherwise in the context there will be even match[1], i.e. the question itself
                var context = contextAware
                    ? this.getContext(headings, match.index - 1, headingLevel)
                    : "";
                var originalQuestion = match[2].trim();
                var question = contextAware
                    ? __spreadArray(__spreadArray([], __read(context), false), [match[2].trim()], false).join("".concat(this.settings.contextSeparator))
                    : match[2].trim();
                var answer = match[4].trim();
                var medias = this.getImageLinks(question);
                medias = medias.concat(this.getImageLinks(answer));
                medias = medias.concat(this.getAudioLinks(answer));
                question = this.parseLine(question, vault);
                answer = this.parseLine(answer, vault);
                var initialOffset = offsetMap ? offsetMap[match.index] || match.index : match.index;
                var endingLine = offsetMap ? offsetMap[match.index + match[0].length - 1] || (match.index + match[0].length) : (match.index + match[0].length);
                var tags = this.parseTags(match[5], globalTags);
                var id = match[6] ? Number(match[6]) : -1;
                var inserted = match[6] ? true : false;
                var fields = { Front: question, Back: answer };
                if (this.settings.sourceSupport) {
                    fields["Source"] = note;
                }
                var card = new Inlinecard(id, deck, originalQuestion, fields, reversed, initialOffset, endingLine, tags, inserted, medias);
                cards.push(card);
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (matches_3_1 && !matches_3_1.done && (_a = matches_3.return)) _a.call(matches_3);
            }
            finally { if (e_6) throw e_6.error; }
        }
        return cards;
    };
    Parser.prototype.generateCardsWithTag = function (file, headings, deck, vault, note, globalTags, offsetMap) {
        var e_7, _a;
        if (globalTags === void 0) { globalTags = []; }
        var contextAware = this.settings.contextAwareMode;
        var cards = [];
        var matches = __spreadArray([], __read(file.matchAll(this.regex.flashscardsWithTag)), false);
        var embedMap = this.getEmbedMap();
        try {
            for (var matches_4 = __values(matches), matches_4_1 = matches_4.next(); !matches_4_1.done; matches_4_1 = matches_4.next()) {
                var match = matches_4_1.value;
                var reversed = match[3].trim().toLowerCase() ===
                    "#".concat(this.settings.flashcardsTag, "-reverse") ||
                    match[3].trim().toLowerCase() ===
                        "#".concat(this.settings.flashcardsTag, "/reverse");
                var headingLevel = match[1].trim().length !== 0 ? match[1].length : -1;
                // Match.index - 1 because otherwise in the context there will be even match[1], i.e. the question itself
                var context = contextAware
                    ? this.getContext(headings, match.index - 1, headingLevel).concat([])
                    : "";
                var originalQuestion = match[2].trim();
                var question = contextAware
                    ? __spreadArray(__spreadArray([], __read(context), false), [match[2].trim()], false).join("".concat(this.settings.contextSeparator))
                    : match[2].trim();
                var answer = match[5].trim();
                var medias = this.getImageLinks(question);
                medias = medias.concat(this.getImageLinks(answer));
                medias = medias.concat(this.getAudioLinks(answer));
                answer = this.getEmbedWrapContent(embedMap, answer);
                question = this.parseLine(question, vault);
                answer = this.parseLine(answer, vault);
                // 计算答案在匹配中的实际位置
                var fullMatchBeforeAnswer = match[0].substring(0, match[0].indexOf(match[5]));
                var answerStartInMatch = fullMatchBeforeAnswer.length;
                var answerEndInMatch = answerStartInMatch + match[5].length;
                var initialOffset = offsetMap ? offsetMap[match.index] || match.index : match.index;
                var cleanAnswerEndOffset = match.index + answerEndInMatch;
                var endingLine = offsetMap ? offsetMap[cleanAnswerEndOffset] || cleanAnswerEndOffset : cleanAnswerEndOffset;
                var tags = this.parseTags(match[4], globalTags);
                var id = match[6] ? Number(match[6]) : -1;
                var inserted = match[6] ? true : false;
                var fields = { Front: question, Back: answer };
                if (this.settings.sourceSupport) {
                    fields["Source"] = note;
                }
                var card = new Flashcard(id, deck, originalQuestion, fields, reversed, initialOffset, endingLine, tags, inserted, medias);
                cards.push(card);
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (matches_4_1 && !matches_4_1.done && (_a = matches_4.return)) _a.call(matches_4);
            }
            finally { if (e_7) throw e_7.error; }
        }
        return cards;
    };
    Parser.prototype.getCardsToDelete = function (file) {
        // Find block IDs with no content above it
        return __spreadArray([], __read(file.matchAll(this.regex.cardsToDelete)), false).map(function (match) {
            return Number(match[1]);
        });
    };
    Parser.prototype.parseLine = function (str, vaultName) {
        return this.htmlConverter.makeHtml(this.mathToAnki(this.substituteObsidianLinks(this.substituteImageLinks(this.substituteAudioLinks(str)), vaultName)));
    };
    Parser.prototype.getImageLinks = function (str) {
        var e_8, _a, e_9, _b;
        var wikiMatches = str.matchAll(this.regex.wikiImageLinks);
        var markdownMatches = str.matchAll(this.regex.markdownImageLinks);
        var links = [];
        try {
            for (var wikiMatches_1 = __values(wikiMatches), wikiMatches_1_1 = wikiMatches_1.next(); !wikiMatches_1_1.done; wikiMatches_1_1 = wikiMatches_1.next()) {
                var wikiMatch = wikiMatches_1_1.value;
                links.push(wikiMatch[1]);
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (wikiMatches_1_1 && !wikiMatches_1_1.done && (_a = wikiMatches_1.return)) _a.call(wikiMatches_1);
            }
            finally { if (e_8) throw e_8.error; }
        }
        try {
            for (var markdownMatches_1 = __values(markdownMatches), markdownMatches_1_1 = markdownMatches_1.next(); !markdownMatches_1_1.done; markdownMatches_1_1 = markdownMatches_1.next()) {
                var markdownMatch = markdownMatches_1_1.value;
                links.push(decodeURIComponent(markdownMatch[1]));
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (markdownMatches_1_1 && !markdownMatches_1_1.done && (_b = markdownMatches_1.return)) _b.call(markdownMatches_1);
            }
            finally { if (e_9) throw e_9.error; }
        }
        return links;
    };
    Parser.prototype.getAudioLinks = function (str) {
        var e_10, _a;
        var wikiMatches = str.matchAll(this.regex.wikiAudioLinks);
        var links = [];
        try {
            for (var wikiMatches_2 = __values(wikiMatches), wikiMatches_2_1 = wikiMatches_2.next(); !wikiMatches_2_1.done; wikiMatches_2_1 = wikiMatches_2.next()) {
                var wikiMatch = wikiMatches_2_1.value;
                links.push(wikiMatch[1]);
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (wikiMatches_2_1 && !wikiMatches_2_1.done && (_a = wikiMatches_2.return)) _a.call(wikiMatches_2);
            }
            finally { if (e_10) throw e_10.error; }
        }
        return links;
    };
    Parser.prototype.substituteObsidianLinks = function (str, vaultName) {
        var linkRegex = /\[\[(.+?)(?:\|(.+?))?\]\]/gim;
        vaultName = encodeURIComponent(vaultName);
        return str.replace(linkRegex, function (match, filename, rename) {
            var href = "obsidian://open?vault=".concat(vaultName, "&file=").concat(encodeURIComponent(filename), ".md");
            var fileRename = rename ? rename : filename;
            return "<a href=\"".concat(href, "\">").concat(fileRename, "</a>");
        });
    };
    Parser.prototype.substituteImageLinks = function (str) {
        str = str.replace(this.regex.wikiImageLinks, "<img src='$1'>");
        str = str.replace(this.regex.markdownImageLinks, "<img src='$1'>");
        return str;
    };
    Parser.prototype.substituteAudioLinks = function (str) {
        return str.replace(this.regex.wikiAudioLinks, "[sound:$1]");
    };
    Parser.prototype.mathToAnki = function (str) {
        str = str.replace(this.regex.mathBlock, function (match, p1, p2) {
            return "\\\\[" + escapeMarkdown(p2) + " \\\\]";
        });
        str = str.replace(this.regex.mathInline, function (match, p1, p2) {
            return "\\\\(" + escapeMarkdown(p2) + "\\\\)";
        });
        return str;
    };
    Parser.prototype.parseTags = function (str, globalTags) {
        var e_11, _a;
        var tags = __spreadArray([], __read(globalTags), false);
        if (str) {
            try {
                for (var _b = __values(str.split("#")), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var tag = _c.value;
                    var newTag = tag.trim();
                    if (newTag) {
                        // Replace obsidian hierarchy tags delimeter \ with anki delimeter ::
                        newTag = newTag.replace(this.regex.tagHierarchy, "::");
                        tags.push(newTag);
                    }
                }
            }
            catch (e_11_1) { e_11 = { error: e_11_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_11) throw e_11.error; }
            }
        }
        return tags;
    };
    Parser.prototype.getAnkiIDsBlocks = function (file) {
        return Array.from(file.matchAll(/\^(\d{13})\s*/gm));
    };
    Parser.prototype.getEmbedMap = function () {
        var _this = this;
        // key：link url 
        // value： embed content parse from html document
        var embedMap = new Map();
        var embedList = Array.from(document.documentElement.getElementsByClassName('internal-embed'));
        Array.from(embedList).forEach(function (el) {
            // markdown-embed-content markdown-embed-page
            var embedValue = _this.htmlConverter.makeMarkdown(_this.htmlConverter.makeHtml(el.outerHTML).toString());
            var embedKey = el.getAttribute("src");
            embedMap.set(embedKey, embedValue);
            // console.log("embedKey: \n" + embedKey);
            // console.log("embedValue: \n" + embedValue);
        });
        return embedMap;
    };
    Parser.prototype.getEmbedWrapContent = function (embedMap, embedContent) {
        var result = embedContent.match(this.regex.embedBlock);
        while (result = this.regex.embedBlock.exec(embedContent)) {
            // console.log("result[0]: " + result[0]);
            // console.log("embedMap.get(result[1]): " + embedMap.get(result[1]));
            embedContent = embedContent.concat(embedMap.get(result[1]));
        }
        return embedContent;
    };
    return Parser;
}());

var Regex = /** @class */ (function () {
    function Regex(settings) {
        this.update(settings);
    }
    Regex.prototype.update = function (settings) {
        // https://regex101.com/r/BOieWh/1
        this.headingsRegex = /^ {0,3}(#{1,6}) +([^\n]+?) ?((?: *#\S+)*) *$/gim;
        // Supported images https://publish.obsidian.md/help/How+to/Embed+files
        this.wikiImageLinks =
            /!\[\[(.*\.(?:png|jpg|jpeg|gif|bmp|svg|tiff)).*?\]\]/gim;
        this.markdownImageLinks =
            /!\[\]\((.*\.(?:png|jpg|jpeg|gif|bmp|svg|tiff)).*?\)/gim;
        this.wikiAudioLinks =
            /!\[\[(.*\.(?:mp3|webm|wav|m4a|ogg|3gp|flac)).*?\]\]/gim;
        // https://regex101.com/r/eqnJeW/1
        this.obsidianCodeBlock = /(?:```(?:.*?\n?)+?```)(?:\n|$)/gim;
        this.codeBlock = /<code\b[^>]*>(.*?)<\/code>/gim;
        this.mathBlock = /(\$\$)(.*?)(\$\$)/gi;
        this.mathInline = /(\$)(.*?)(\$)/gi;
        // 更健壮的匹配：允许空格、冒号、数字、子牌组等，匹配整行
        this.cardsDeckLine = /^\s*cards-deck:\s+.+$/gmi;
        this.cardsToDelete = /^\s*(?:\n)(?:\^(\d{13}))(?:\n\s*?)?/gm;
        // https://regex101.com/r/WxuFI2/1
        // 使用 \w 替代 \p{L} 以兼容 ES5，支持字母、数字、下划线
        this.globalTagsSplitter =
            /\[\[(.*?)\]\]|#([\w\d:\-_/]+)|([\w\d:\-_/]+)/gim;
        this.tagHierarchy = /\//gm;
        // Cards
        var flags = "gimu";
        // https://regex101.com/r/p3yQwY/2
        var str = "( {0,3}[#]*)((?:[^\\n]\\n?)+?)(#" +
            settings.flashcardsTag +
            "(?:[/-]reverse)?)((?: *#[\\p{Number}\\p{Letter}\\-\\/_]+)*) *?\\n+((?:[^\\n]\\n?)*?(?=\\^\\d{13}|$))(?:\\^(\\d{13}))?";
        this.flashscardsWithTag = new RegExp(str, flags);
        // https://regex101.com/r/8wmOo8/1
        var sepLongest = settings.inlineSeparator.length >= settings.inlineSeparatorReverse.length ? settings.inlineSeparator : settings.inlineSeparatorReverse;
        var sepShortest = settings.inlineSeparator.length < settings.inlineSeparatorReverse.length ? settings.inlineSeparator : settings.inlineSeparatorReverse;
        // sepLongest is the longest between the inlineSeparator and the inlineSeparatorReverse because if the order is ::|::: then always the first will be matched
        // sepShortest is the shortest
        if (settings.inlineID) {
            str =
                "( {0,3}[#]{0,6})?(?:(?:[\\t ]*)(?:\\d.|[-+*]|#{1,6}))?(.+?) ?(" + sepLongest + "|" + sepShortest + ") ?(.+?)((?: *#[\\p{Letter}\\-\\/_]+)+)?(?:\\s+\\^(\\d{13})|$)";
        }
        else {
            str =
                "( {0,3}[#]{0,6})?(?:(?:[\\t ]*)(?:\\d.|[-+*]|#{1,6}))?(.+?) ?(" + sepLongest + "|" + sepShortest + ") ?(.+?)((?: *#[\\p{Letter}\\-\\/_]+)+|$)(?:\\n\\^(\\d{13}))?";
        }
        this.cardsInlineStyle = new RegExp(str, flags);
        // https://regex101.com/r/HOXF5E/1
        str =
            "( {0,3}[#]*)((?:[^\\n]\\n?)+?)(#" +
                settings.flashcardsTag +
                "[/-]spaced)((?: *#[\\p{Letter}-]+)*) *\\n?(?:\\^(\\d{13}))?";
        this.cardsSpacedStyle = new RegExp(str, flags);
        // https://regex101.com/r/cgtnLf/1
        str = "( {0,3}[#]{0,6})?(?:(?:[\\t ]*)(?:\\d.|[-+*]|#{1,6}))?(.*?(==.+?==|\\{.+?\\}).*?)((?: *#[\\w\\-\\/_]+)+|$)(?:\n\\^(\\d{13}))?";
        this.cardsClozeWholeLine = new RegExp(str, flags);
        this.singleClozeCurly = /((?:{)(?:(\d):?)?(.+?)(?:}))/g;
        this.singleClozeHighlight = /((?:==)(.+?)(?:==))/g;
        // Matches any embedded block but the one with an used extension from the wikilinks
        this.embedBlock = /!\[\[(.*?)(?<!\.(?:png|jpg|jpeg|gif|bmp|svg|tiff|mp3|webm|wav|m4a|ogg|3gp|flac))\]\]/g;
    };
    return Regex;
}());

var CardsService = /** @class */ (function () {
    function CardsService(app, settings) {
        this.app = app;
        this.settings = settings;
        this.regex = new Regex(this.settings);
        this.parser = new Parser(this.regex, this.settings);
        this.anki = new Anki();
    }
    CardsService.prototype.execute = function (activeFile) {
        return __awaiter(this, void 0, void 0, function () {
            var err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.regex.update(this.settings);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.anki.ping()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        console.error(err_1);
                        return [2 /*return*/, ["Error: Anki must be open with AnkiConnect installed."]];
                    case 4: return [2 /*return*/, this.processFile(activeFile)];
                }
            });
        });
    };
    /**
     * Process markdown files in specified folder to generate, update, and delete flashcards.
     * @param folderPath Path of the folder to process
     * @param progressCallback Optional callback function to report progress
     * @returns Array of notification messages
     */
    CardsService.prototype.executeFolder = function (folderPath, progressCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var err_2, files, totalFiles, allNotifications, stats, i, file, fileNotifications, fileNotifications_1, fileNotifications_1_1, notification, err_3;
            var e_1, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.regex.update(this.settings);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.anki.ping()];
                    case 2:
                        _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _b.sent();
                        console.error(err_2);
                        return [2 /*return*/, ["Error: Anki must be open with AnkiConnect installed."]];
                    case 4:
                        files = this.app.vault.getMarkdownFiles().filter(function (file) {
                            var _a;
                            // Include all files in the folder and its subfolders
                            // Special handling for root folder "/"
                            if (folderPath === "/") {
                                return true; // Include all files in vault
                            }
                            return file.path.startsWith(folderPath + "/") || ((_a = file.parent) === null || _a === void 0 ? void 0 : _a.path) === folderPath;
                        });
                        // Log the files being processed for debugging
                        console.log("Processing folder \"".concat(folderPath, "\" with ").concat(files.length, " files:"));
                        files.forEach(function (file) { return console.log("- ".concat(file.path)); });
                        totalFiles = files.length;
                        allNotifications = [];
                        stats = {
                            processed: 0,
                            created: 0,
                            updated: 0,
                            deleted: 0,
                            errors: 0,
                            skipped: 0
                        };
                        // Initialize models only once for all files
                        return [4 /*yield*/, this.anki.createModels(this.settings.sourceSupport, this.settings.codeHighlightSupport, this.settings.codeHighlightTheme)];
                    case 5:
                        // Initialize models only once for all files
                        _b.sent();
                        i = 0;
                        _b.label = 6;
                    case 6:
                        if (!(i < totalFiles)) return [3 /*break*/, 11];
                        file = files[i];
                        // Report progress if callback provided
                        if (progressCallback) {
                            progressCallback(i + 1, totalFiles, file.basename);
                        }
                        _b.label = 7;
                    case 7:
                        _b.trys.push([7, 9, , 10]);
                        return [4 /*yield*/, this.processFile(file)];
                    case 8:
                        fileNotifications = _b.sent();
                        stats.processed++;
                        try {
                            // Parse notifications to update statistics
                            for (fileNotifications_1 = (e_1 = void 0, __values(fileNotifications)), fileNotifications_1_1 = fileNotifications_1.next(); !fileNotifications_1_1.done; fileNotifications_1_1 = fileNotifications_1.next()) {
                                notification = fileNotifications_1_1.value;
                                if (notification.includes(t('notifications.insertedSuccessfully'))) {
                                    stats.created++;
                                }
                                else if (notification.includes(t('notifications.updatedSuccessfully'))) {
                                    stats.updated++;
                                }
                                else if (notification.includes(t('notifications.deletedSuccessfully'))) {
                                    stats.deleted++;
                                }
                                else if (notification.includes(t('notifications.error'))) {
                                    stats.errors++;
                                }
                                else if (notification.includes(t('notifications.nothingToDo'))) {
                                    stats.skipped++;
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (fileNotifications_1_1 && !fileNotifications_1_1.done && (_a = fileNotifications_1.return)) _a.call(fileNotifications_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        if (fileNotifications.length > 0) {
                            allNotifications.push("[".concat(file.path, "]: ").concat(fileNotifications.join(', ')));
                        }
                        return [3 /*break*/, 10];
                    case 9:
                        err_3 = _b.sent();
                        console.error("Error processing file ".concat(file.path, ":"), err_3);
                        allNotifications.push("[".concat(file.path, "]: Error - ").concat(err_3.message || "Unknown error"));
                        stats.errors++;
                        return [3 /*break*/, 10];
                    case 10:
                        i++;
                        return [3 /*break*/, 6];
                    case 11:
                        // Add summary statistics
                        allNotifications.unshift("".concat(t('notifications.processingComplete'), " - ") +
                            "".concat(t('processing.stats.filesProcessed'), ": ").concat(stats.processed, ", ").concat(t('processing.stats.cardsCreated'), ": ").concat(stats.created, ", ").concat(t('processing.stats.cardsUpdated'), ": ").concat(stats.updated, ", ") +
                            "".concat(t('processing.stats.cardsDeleted'), ": ").concat(stats.deleted, ", ").concat(t('processing.stats.cardsSkipped'), ": ").concat(stats.skipped, ", ").concat(t('processing.stats.cardsError'), ": ").concat(stats.errors));
                        if (allNotifications.length === 1 && this.settings.showNoChangesNotice) { // Only the summary line
                            allNotifications.push("".concat(t('processing.success.folderProcessed'), ": \"").concat(folderPath, "\""));
                        }
                        return [2 /*return*/, allNotifications];
                }
            });
        });
    };
    /**
     * Process all markdown files in the vault to generate, update, and delete flashcards.
     * @param progressCallback Optional callback function to report progress
     * @returns Array of notification messages
     */
    CardsService.prototype.executeAll = function (progressCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var err_4, files, totalFiles, allNotifications, stats, i, file, fileNotifications, fileNotifications_2, fileNotifications_2_1, notification, err_5;
            var e_2, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.regex.update(this.settings);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.anki.ping()];
                    case 2:
                        _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _b.sent();
                        console.error(err_4);
                        return [2 /*return*/, ["Error: Anki must be open with AnkiConnect installed."]];
                    case 4:
                        files = this.app.vault.getMarkdownFiles();
                        totalFiles = files.length;
                        allNotifications = [];
                        stats = {
                            processed: 0,
                            created: 0,
                            updated: 0,
                            deleted: 0,
                            errors: 0,
                            skipped: 0
                        };
                        // Initialize models only once for all files
                        return [4 /*yield*/, this.anki.createModels(this.settings.sourceSupport, this.settings.codeHighlightSupport, this.settings.codeHighlightTheme)];
                    case 5:
                        // Initialize models only once for all files
                        _b.sent();
                        i = 0;
                        _b.label = 6;
                    case 6:
                        if (!(i < totalFiles)) return [3 /*break*/, 11];
                        file = files[i];
                        // Report progress if callback provided
                        if (progressCallback) {
                            progressCallback(i + 1, totalFiles, file.basename);
                        }
                        _b.label = 7;
                    case 7:
                        _b.trys.push([7, 9, , 10]);
                        return [4 /*yield*/, this.processFile(file)];
                    case 8:
                        fileNotifications = _b.sent();
                        stats.processed++;
                        try {
                            // Parse notifications to update statistics
                            for (fileNotifications_2 = (e_2 = void 0, __values(fileNotifications)), fileNotifications_2_1 = fileNotifications_2.next(); !fileNotifications_2_1.done; fileNotifications_2_1 = fileNotifications_2.next()) {
                                notification = fileNotifications_2_1.value;
                                if (notification.includes("Inserted successfully")) {
                                    stats.created++;
                                }
                                else if (notification.includes("Updated successfully")) {
                                    stats.updated++;
                                }
                                else if (notification.includes("Deleted successfully")) {
                                    stats.deleted++;
                                }
                                else if (notification.includes("Error")) {
                                    stats.errors++;
                                }
                                else if (notification.includes("Nothing to do")) {
                                    stats.skipped++;
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (fileNotifications_2_1 && !fileNotifications_2_1.done && (_a = fileNotifications_2.return)) _a.call(fileNotifications_2);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        if (fileNotifications.length > 0) {
                            allNotifications.push("[".concat(file.path, "]: ").concat(fileNotifications.join(', ')));
                        }
                        return [3 /*break*/, 10];
                    case 9:
                        err_5 = _b.sent();
                        console.error("Error processing file ".concat(file.path, ":"), err_5);
                        allNotifications.push("[".concat(file.path, "]: ").concat(t('notifications.error'), " - ").concat(err_5.message || t('notifications.unknownError')));
                        stats.errors++;
                        return [3 /*break*/, 10];
                    case 10:
                        i++;
                        return [3 /*break*/, 6];
                    case 11:
                        // Add summary statistics
                        allNotifications.unshift("".concat(t('notifications.processingComplete'), " - ") +
                            "".concat(t('processing.stats.filesProcessed'), ": ").concat(stats.processed, ", ").concat(t('processing.stats.cardsCreated'), ": ").concat(stats.created, ", ").concat(t('processing.stats.cardsUpdated'), ": ").concat(stats.updated, ", ") +
                            "".concat(t('processing.stats.cardsDeleted'), ": ").concat(stats.deleted, ", ").concat(t('processing.stats.cardsSkipped'), ": ").concat(stats.skipped, ", ").concat(t('processing.stats.cardsError'), ": ").concat(stats.errors));
                        if (allNotifications.length === 1 && this.settings.showNoChangesNotice) { // Only the summary line
                            allNotifications.push(t('notifications.allFilesProcessedNoChanges'));
                        }
                        return [2 /*return*/, allNotifications];
                }
            });
        });
    };
    /**
     * Process a single file to generate, update, and delete flashcards.
     * @param activeFile The file to process
     * @returns Array of notification messages
     */
    CardsService.prototype.processFile = function (activeFile) {
        return __awaiter(this, void 0, void 0, function () {
            var filePath, sourcePath, fileCachedMetadata, vaultName, globalTags, frontmatter, deckName, _a, ankiBlocks, ankiCards, _b, cards, _c, cardsToCreate, cardsToUpdate, cardsNotInAnki, cardIds, cardsToDelete, cardsNotInAnki_1, cardsNotInAnki_1_1, card, updatedFrontmatter, deckNeedToBeChanged, err_6;
            var e_3, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        // Init for the execute phase
                        this.updateFile = false;
                        this.totalOffset = 0;
                        this.notifications = [];
                        filePath = activeFile.basename;
                        sourcePath = activeFile.path;
                        fileCachedMetadata = this.app.metadataCache.getFileCache(activeFile);
                        vaultName = this.app.vault.getName();
                        globalTags = undefined;
                        frontmatter = fileCachedMetadata === null || fileCachedMetadata === void 0 ? void 0 : fileCachedMetadata.frontmatter;
                        deckName = "";
                        if (obsidian.parseFrontMatterEntry(frontmatter, "cards-deck")) {
                            deckName = obsidian.parseFrontMatterEntry(frontmatter, "cards-deck");
                        }
                        else if (this.settings.folderBasedDeck && activeFile.parent.path !== "/") {
                            // If the current file is in the path "programming/java/strings.md" then the deck name is "programming::java"
                            deckName = activeFile.parent.path.split("/").join("::");
                        }
                        else {
                            deckName = this.settings.deck;
                        }
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 11, , 12]);
                        return [4 /*yield*/, this.anki.createDeck(deckName)];
                    case 2:
                        _e.sent();
                        _a = this;
                        return [4 /*yield*/, this.app.vault.read(activeFile)];
                    case 3:
                        _a.file = _e.sent();
                        if (!this.file.endsWith("\n")) {
                            this.file += "\n";
                        }
                        globalTags = this.parseGlobalTags(this.file);
                        ankiBlocks = this.parser.getAnkiIDsBlocks(this.file);
                        if (!ankiBlocks) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.anki.getCards(this.getAnkiIDs(ankiBlocks))];
                    case 4:
                        _b = _e.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        _b = undefined;
                        _e.label = 6;
                    case 6:
                        ankiCards = _b;
                        cards = this.parser.generateFlashcards(this.file, deckName, vaultName, filePath, globalTags);
                        _c = __read(this.filterByUpdate(ankiCards, cards), 3), cardsToCreate = _c[0], cardsToUpdate = _c[1], cardsNotInAnki = _c[2];
                        cardIds = this.getCardsIds(ankiCards, cards);
                        cardsToDelete = this.parser.getCardsToDelete(this.file);
                        console.info("Flashcards for ".concat(filePath, ": Cards to create"));
                        console.info(cardsToCreate);
                        console.info("Flashcards for ".concat(filePath, ": Cards to update"));
                        console.info(cardsToUpdate);
                        console.info("Flashcards for ".concat(filePath, ": Cards to delete"));
                        console.info(cardsToDelete);
                        if (cardsNotInAnki) {
                            console.info("Flashcards for ".concat(filePath, ": Cards not in Anki (maybe deleted)"));
                            try {
                                for (cardsNotInAnki_1 = __values(cardsNotInAnki), cardsNotInAnki_1_1 = cardsNotInAnki_1.next(); !cardsNotInAnki_1_1.done; cardsNotInAnki_1_1 = cardsNotInAnki_1.next()) {
                                    card = cardsNotInAnki_1_1.value;
                                    this.notifications.push("".concat(t('notifications.error'), ": ").concat(t('notifications.cardNotInAnki'), " (ID: ").concat(card.id, ")"));
                                }
                            }
                            catch (e_3_1) { e_3 = { error: e_3_1 }; }
                            finally {
                                try {
                                    if (cardsNotInAnki_1_1 && !cardsNotInAnki_1_1.done && (_d = cardsNotInAnki_1.return)) _d.call(cardsNotInAnki_1);
                                }
                                finally { if (e_3) throw e_3.error; }
                            }
                        }
                        console.info(cardsNotInAnki);
                        this.insertMedias(cards, sourcePath);
                        return [4 /*yield*/, this.deleteCardsOnAnki(cardsToDelete, ankiBlocks)];
                    case 7:
                        _e.sent();
                        return [4 /*yield*/, this.updateCardsOnAnki(cardsToUpdate)];
                    case 8:
                        _e.sent();
                        return [4 /*yield*/, this.insertCardsOnAnki(cardsToCreate, frontmatter, deckName)];
                    case 9:
                        _e.sent();
                        updatedFrontmatter = this.parseFrontmatterFromContent(this.file);
                        this.updateFrontmatter(updatedFrontmatter, deckName);
                        return [4 /*yield*/, this.deckNeedToBeChanged(cardIds, deckName)];
                    case 10:
                        deckNeedToBeChanged = _e.sent();
                        if (deckNeedToBeChanged) {
                            try {
                                this.anki.changeDeck(cardIds, deckName);
                                this.notifications.push(t('notifications.cardsMovedToDeck'));
                            }
                            catch (_f) {
                                return [2 /*return*/, [t('notifications.error') + ': ' + t('notifications.couldNotUpdateDeck')]];
                            }
                        }
                        // Update file
                        if (this.updateFile) {
                            try {
                                this.app.vault.modify(activeFile, this.file);
                            }
                            catch (err) {
                                Error(t('notifications.couldNotUpdateFile'));
                                return [2 /*return*/, [t('notifications.error') + ': ' + t('notifications.couldNotUpdateFile')]];
                            }
                        }
                        if (!this.notifications.length && this.settings.showNoChangesNotice) {
                            this.notifications.push(t('notifications.nothingToDo') + '. ' + t('notifications.everythingUpToDate'));
                        }
                        return [2 /*return*/, this.notifications];
                    case 11:
                        err_6 = _e.sent();
                        console.error(err_6);
                        Error(t('notifications.error'));
                        return [2 /*return*/, ["".concat(t('notifications.error'), ": ").concat(err_6.message || t('notifications.unknownError'))]];
                    case 12: return [2 /*return*/];
                }
            });
        });
    };
    CardsService.prototype.insertMedias = function (cards, sourcePath) {
        return __awaiter(this, void 0, void 0, function () {
            var err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        // Currently the media are created for every run, this is not a problem since Anki APIs overwrite the file
                        // A more efficient way would be to keep track of the medias saved
                        return [4 /*yield*/, this.generateMediaLinks(cards, sourcePath)];
                    case 1:
                        // Currently the media are created for every run, this is not a problem since Anki APIs overwrite the file
                        // A more efficient way would be to keep track of the medias saved
                        _a.sent();
                        return [4 /*yield*/, this.anki.storeMediaFiles(cards, this.settings.codeHighlightSupport, this.settings.codeHighlightTheme)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        console.error(err_7);
                        Error(t('notifications.error') + ': ' + t('notifications.couldNotUploadMedia'));
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    CardsService.prototype.generateMediaLinks = function (cards, sourcePath) {
        return __awaiter(this, void 0, void 0, function () {
            var cards_1, cards_1_1, card, _a, _b, media, image, binaryMedia, e_4_1, e_5_1;
            var e_5, _c, e_4, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (!(this.app.vault.adapter instanceof obsidian.FileSystemAdapter)) return [3 /*break*/, 16];
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 14, 15, 16]);
                        cards_1 = __values(cards), cards_1_1 = cards_1.next();
                        _e.label = 2;
                    case 2:
                        if (!!cards_1_1.done) return [3 /*break*/, 13];
                        card = cards_1_1.value;
                        _e.label = 3;
                    case 3:
                        _e.trys.push([3, 10, 11, 12]);
                        _a = (e_4 = void 0, __values(card.mediaNames)), _b = _a.next();
                        _e.label = 4;
                    case 4:
                        if (!!_b.done) return [3 /*break*/, 9];
                        media = _b.value;
                        image = this.app.metadataCache.getFirstLinkpathDest(decodeURIComponent(media), sourcePath);
                        _e.label = 5;
                    case 5:
                        _e.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this.app.vault.readBinary(image)];
                    case 6:
                        binaryMedia = _e.sent();
                        card.mediaBase64Encoded.push(arrayBufferToBase64(binaryMedia));
                        return [3 /*break*/, 8];
                    case 7:
                        _e.sent();
                        Error(t('notifications.error') + ': ' + t('notifications.couldNotReadMedia'));
                        return [3 /*break*/, 8];
                    case 8:
                        _b = _a.next();
                        return [3 /*break*/, 4];
                    case 9: return [3 /*break*/, 12];
                    case 10:
                        e_4_1 = _e.sent();
                        e_4 = { error: e_4_1 };
                        return [3 /*break*/, 12];
                    case 11:
                        try {
                            if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                        }
                        finally { if (e_4) throw e_4.error; }
                        return [7 /*endfinally*/];
                    case 12:
                        cards_1_1 = cards_1.next();
                        return [3 /*break*/, 2];
                    case 13: return [3 /*break*/, 16];
                    case 14:
                        e_5_1 = _e.sent();
                        e_5 = { error: e_5_1 };
                        return [3 /*break*/, 16];
                    case 15:
                        try {
                            if (cards_1_1 && !cards_1_1.done && (_c = cards_1.return)) _c.call(cards_1);
                        }
                        finally { if (e_5) throw e_5.error; }
                        return [7 /*endfinally*/];
                    case 16: return [2 /*return*/];
                }
            });
        });
    };
    CardsService.prototype.insertCardsOnAnki = function (cardsToCreate, frontmatter, deckName) {
        return __awaiter(this, void 0, void 0, function () {
            var insertedCards_1, ids, total_1, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!cardsToCreate.length) return [3 /*break*/, 4];
                        insertedCards_1 = 0;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.anki.addCards(cardsToCreate)];
                    case 2:
                        ids = _a.sent();
                        // Add IDs from response to Flashcard[]
                        ids.map(function (id, index) {
                            cardsToCreate[index].id = id;
                        });
                        total_1 = 0;
                        cardsToCreate.forEach(function (card) {
                            if (card.id === null) {
                                new obsidian.Notice("Error, could not add: '".concat(card.initialContent, "'"), noticeTimeout);
                            }
                            else {
                                card.reversed ? (insertedCards_1 += 2) : insertedCards_1++;
                            }
                            card.reversed ? (total_1 += 2) : total_1++;
                        });
                        this.writeAnkiBlocks(cardsToCreate);
                        this.notifications.push(t('notifications.insertedSuccessfully') + " ".concat(insertedCards_1, "/").concat(total_1, " ") + t('notifications.cards'));
                        return [2 /*return*/, insertedCards_1];
                    case 3:
                        err_9 = _a.sent();
                        console.error(err_9);
                        Error(t('notifications.error') + ': ' + t('notifications.couldNotWriteCards'));
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 从文件内容重新解析 frontmatter，获取最新的位置信息
     * @param content 当前文件内容
     * @returns FrontMatterCache 对象或 null
     */
    CardsService.prototype.parseFrontmatterFromContent = function (content) {
        var frontmatterRegex = /^---\s*\n([\s\S]*?)\n---/;
        var match = content.match(frontmatterRegex);
        if (match) {
            var start = content.indexOf('---');
            var end = content.indexOf('---', start + 3) + 3;
            return {
                position: {
                    start: { offset: start },
                    end: { offset: end }
                }
            };
        }
        return null;
    };
    CardsService.prototype.updateFrontmatter = function (frontmatter, deckName) {
        var _a, _b;
        var newFrontmatter = "";
        var cardsDeckLine = "cards-deck: ".concat(deckName, "\n");
        if (((_a = frontmatter === null || frontmatter === void 0 ? void 0 : frontmatter.position) === null || _a === void 0 ? void 0 : _a.start) && ((_b = frontmatter === null || frontmatter === void 0 ? void 0 : frontmatter.position) === null || _b === void 0 ? void 0 : _b.end)) {
            var oldFrontmatter = this.file.substring(frontmatter.position.start.offset, frontmatter.position.end.offset);
            // 创建非全局版本的正则表达式来避免 lastIndex 问题
            var cardsDeckRegex = /^\s*cards-deck:\s+.+$/mi;
            // 使用非全局正则表达式检查是否存在 cards-deck
            if (!cardsDeckRegex.test(oldFrontmatter)) {
                newFrontmatter =
                    oldFrontmatter.substring(0, oldFrontmatter.length - 3) +
                        cardsDeckLine +
                        "---";
                this.totalOffset += cardsDeckLine.length;
                this.file =
                    newFrontmatter +
                        this.file.substring(frontmatter.position.end.offset, this.file.length);
            }
        }
        else {
            newFrontmatter = "---\n".concat(cardsDeckLine, "---\n\n");
            this.totalOffset += newFrontmatter.length;
            this.file = newFrontmatter + this.file;
        }
    };
    /**
     * 智能插入卡片ID，确保总是在答案后新增一行
     * 修复：避免重复写入已存在的ID
     * @param cardsToCreate 要创建的卡片数组
     */
    CardsService.prototype.writeAnkiBlocks = function (cardsToCreate) {
        var e_6, _a;
        try {
            for (var cardsToCreate_1 = __values(cardsToCreate), cardsToCreate_1_1 = cardsToCreate_1.next(); !cardsToCreate_1_1.done; cardsToCreate_1_1 = cardsToCreate_1.next()) {
                var card = cardsToCreate_1_1.value;
                // Card.id cannot be null, because if written already previously it has an ID,
                //   if it has been inserted it has an ID too
                // 新增检查：如果卡片已经有ID且已插入，则跳过写入
                if (card.id !== null && !card.inserted) {
                    card.endOffset += this.totalOffset;
                    var offset = card.endOffset;
                    // 检查插入位置附近是否已存在ID，避免重复写入
                    var checkRange = 50; // 检查前后50个字符范围
                    var startCheck = Math.max(0, offset - checkRange);
                    var endCheck = Math.min(this.file.length, offset + checkRange);
                    var surroundingText = this.file.substring(startCheck, endCheck);
                    var idPattern = /\^(\d{13})/;
                    // 如果附近已存在ID，跳过写入
                    if (idPattern.test(surroundingText)) {
                        console.log("\u8DF3\u8FC7\u91CD\u590DID\u5199\u5165: \u5361\u7247ID ".concat(card.id, " \u9644\u8FD1\u5DF2\u5B58\u5728ID"));
                        continue;
                    }
                    // 获取插入位置前的字符，检查是否需要添加换行符
                    var charBeforeOffset = offset > 0 ? this.file.charAt(offset - 1) : '';
                    var needsNewline = charBeforeOffset !== '\n' && charBeforeOffset !== '';
                    // 统一ID格式：总是以换行符开始，以换行符结束（除非是内联卡片且设置为行内显示）
                    var id = void 0;
                    if (card instanceof Inlinecard && this.settings.inlineID) {
                        // 内联卡片且设置为行内显示：前面加空格
                        id = " ^" + card.id.toString();
                    }
                    else {
                        // 其他情况：确保在新行显示
                        var prefix = needsNewline ? '\n' : '';
                        id = prefix + "^" + card.id.toString() + '\n';
                    }
                    this.updateFile = true;
                    this.file =
                        this.file.substring(0, offset) +
                            id +
                            this.file.substring(offset, this.file.length + 1);
                    this.totalOffset += id.length;
                    console.log("\u6210\u529F\u5199\u5165\u5361\u7247ID: ".concat(card.id, " \u5728\u4F4D\u7F6E ").concat(offset));
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (cardsToCreate_1_1 && !cardsToCreate_1_1.done && (_a = cardsToCreate_1.return)) _a.call(cardsToCreate_1);
            }
            finally { if (e_6) throw e_6.error; }
        }
    };
    CardsService.prototype.updateCardsOnAnki = function (cards) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (cards.length) {
                    try {
                        this.anki.updateCards(cards, this.settings.codeHighlightSupport, this.settings.codeHighlightTheme);
                        this.notifications.push(t('notifications.updatedSuccessfully') + " ".concat(cards.length, "/").concat(cards.length, " ") + t('notifications.cards'));
                    }
                    catch (err) {
                        console.error(err);
                        Error(t('notifications.error') + ': ' + t('notifications.couldNotUpdateCards'));
                    }
                    return [2 /*return*/, cards.length];
                }
                return [2 /*return*/];
            });
        });
    };
    CardsService.prototype.deleteCardsOnAnki = function (cards, ankiBlocks) {
        return __awaiter(this, void 0, void 0, function () {
            var deletedCards, ankiBlocks_1, ankiBlocks_1_1, block, id;
            var e_7, _a;
            return __generator(this, function (_b) {
                if (cards.length) {
                    deletedCards = 0;
                    try {
                        for (ankiBlocks_1 = __values(ankiBlocks), ankiBlocks_1_1 = ankiBlocks_1.next(); !ankiBlocks_1_1.done; ankiBlocks_1_1 = ankiBlocks_1.next()) {
                            block = ankiBlocks_1_1.value;
                            id = Number(block[1]);
                            // Deletion of cards that need to be deleted (i.e. blocks ID that don't have content)
                            if (cards.includes(id)) {
                                try {
                                    this.anki.deleteCards(cards);
                                    deletedCards++;
                                    this.updateFile = true;
                                    this.file =
                                        this.file.substring(0, block["index"]) +
                                            this.file.substring(block["index"] + block[0].length, this.file.length);
                                    this.totalOffset -= block[0].length;
                                    this.notifications.push(t('notifications.deletedSuccessfully') + " ".concat(deletedCards, "/").concat(cards.length, " ") + t('notifications.cards'));
                                }
                                catch (err) {
                                    console.error(err);
                                    Error(t('notifications.error') + ': ' + t('notifications.couldNotDeleteCard'));
                                }
                            }
                        }
                    }
                    catch (e_7_1) { e_7 = { error: e_7_1 }; }
                    finally {
                        try {
                            if (ankiBlocks_1_1 && !ankiBlocks_1_1.done && (_a = ankiBlocks_1.return)) _a.call(ankiBlocks_1);
                        }
                        finally { if (e_7) throw e_7.error; }
                    }
                    return [2 /*return*/, deletedCards];
                }
                return [2 /*return*/];
            });
        });
    };
    CardsService.prototype.getAnkiIDs = function (blocks) {
        var e_8, _a;
        var IDs = [];
        try {
            for (var blocks_1 = __values(blocks), blocks_1_1 = blocks_1.next(); !blocks_1_1.done; blocks_1_1 = blocks_1.next()) {
                var b = blocks_1_1.value;
                IDs.push(Number(b[1]));
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (blocks_1_1 && !blocks_1_1.done && (_a = blocks_1.return)) _a.call(blocks_1);
            }
            finally { if (e_8) throw e_8.error; }
        }
        return IDs;
    };
    CardsService.prototype.filterByUpdate = function (ankiCards, generatedCards) {
        var e_9, _a;
        var cardsToCreate = [];
        var cardsToUpdate = [];
        var cardsNotInAnki = [];
        if (ankiCards) {
            var _loop_1 = function (flashcard) {
                // Inserted means that anki blocks are available, that means that the card should
                // 	(the user can always delete it) be in Anki
                var ankiCard = undefined;
                if (flashcard.inserted) {
                    ankiCard = ankiCards.filter(function (card) { return Number(card.noteId) === flashcard.id; })[0];
                    if (!ankiCard) {
                        cardsNotInAnki.push(flashcard);
                    }
                    else if (!flashcard.match(ankiCard)) {
                        flashcard.oldTags = ankiCard.tags;
                        cardsToUpdate.push(flashcard);
                    }
                }
                else {
                    cardsToCreate.push(flashcard);
                }
            };
            try {
                for (var generatedCards_1 = __values(generatedCards), generatedCards_1_1 = generatedCards_1.next(); !generatedCards_1_1.done; generatedCards_1_1 = generatedCards_1.next()) {
                    var flashcard = generatedCards_1_1.value;
                    _loop_1(flashcard);
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (generatedCards_1_1 && !generatedCards_1_1.done && (_a = generatedCards_1.return)) _a.call(generatedCards_1);
                }
                finally { if (e_9) throw e_9.error; }
            }
        }
        else {
            cardsToCreate = __spreadArray([], __read(generatedCards), false);
        }
        return [cardsToCreate, cardsToUpdate, cardsNotInAnki];
    };
    CardsService.prototype.deckNeedToBeChanged = function (cardsIds, deckName) {
        return __awaiter(this, void 0, void 0, function () {
            var cardsInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.anki.cardsInfo(cardsIds)];
                    case 1:
                        cardsInfo = _a.sent();
                        // console.log("Flashcards: Cards info");
                        // console.log(cardsInfo);
                        if (cardsInfo.length !== 0) {
                            return [2 /*return*/, cardsInfo[0].deckName !== deckName];
                        }
                        return [2 /*return*/, false];
                }
            });
        });
    };
    CardsService.prototype.getCardsIds = function (ankiCards, generatedCards) {
        var e_10, _a;
        var ids = [];
        if (ankiCards) {
            var _loop_2 = function (flashcard) {
                var ankiCard = undefined;
                if (flashcard.inserted) {
                    ankiCard = ankiCards.filter(function (card) { return Number(card.noteId) === flashcard.id; })[0];
                    if (ankiCard) {
                        ids = ids.concat(ankiCard.cards);
                    }
                }
            };
            try {
                for (var generatedCards_2 = __values(generatedCards), generatedCards_2_1 = generatedCards_2.next(); !generatedCards_2_1.done; generatedCards_2_1 = generatedCards_2.next()) {
                    var flashcard = generatedCards_2_1.value;
                    _loop_2(flashcard);
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (generatedCards_2_1 && !generatedCards_2_1.done && (_a = generatedCards_2.return)) _a.call(generatedCards_2);
                }
                finally { if (e_10) throw e_10.error; }
            }
        }
        return ids;
    };
    CardsService.prototype.parseGlobalTags = function (file) {
        var globalTags = [];
        var tags = file.match(/(?:cards-)?tags: ?(.*)/im);
        globalTags = tags ? tags[1].match(this.regex.globalTagsSplitter) : [];
        if (globalTags) {
            for (var i = 0; i < globalTags.length; i++) {
                globalTags[i] = globalTags[i].replace("#", "");
                globalTags[i] = globalTags[i].replace(/\//g, "::");
                globalTags[i] = globalTags[i].replace(/\[\[(.*)\]\]/, "$1");
                globalTags[i] = globalTags[i].trim();
                globalTags[i] = globalTags[i].replace(/ /g, "-");
            }
            return globalTags;
        }
        return [];
    };
    return CardsService;
}());

var Ob8AnkiPlugin = /** @class */ (function (_super) {
    __extends(Ob8AnkiPlugin, _super);
    function Ob8AnkiPlugin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Ob8AnkiPlugin.prototype.onload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var anki, _a, statusBar;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        obsidian.addIcon("ob8anki", flashcardsIcon);
                        anki = new Anki();
                        _a = this;
                        return [4 /*yield*/, this.loadData()];
                    case 1:
                        _a.settings = (_b.sent()) || this.getDefaultSettings();
                        // 初始化多语言管理器
                        i18n.setLanguage(this.settings.language);
                        this.cardsService = new CardsService(this.app, this.settings);
                        statusBar = this.addStatusBarItem();
                        this.addCommand({
                            id: 'generate-flashcard-current-file',
                            name: t('commands.generateCurrentFile'),
                            checkCallback: function (checking) {
                                var activeFile = _this.app.workspace.getActiveFile();
                                if (activeFile) {
                                    if (!checking) {
                                        _this.generateCards(activeFile);
                                    }
                                    return true;
                                }
                                return false;
                            }
                        });
                        this.addCommand({
                            id: 'generate-flashcard-all-files',
                            name: t('commands.generateAllFiles'),
                            callback: function () {
                                _this.generateCardsForAllFiles();
                            }
                        });
                        this.addRibbonIcon('ob8anki', t('commands.generateFlashcards'), function () {
                            var activeFile = _this.app.workspace.getActiveFile();
                            // Check user preference for ribbon icon behavior
                            switch (_this.settings.ribbonAction) {
                                case "all":
                                    _this.generateCardsForAllFiles();
                                    return;
                                case "folder":
                                    if (activeFile) {
                                        _this.generateCardsForCurrentFolder();
                                    }
                                    else {
                                        new ConfirmationModal(_this.app, t('ui.processAllFilesPrompt'), function () { return _this.generateCardsForAllFiles(); }).open();
                                    }
                                    return;
                                case "single":
                                default:
                                    if (activeFile) {
                                        _this.generateCards(activeFile);
                                    }
                                    else {
                                        new ConfirmationModal(_this.app, t('ui.processAllFilesPrompt'), function () { return _this.generateCardsForAllFiles(); }).open();
                                    }
                            }
                        });
                        this.addSettingTab(new SettingsTab(this.app, this));
                        this.registerInterval(window.setInterval(function () {
                            return anki.ping().then(function () { return statusBar.setText('Anki ⚡️'); }).catch(function () { return statusBar.setText(''); });
                        }, 15 * 1000));
                        return [2 /*return*/];
                }
            });
        });
    };
    Ob8AnkiPlugin.prototype.onunload = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.saveData(this.settings)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Ob8AnkiPlugin.prototype.getDefaultSettings = function () {
        return {
            contextAwareMode: true,
            sourceSupport: false,
            codeHighlightSupport: false,
            inlineID: false,
            contextSeparator: " > ",
            deck: "Default",
            folderBasedDeck: true,
            flashcardsTag: "card",
            inlineSeparator: "::",
            inlineSeparatorReverse: ":::",
            defaultAnkiTag: "obsidian",
            ankiConnectPermission: false,
            ribbonAction: "single",
            showNoChangesNotice: true,
            language: DEFAULT_LANGUAGE // 默认语言设置为中文
        };
    };
    Ob8AnkiPlugin.prototype.generateCards = function (activeFile) {
        this.cardsService.execute(activeFile).then(function (res) {
            var e_1, _a;
            try {
                for (var res_1 = __values(res), res_1_1 = res_1.next(); !res_1_1.done; res_1_1 = res_1.next()) {
                    var r = res_1_1.value;
                    new obsidian.Notice(r, noticeTimeout);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (res_1_1 && !res_1_1.done && (_a = res_1.return)) _a.call(res_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            console.log(res);
        }).catch(function (err) {
        });
    };
    Ob8AnkiPlugin.prototype.generateCardsForCurrentFolder = function () {
        var _this = this;
        var _a;
        var activeFile = this.app.workspace.getActiveFile();
        if (!activeFile) {
            new obsidian.Notice(t('ui.openFileFirst'), noticeTimeout);
            return;
        }
        var folderPath = (_a = activeFile.parent) === null || _a === void 0 ? void 0 : _a.path;
        if (!folderPath) {
            new obsidian.Notice(t('ui.cannotDetermineFolder'), noticeTimeout);
            return;
        }
        // Create progress element
        var progressContainer = document.createElement('div');
        progressContainer.className = 'ob8anki-progress';
        progressContainer.innerHTML = "\n\t\t\t<div>".concat(t('ui.processingProgress'), ": <span id=\"ob8anki-current\">0</span>/<span id=\"ob8anki-total\">").concat(t('ui.calculating'), "</span></div>\n\t\t\t<div>").concat(t('ui.currentFile'), ": <span id=\"ob8anki-filename\">").concat(t('ui.preparing'), "</span></div>\n\t\t\t<div>").concat(t('ui.currentFolder'), ": ").concat(folderPath, "</div>\n\t\t\t<div class=\"ob8anki-progress-bar\" style=\"width: 0%\"></div>\n\t\t");
        document.body.appendChild(progressContainer);
        // Get elements for updating
        var currentElement = document.getElementById('ob8anki-current');
        var filenameElement = document.getElementById('ob8anki-filename');
        var progressBarElement = progressContainer.querySelector('.ob8anki-progress-bar');
        // Progress callback function
        var updateProgress = function (current, total, filename) {
            if (currentElement)
                currentElement.textContent = current.toString();
            if (filenameElement)
                filenameElement.textContent = filename;
            if (progressBarElement) {
                var percentage = Math.round((current / total) * 100);
                progressBarElement.setAttribute('style', "width: ".concat(percentage, "%"));
            }
        };
        // Process folder files with progress tracking
        this.cardsService.executeFolder(folderPath, updateProgress).then(function (res) {
            // Remove progress element
            document.body.removeChild(progressContainer);
            // Show results in a modal for better readability
            new ResultsModal(_this.app, "".concat(t('ui.folderProcessingResults'), " \"").concat(folderPath, "\""), res).open();
            // Also log results to console
            console.log("Flashcards generation for folder \"".concat(folderPath, "\" completed:"), res);
        }).catch(function (err) {
            // Remove progress element and show error
            document.body.removeChild(progressContainer);
            new obsidian.Notice("".concat(t('ui.processingError'), " \"").concat(folderPath, "\": ").concat(err.message || t('ui.unknownError')), noticeTimeout);
            console.error(err);
        });
    };
    Ob8AnkiPlugin.prototype.generateCardsForAllFiles = function () {
        var _this = this;
        // Get total number of files
        var totalFiles = this.app.vault.getMarkdownFiles().length;
        // Create progress element
        var progressContainer = document.createElement('div');
        progressContainer.className = 'ob8anki-progress';
        progressContainer.innerHTML = "\n\t\t\t<div>".concat(t('ui.processingProgress'), ": <span id=\"ob8anki-current\">0</span>/<span id=\"ob8anki-total\">").concat(totalFiles, "</span></div>\n\t\t\t<div>").concat(t('ui.currentFile'), ": <span id=\"ob8anki-filename\">").concat(t('ui.preparing'), "</span></div>\n\t\t\t<div class=\"ob8anki-progress-bar\" style=\"width: 0%\"></div>\n\t\t");
        document.body.appendChild(progressContainer);
        // Get elements for updating
        var currentElement = document.getElementById('ob8anki-current');
        var filenameElement = document.getElementById('ob8anki-filename');
        var progressBarElement = progressContainer.querySelector('.ob8anki-progress-bar');
        // Progress callback function
        var updateProgress = function (current, total, filename) {
            if (currentElement)
                currentElement.textContent = current.toString();
            if (filenameElement)
                filenameElement.textContent = filename;
            if (progressBarElement) {
                var percentage = Math.round((current / total) * 100);
                progressBarElement.setAttribute('style', "width: ".concat(percentage, "%"));
            }
        };
        // Process all files with progress tracking
        this.cardsService.executeAll(updateProgress).then(function (res) {
            // Remove progress element
            document.body.removeChild(progressContainer);
            // Show results in a modal for better readability
            new ResultsModal(_this.app, t('ui.flashcardsGenerationResults'), res).open();
            // Also log results to console
            console.log("Flashcards generation for all files completed:", res);
        }).catch(function (err) {
            // Remove progress element and show error
            document.body.removeChild(progressContainer);
            new obsidian.Notice("".concat(t('ui.processingError'), ": ").concat(err.message || t('ui.unknownError')), noticeTimeout);
            console.error(err);
        });
    };
    return Ob8AnkiPlugin;
}(obsidian.Plugin));
// Modal for confirmation dialogs
var ConfirmationModal = /** @class */ (function (_super) {
    __extends(ConfirmationModal, _super);
    function ConfirmationModal(app, message, onConfirm) {
        var _this = _super.call(this, app) || this;
        _this.message = message;
        _this.onConfirm = onConfirm;
        return _this;
    }
    ConfirmationModal.prototype.onOpen = function () {
        var _this = this;
        var contentEl = this.contentEl;
        contentEl.createEl("h2", { text: t('ui.confirmation') });
        contentEl.createEl("p", { text: this.message });
        var buttonContainer = contentEl.createDiv();
        buttonContainer.addClass("ob8anki-modal-buttons");
        var confirmButton = buttonContainer.createEl("button", { text: t('ui.yes') });
        confirmButton.addEventListener("click", function () {
            _this.onConfirm();
            _this.close();
        });
        var cancelButton = buttonContainer.createEl("button", { text: t('ui.no') });
        cancelButton.addEventListener("click", function () {
            _this.close();
        });
    };
    ConfirmationModal.prototype.onClose = function () {
        var contentEl = this.contentEl;
        contentEl.empty();
    };
    return ConfirmationModal;
}(obsidian.Modal));
// Modal for displaying results
var ResultsModal = /** @class */ (function (_super) {
    __extends(ResultsModal, _super);
    function ResultsModal(app, title, results) {
        var _this = _super.call(this, app) || this;
        _this.title = title;
        _this.results = results;
        return _this;
    }
    ResultsModal.prototype.onOpen = function () {
        var e_2, _a;
        var _this = this;
        var contentEl = this.contentEl;
        contentEl.createEl("h2", { text: this.title });
        var resultsContainer = contentEl.createDiv();
        resultsContainer.addClass("ob8anki-results-container");
        if (this.results.length > 0) {
            var resultsList = resultsContainer.createEl("ul");
            try {
                for (var _b = __values(this.results), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var result = _c.value;
                    resultsList.createEl("li", { text: result });
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        else {
            resultsContainer.createEl("p", { text: t('ui.noResultsToDisplay') });
        }
        var buttonContainer = contentEl.createDiv();
        buttonContainer.addClass("ob8anki-modal-buttons");
        var closeButton = buttonContainer.createEl("button", { text: t('ui.close') });
        closeButton.addEventListener("click", function () {
            _this.close();
        });
    };
    ResultsModal.prototype.onClose = function () {
        var contentEl = this.contentEl;
        contentEl.empty();
    };
    return ResultsModal;
}(obsidian.Modal));

module.exports = Ob8AnkiPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
